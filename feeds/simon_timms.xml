<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/simon_timms" rel="self" type="application/atom+xml"/>
  <link href="https://westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2021-10-22T22:39:18.342Z</updated>
  <id>https://westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>https://westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">RLS-with-power-bi</title>
    <link href="https://westerndevs.com/_/RLS-with-power-bi/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/RLS-with-power-bi/</id>
    <published>2021-10-22T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<h2>Using RLS in Power BI Embedded</h2><p>Power BI is a funny animal. On some levels it is a logical successor to SSRS but on other levels it is a totally different beast. One of the ways it differs greatly from SSRS is in handling parameters, especially secure parameters. When embedding an SSRS report you could specify the parameter value in a secure fashion and then now show the selector to end users.</p><p>In many cases there is a need to use row level security (RLS) to restrict the data that a user can see in Power BI. There are a myriad of ways to do this wrong and I think I've explored most of them over the last few days. There is also at least one way that works.</p><p>A tempting approach is to use a filter. These can be applied at render time in the browser by adding to the config when embedding the report.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">      visualName: <span class="string">''</span>,</span><br><span class="line">      type: <span class="string">'report'</span>,</span><br><span class="line">      accessToken: token, </span><br><span class="line">      embedUrl: token.embedUrl,</span><br><span class="line">      tokenType: powerbi.models.TokenType.Embed,</span><br><span class="line">      permissions: permissions,</span><br><span class="line">      <span class="comment">// üëá filters</span></span><br><span class="line">      filters: [</span><br><span class="line">        &#123;</span><br><span class="line">          $schema: <span class="string">"http://powerbi.com/product/schema#basic"</span>,</span><br><span class="line">          target: &#123;</span><br><span class="line">              table: <span class="string">"monthlyProducts"</span>,</span><br><span class="line">              column: <span class="string">"userId"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          operator: <span class="string">"In"</span>,</span><br><span class="line">          values: [<span class="string">"stimms"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">// ‚òùÔ∏è</span></span><br><span class="line">      settings: &#123;</span><br><span class="line">        panes: &#123;</span><br><span class="line">          filters: &#123;</span><br><span class="line">            visible: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          pageNavigation: &#123;</span><br><span class="line">            visible: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>This class of parameter is fine for providing filters that can be updated later by the user. However, it should not be used for parameters that require some degree of security like a user name. These parameters are easily changed and, unless your parameter are in some way cryptographically secure there is a good chance you're introducing a broken access control - <a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/" target="_blank" rel="noopener">#1</a> on the <a href="https://owasp.org/www-project-top-ten/" target="_blank" rel="noopener">OWASP top 10</a>.</p><p>Instead of this approach you can use the manage roles functionality in Power BI.</p><p><img src="/images/2021-10-22-RLS_with_power_bi.md/2021-10-22-15-55-31.png" alt="">)</p><p>This functionality is designed to provide high level filters for data. A lot of the examples I see are for things like restricting a user in the <code>East</code> region from seeing the data of a user in the <code>West</code> region. This is done by assigning a role to that user when generating the embedding token. Then you'd set up a role for each region (see 1) and apply a filter expression to your tables so the only records with a region of <code>East</code> would show up.</p><p><img src="/images/2021-10-22-RLS_with_power_bi.md/2021-10-22-15-59-46.png" alt="">)</p><p>This is a simplistic and somewhat tiresome approach to adding a role mapping. What if a new region like <code>SouthEast</code> is introduced? What isn't, perhaps, as clear is that DAX expression can contain dynamic functions like <code>UserName()</code> which make filtering more powerful.</p><p>What I settled on for my filtering was to have a single role which I enforce at the embedded token generation level and then filter my data by the UserName() which I also set at the embedded token level. Because these are set at the embedded token generation time which occurs on the server I can be confident that I'm not providing a way for somebody to view data they shouldn't.</p><p>The code for generation looks like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tokenRequest = <span class="keyword">new</span> GenerateTokenRequestV2(</span><br><span class="line">                    reports: <span class="keyword">new</span> List&lt;GenerateTokenRequestV2Report&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">new</span> GenerateTokenRequestV2Report(reportId)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    datasets: <span class="keyword">new</span> List&lt;GenerateTokenRequestV2Dataset&gt; &#123; <span class="keyword">new</span> GenerateTokenRequestV2Dataset(report.DatasetId) &#125;,</span><br><span class="line">                    identities: <span class="keyword">new</span> List&lt;EffectiveIdentity&gt; &#123; <span class="keyword">new</span> EffectiveIdentity(user.ContactId.ToString(),</span><br><span class="line">                                                                roles: <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt; &#123; <span class="string">"ContactId"</span> &#125;,</span><br><span class="line">                                                                datasets: <span class="keyword">new</span> List&lt;String&gt;&#123;report.DatasetId &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line"><span class="keyword">var</span> embedToken = <span class="keyword">await</span> client.EmbedToken.GenerateTokenAsync(tokenRequest);</span><br></pre></td></tr></table></figure><p>In this particular case the data I was returning from the database could be accessed by a number of different people depending on to which group they belonged. Initially I tried crossing the data against the user/group matrix but the cardinality of the resulting set was in the billions and totally overwhelmed both SQL Server and Power BI. Instead what I did was pull in the user/group matrix and the dataset that exposed the group id. In Power BI I did a merge of the datasets along with applying the row level filtering. This was necessary because, as far as I know, there is no way to pass the user name down to the actual query running against the server.</p><p>With all this in place I got good security and good performance. But, wow, did it take me a long time to get there.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;Using RLS in Power BI Embedded&lt;/h2&gt;
&lt;p&gt;Power BI is a funny animal. On some levels it is a logical successor to SSRS but on other levels 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Running Serverless Offline with a Self-Signed SSL Certificate</title>
    <link href="https://westerndevs.com/_/serverless-offline-https/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/serverless-offline-https/</id>
    <published>2021-10-12T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.346Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you find yourself in need of running serverless locally using <a href="https://www.serverless.com/plugins/serverless-offline/" target="_blank" rel="noopener">serverless offline</a> and you want an SSL certificate then fear not, it's not all that difficult. First you'll need an SSL certificate. For our purposes you we're going to use a self-signed certificate. This will cause browsers to complain but for local testing it isn't typically a big problem.</p><h2>Generate a Cert Using OpenSSL</h2><p>You should install OpenSSL (or one of the more secure alternatives like <a href="https://www.libressl.org/" target="_blank" rel="noopener">LibreSSL</a>) and then run</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -newkey rsa:<span class="number">2048</span> -nodes -keyout key.pem -x509 -days <span class="number">365</span> -<span class="keyword">out</span> cert.pem</span><br></pre></td></tr></table></figure><p>This will prompt you for a bunch of information about your organization. You can put anything you want in most of those fields but do pay attention to the <code>Common Name</code> field which needs to hold the value of <code>localhost</code>.</p><p>These are the answers I gave</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Country Name (2 letter code) [AU]:US</span><br><span class="line">State <span class="keyword">or</span> Province Name (full name) [Some-State]:TX</span><br><span class="line">Locality Name (eg, city) []:Austin</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Inventive</span><br><span class="line">Organizational Unit Name (eg, section) []:</span><br><span class="line">Common Name (e.g.<span class="built_in"> server </span>FQDN <span class="keyword">or</span> YOUR name) []:localhost</span><br><span class="line">Email<span class="built_in"> Address </span>[]:</span><br></pre></td></tr></table></figure><p>You should now have a <code>cert.perm</code> and a <code>key.pem</code> in your local directory. Copy these into a <code>cert</code> folder at the root of your serverless project.</p><h2>Running with the Certificate</h2><p>Now you need to tell serverless where to find your certificate. You can either run with the flag</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--httpsProtocol cert</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">or <span class="keyword">update</span> your <span class="string">`serverless.yml`</span> <span class="keyword">to</span> <span class="keyword">include</span> the cert <span class="keyword">directory</span></span><br></pre></td></tr></table></figure><p>custom:serverless-offline:httpsProtocol: &quot;cert&quot;...</p><pre><code>## GotchasIf you're seeing a warning about an invalid certificate then check that you're accessing serverless via `localhost` and not `127.0.0.1` or `0.0.0.0`. SSL works with domain names so you need to use one, even if it is just `localhost`.</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you find yourself in need of running serverless locally using &lt;a href=&quot;https://www.serverless.com/plugins/serverless-offline/&quot; target=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Configuration in Azure Isolated Functions</title>
    <link href="https://westerndevs.com/_/azure-isolated-functions-config/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/azure-isolated-functions-config/</id>
    <published>2021-10-05T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is all done in the Program.cs. If you want to use the IOptions pattern which, let's face it, everybody does. Then you can start with creating your configuration classes (I like more than one so config for different parts of the app remain logical distinct). These are POCOs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> TenantId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ClientId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ClientSecret &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> RedirectUrl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then set this up in the host builder</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> host = <span class="keyword">new</span> HostBuilder()</span><br><span class="line">            .ConfigureFunctionsWorkerDefaults()</span><br><span class="line">            .ConfigureServices(container =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                container.AddOptions&lt;AuthConfiguration&gt;().Configure&lt;IConfiguration&gt;((settings, config) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    config.Bind(settings);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            .Build();</span><br></pre></td></tr></table></figure><p>If this looks familiar it's because it totally is! All of this uses the generic .NET host so this same sort of pattern should work in most .NET apps now.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is all done in the Program.cs. If you want to use the IOptions pattern which, let&#39;s face it, everybody does. Then you can start with
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Closed form Fibonacci</title>
    <link href="https://westerndevs.com/_/fibonacci/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/fibonacci/</id>
    <published>2021-10-05T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.346Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>A favorite programming test question is the Fibonacci sequence. This is defined as either <code>1 1 2 3 5...</code> or <code>0 1 1 2 3 5...</code> depending on what you feel fib of 0 is. In either case fibonacci is the sum of the two previous terms. So fib(10) = fib(9) + fib(8). The reason this is a programming test favorite is because it forces people to think about recursion and even memoization for performance.</p><p>There is however a shortcut for this and that is to use the closed form which uses the golden ratio. We have two interesting values called Phi and phi with the former being the golden ratio and the latter being a value observed in nature for leaf dispersions.</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Phi = (<span class="number">1</span> + root(<span class="number">5</span>))/<span class="number">2</span></span><br><span class="line">phi = (<span class="number">1</span>-root(<span class="number">5</span>))/<span class="number">2</span></span><br></pre></td></tr></table></figure><p>We can use this to create Binet's formula (Jacques Philippe Marie Binet was a French mathematician born in 1786, although this formula is named for him it was really discovered by fellow French mathematician Abraham do Moivre a century earlier)</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fib(<span class="built_in">n</span>) = (<span class="built_in">Phi</span>^<span class="built_in">n</span> - <span class="built_in">phi</span>^<span class="built_in">n</span>)/(<span class="built_in">Phi</span> - <span class="built_in">phi</span>)</span><br></pre></td></tr></table></figure><p>In code we can do the following to generate all the fib numbers up to n</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> Phi = (<span class="number">1</span> + Math.Pow(<span class="number">5</span>,<span class="number">.5</span>))/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> phi = (<span class="number">1</span> - Math.Pow(<span class="number">5</span>,<span class="number">.5</span>))/<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ulong</span>[] <span class="title">generateFibonaccisClosed</span>(<span class="params"><span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">ulong</span>[] fib = <span class="keyword">new</span> <span class="keyword">ulong</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fib[i] = (<span class="keyword">ulong</span>)((Math.Pow(Phi, i)-Math.Pow(phi, i))/(Phi - phi));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The advantage here is that the closed form is constant time, constant memory and uses only about 3 64-bit values (fewer if you calculate phi and Phi as you go). It's certainly a lot of fun to break out in a programming test.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A favorite programming test question is the Fibonacci sequence. This is defined as either &lt;code&gt;1 1 2 3 5...&lt;/code&gt; or &lt;code&gt;0 1 1 2 3 5.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Filtering Datatables</title>
    <link href="https://westerndevs.com/_/datatable-filtering/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/datatable-filtering/</id>
    <published>2021-09-17T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Years back there was this crazy way of dealing with data in .NET called a DataSet. DataSets contained DataTables which contained a combination of DataRows and DataColumns. It was all loosely typed and keyed with strings. Basically a database inside of your process. Even when they were cool I felt uncomfortable using them. Because I sometimes maintain legacy code I run into these monstrosities.</p><p>Today's problem was that I needed to filter the contents of a table before bulk loading it. You can actually do simple filtering using a quasi-SQL like</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> dataRows = existingDataTable.<span class="keyword">Select</span>(<span class="string">"UserName = 'simon'"</span>)</span><br></pre></td></tr></table></figure><p>This gives you back a collection of DataRows which I guess you could inset back into the table after clearing it of rows. To make this useful there is an extension method called <code>CopyToDataTable</code> in <code>System.Data.DataExtension</code> (be sure to include the dll for this). Using that you can get back a full data table</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> dataTable = existingDataTable.<span class="keyword">Select</span>(<span class="string">"UserName = 'simon'"</span>).CopyToDataTable();</span><br></pre></td></tr></table></figure><p>In that same package, though, is a much better tool for filtering: converting the table to an IEnumerable. You still need to use some magic strings but that's somewhat unavoidable in data tables.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var dt = existingDataTable.<span class="constructor">AsEnumerable()</span></span><br><span class="line">                    .<span class="constructor">Where(<span class="params">r</span> =&gt; <span class="params">r</span>.Field&lt;String&gt;(<span class="string">"UserName"</span>)</span><span class="operator"> == </span><span class="string">"Simon"</span>).<span class="constructor">CopyToDataTable()</span>;</span><br></pre></td></tr></table></figure><p>You can also do more advanced things like checking to see if something is a GUID</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dt = existingDataTable.AsEnumerable()</span><br><span class="line">                    .Where(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">Guid</span>.TryParse(r.Field&lt;String&gt;(<span class="string">"Id"</span>), out <span class="keyword">var</span> _)).CopyToDataTable();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Years back there was this crazy way of dealing with data in .NET called a DataSet. DataSets contained DataTables which contained a combin
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">SQL Mail</title>
    <link href="https://westerndevs.com/_/enable-database-mail/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/enable-database-mail/</id>
    <published>2021-08-31T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Did you know you can hook up your SQL server (or Managed SQL on Azure) to an SMTP server and use it to send email. Terrible idea? Yes, probably. I really encourage people not to build business logic that might require creating an email into stored procs.  Required for legacy code? Yes, certainly.</p><p>You first need to tell SQL server how to talk to the mail server. This is done using the <code>sysmail_add_Account_sp</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">EXECUTE</span> msdb.dbo.sysmail_add_account_sp</span><br><span class="line">    <span class="variable">@account_name</span> = <span class="string">'Database Mail Account'</span>,</span><br><span class="line">    <span class="variable">@description</span> = <span class="string">'SQL Server Notification Service'</span>,</span><br><span class="line">    <span class="variable">@email_address</span> = <span class="string">'SQLServer<span class="variable">@somedomain</span>.com'</span>,</span><br><span class="line">    <span class="variable">@replyto_address</span> = <span class="string">'SQLServer<span class="variable">@somedomain</span>.com'</span>,</span><br><span class="line">    <span class="variable">@display_name</span> = <span class="string">'Database Mail Profile'</span>,</span><br><span class="line">    <span class="variable">@mailserver_name</span> = <span class="string">'smtp.office365.com'</span>,</span><br><span class="line">    <span class="variable">@port</span> = <span class="number">587</span>,</span><br><span class="line"><span class="variable">@username</span> = <span class="string">'SQLServer<span class="variable">@somedomain</span>.com'</span>,</span><br><span class="line"><span class="variable">@password</span> = <span class="string">'totallynotourpassword'</span>,</span><br><span class="line"><span class="variable">@enable_ssl</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>With that in place you can set up a mail profile to use it</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SELECT @sequence_number = COALESCE(MAX(profile_id),1) <span class="keyword">FROM</span> msdb.dbo.sysmail_profile;</span><br><span class="line"></span><br><span class="line">-- Create a mail profile</span><br><span class="line">EXECUTE msdb.dbo.sysmail_add_profile_sp</span><br><span class="line">    @profile_name = <span class="string">'Database Mail Profile'</span>,</span><br><span class="line">    @description = <span class="string">'Sends email from the db'</span>;</span><br><span class="line">                              </span><br><span class="line">-- <span class="builtin-name">Add</span> the account <span class="keyword">to</span> the profile</span><br><span class="line">EXECUTE msdb.dbo.sysmail_add_profileaccount_sp</span><br><span class="line">    @profile_name = <span class="string">'Database Mail Profile'</span>,</span><br><span class="line">    @account_name = <span class="string">'Database Mail Account'</span>,</span><br><span class="line">    @sequence_number = @sequence_number;</span><br><span class="line">                              </span><br><span class="line">-- Grant access <span class="keyword">to</span> the<span class="built_in"> profile </span><span class="keyword">to</span> the DBMailUsers role</span><br><span class="line">EXECUTE msdb.dbo.sysmail_add_principalprofile_sp</span><br><span class="line">    @profile_name = <span class="string">'Database Mail Profile'</span>,</span><br><span class="line">    @principal_id = 0,</span><br><span class="line">    @is_default = 1 ;</span><br></pre></td></tr></table></figure><p>You can then make use of <code>sp_send_dbmail</code> to send email</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">EXEC</span> msdb.dbo.[sp_send_dbmail]</span><br><span class="line">    <span class="variable">@profile_name</span> = <span class="string">'Database Mail Profile'</span>,</span><br><span class="line">    <span class="variable">@recipients</span> = <span class="string">'simon.timms<span class="variable">@somedomain</span>.com'</span>,</span><br><span class="line">    <span class="variable">@subject</span> = <span class="string">'Testing db email'</span>,</span><br><span class="line">    <span class="variable">@body</span> = <span class="string">'Hello friend, I'</span>m testing the database mail<span class="string">'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Did you know you can hook up your SQL server (or Managed SQL on Azure) to an SMTP server and use it to send email. Terrible idea? Yes, pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Reauthenticate with Nuget</title>
    <link href="https://westerndevs.com/_/reauth-nuget/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/reauth-nuget/</id>
    <published>2021-08-31T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.346Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you have a private nuget feed authenticated with a password chances are your password will eventually expire or change. For some reason Visual Studio and perhaps nuget under the covers aggressively caches that password and doesn't prompt you when the password doesn't work anymore. To change the password the easiest approach I've found is to use the nuget.exe command line tool and run</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\temp\nuget.exe sources <span class="keyword">update</span> -<span class="keyword">Name</span> <span class="string">"Teamcity"</span> -<span class="keyword">Source</span> <span class="string">"https://private.nuget.feed.com/httpAuth/app/nuget/feed/_Root/SomeThing/v2"</span> -UserName <span class="string">"simon.timms"</span> -<span class="keyword">Password</span> <span class="string">"Thisisactuallymypassword,no,really"</span></span><br><span class="line">C:\temp\nuget.exe <span class="keyword">list</span> -<span class="keyword">Source</span> teamcity</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you have a private nuget feed authenticated with a password chances are your password will eventually expire or change. For some reaso
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Which Key to use for Managed Identity in Keyvault</title>
    <link href="https://westerndevs.com/_/appliation-key-for-keyvault/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/appliation-key-for-keyvault/</id>
    <published>2021-08-13T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I have a terraform deployment which runs in azure pipeline. Azure pipelines is connected to Azure via a service connection. This service connection is registered as an application in the Azure AD of the Azure account. The problem I constantly run into is that I can't remember which id from the application should be granted keyvault access so the build pipeline can read and write to keyvault.</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"azurerm_key_vault_access_policy"</span> <span class="string">"terraformaccess"</span> &#123;</span><br><span class="line">  <span class="attr">key_vault_id</span> = azurerm_key_vault.keyvault.id</span><br><span class="line"></span><br><span class="line">  <span class="attr">tenant_id</span> = local.tenant_id</span><br><span class="line">  <span class="attr">object_id</span> = ???????????????????</span><br><span class="line"></span><br><span class="line">  <span class="attr">key_permissions</span> = [</span><br><span class="line">    <span class="string">"Get"</span>,</span><br><span class="line">    <span class="string">"Create"</span>,</span><br><span class="line">    <span class="string">"List"</span>,</span><br><span class="line">    <span class="string">"Update"</span>,</span><br><span class="line">    <span class="string">"Verify"</span>,</span><br><span class="line">    <span class="string">"Delete"</span>,</span><br><span class="line">    <span class="string">"WrapKey"</span>,</span><br><span class="line">    <span class="string">"UnwrapKey"</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="attr">secret_permissions</span> = [</span><br><span class="line">    <span class="string">"Get"</span>,</span><br><span class="line">    <span class="string">"List"</span>,</span><br><span class="line">    <span class="string">"Set"</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="attr">storage_permissions</span> = [</span><br><span class="line">    <span class="string">"Get"</span>,</span><br><span class="line">    <span class="string">"List"</span>,</span><br><span class="line">    <span class="string">"Set"</span>,</span><br><span class="line">    <span class="string">"Update"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Maybe the value is in the portal somewhere:</p><p><img src="/images/2021-08-12-appliation-key-for-keyvault.md/2021-08-12-21-21-51.png" alt="">)</p><p>Nope.</p><p>It seems to be findable by doing either</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Login<span class="literal">-AzureRmAccount</span> <span class="literal">-SubscriptionId</span> &lt;your subscription id&gt;;</span><br><span class="line"><span class="variable">$spn</span>=(<span class="built_in">Get-AzureRmADServicePrincipal</span> <span class="literal">-SPN</span> &lt;the application id&gt;);</span><br><span class="line">echo <span class="variable">$spn</span>.Id</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az ad sp list --spn &lt;the application id&gt;</span><br></pre></td></tr></table></figure><p>Then look for <code>ObjectId</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have a terraform deployment which runs in azure pipeline. Azure pipelines is connected to Azure via a service connection. This service 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Stop Terraform Managing State for a Resource</title>
    <link href="https://westerndevs.com/_/stop-managing-resource/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/stop-managing-resource/</id>
    <published>2021-07-30T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.346Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Say you want to keep a resource but you want to stop terraform from managing it. You can ask terraform to update its state to forget about it. In my case I want terraform to forget it managing my Azure Static Web App because Terraform doesn't support all the options I need and will clobber the app.</p><p>I can run this</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform state rm <span class="string">"azurerm_static_site.agentportal"</span></span><br></pre></td></tr></table></figure><p>If I decide to start managing the state again I can just run a terraform import to manage it again.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Say you want to keep a resource but you want to stop terraform from managing it. You can ask terraform to update its state to forget abou
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Storybook IFrame 404</title>
    <link href="https://westerndevs.com/_/storybook-iframe-404/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/storybook-iframe-404/</id>
    <published>2021-07-29T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.346Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you're running into a 404 on the IFrame on storybook the mostly likely cause is that your directory path to where storybook is contains some encoded characters. In this case we had a project called <code>Agent%20Portal</code> on disk. Renaming it to just <code>AgentPortal</code> fixed up storybook right away.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you&#39;re running into a 404 on the IFrame on storybook the mostly likely cause is that your directory path to where storybook is contain
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Building an SQL Azure Connection String using terraform</title>
    <link href="https://westerndevs.com/_/build-sql-connection-string/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/build-sql-connection-string/</id>
    <published>2021-07-26T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you provision a database using terraform you often find that you need to get that connection string into app settings or key vault or something like that. To do that you first need to build it because the outputs from the database resource don't include it.</p><p>From the database you want to export</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output "database_name" &#123;</span><br><span class="line">  value = azurerm_sql_database.database.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then when you actually build the string you want something like this:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">database_connection_string</span>    = <span class="string">"Server=tcp:<span class="variable">$&#123;module.database.name&#125;</span>.database.windows.net,1433;Initial Catalog=<span class="variable">$&#123;module.database.database_name&#125;</span>;Persist Security Info=False;User ID=<span class="variable">$&#123;var.database_user&#125;</span>;Password=<span class="variable">$&#123;var.database_password&#125;</span>;MultipleActiveResultSets=True;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"</span></span><br></pre></td></tr></table></figure><p>Then you can push this to KeyVault or an App Service directly.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you provision a database using terraform you often find that you need to get that connection string into app settings or key vault or 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Deploying App Settings to an Azure Static Web App</title>
    <link href="https://westerndevs.com/_/static-app-settings/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/static-app-settings/</id>
    <published>2021-07-26T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.346Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Static web apps are pretty cool but certain parts of them feel like they are still a little raw. It is a newish product so I can understand that. I just wish the things that didn't get attention were something other that devops things. That's mostly because I'm so big on builds and repeatable processes. Being able to set app setting is one of the things I think falls through the cracks.</p><p>The <a href="https://docs.microsoft.com/en-us/azure/static-web-apps/application-settings#:~:text=%20Using%20the%20Azure%20portal%20%201%20Navigate,7%20Click%20OK.%208%20Click%20Save.%20More%20" target="_blank" rel="noopener">docs</a> for statics web apps suggests two different ways of setting app settings. First through the portal which we can ignore right out the gate because it is manual. The second is through an <code>az</code> command that actually just exercises a REST endpoint. No Arm support, no terraform support, no bicep support, no azure powershell support... a long way to go.</p><p>The az command takes in a specially formatted json file. My databse and connection string variables are set up as outputs from my terraform. Once I have them imported into my Azure DevOps build pipeline I use powershell to build the template file like so:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$temp</span> = gc api/api/local.settings.template.json | <span class="built_in">ConvertFrom-Json</span></span><br><span class="line"><span class="variable">$temp</span>.properties.STORAGE_CONNECTION_STRING = <span class="string">"<span class="variable">$</span>(terraformOutput.storage_connection_string)"</span></span><br><span class="line"><span class="variable">$temp</span>.properties.DATABASE_CONNECTION_STRING = <span class="string">"<span class="variable">$</span>(terraformOutput.database_connection_string)"</span></span><br><span class="line"><span class="variable">$temp</span> | <span class="built_in">ConvertTo-json</span> &gt; api/api/local.settings.template.json</span><br></pre></td></tr></table></figure><p>Now this needs to be passed up to azure using the <code>AzureCLI</code> task</p><pre><code class="language-yaml">  - task: AzureCLI@2    inputs:    azureSubscription: 'Azure Sub'    scriptType: 'pscore'    scriptLocation: 'inlineScript'    inlineScript: |        gc api/api/local.settings.template.json        az rest --method put --headers &quot;Content-Type=application/json&quot; --uri &quot;/subscriptions/6da8d6e6-41f1-xxxx-xxxx-xxxxxxxx/resourceGroups/dev-portal/providers/Microsoft.Web/staticSites/dev-portal/config/functionappsettings?api-version=2019-12-01-preview&quot; --body @api/api/local.settings.template.json</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Static web apps are pretty cool but certain parts of them feel like they are still a little raw. It is a newish product so I can understa
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Vetur Warnings in Azure Static Web App</title>
    <link href="https://westerndevs.com/_/vetur-cant-file-files/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/vetur-cant-file-files/</id>
    <published>2021-07-24T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.350Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I have a static web app that has directories for the front end written in Vue and the back end written in Azure functions. When I open it in VS Code I get warnings that Vetur can't find the <code>package.json</code> or <code>tsconfig.json</code>. This is because the Vue project isn't at the project root. This can be fixed by adding, at the root, a <code>vetur.config.js</code> containing a pointer to the web project. With my web project being in <code>web</code> (creative I know) the file looks like</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vetur.config.js</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;import('vls').VeturConfig&#125;</span> </span>*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// **optional** default: `&#123;&#125;`</span></span><br><span class="line">    <span class="comment">// override vscode settings</span></span><br><span class="line">    <span class="comment">// Notice: It only affects the settings used by Vetur.</span></span><br><span class="line">    settings: &#123;</span><br><span class="line">      <span class="string">"vetur.useWorkspaceDependencies"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"vetur.experimental.templateInterpolationService"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// **optional** default: `[&#123; root: './' &#125;]`</span></span><br><span class="line">    <span class="comment">// support monorepos</span></span><br><span class="line">    projects: [</span><br><span class="line">      <span class="string">'./web'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have a static web app that has directories for the front end written in Vue and the back end written in Azure functions. When I open it
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Enable TeamCity Symbol Server</title>
    <link href="https://westerndevs.com/_/enable-symbol-server/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/enable-symbol-server/</id>
    <published>2021-07-08T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>First off a symbol server is a server which stores the symbols from a built binary so you don't have to ship out PDB files with your compiled code to be able to debug it. You can hook up visual studio to search a symbol server when you're debugging so that you can drop into code for something like a shared nuget package. Teamcity, as it turns out, has a plugin to support being a symbol server. Here is how you get started with it:</p><ol><li>Install the symbol server plugin by going to Administration &gt; plugins &gt; Browse plugins repository and search for <code>symbol</code></li><li>On your build agents install the windows debugging tools which are shipped as part of the Windows SDK. For windows 10 you can grab it here: https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/ During the install you'll be prompted for which components you want to install and you can just turn off everything but the debugging tools.</li><li>Remember to restart your build agents so they can register the debugging tools as being installed. You can check by going to the build agent in teamcity. Click on parameters<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-29-31.png" alt="">)In there, at the bottom, you should find an entry for the debugger<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-29-59.png" alt="">)</li><li>In the projects you want symbols for enable the symbol server feature<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-31-20.png" alt="">)</li><li>In the build artifacts you need to ensure that both the PDB and the associated EXE or DLL are selected as artifacts.<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-32-51.png" alt="">)</li></ol><p>That's pretty much it. In your build now you should see a few log messages to let you know that the symbol server indexing is working<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-45-53.png" alt="">)</p><p>Now you can hook up Visual Studio to use this by going into settings and searching for <code>symbols</code> then paste the URL of the teamcity server with <code>/app/symbols</code> at the end of it into the box<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-49-54.png" alt="">)</p><p>Now when you're debugging in visual studio you'll have access to the symbols.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First off a symbol server is a server which stores the symbols from a built binary so you don&#39;t have to ship out PDB files with your comp
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Enable SSO for Snowflake using Azure AD</title>
    <link href="https://westerndevs.com/_/enable-azure-ad-based-SSO-for-snowflake/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/enable-azure-ad-based-SSO-for-snowflake/</id>
    <published>2021-07-06T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>So you want to enable single sign on for you AD users to Snowflake? There are a bunch of good reasons to do this: it makes managing users easier, deleting a user in AD deletes them in snowflake so you don't have a laundry list of places to delete a user when users leave.</p><p>The process is a 2 sided thing: setting up the Snowflake integration on the AD side and then letting Snowflake know where to authenticate its users.</p><h2>Azure Side</h2><ol><li>Go to azure AD and click on <code>Enterprise Applications</code> on the left hand side<img src="/images/2021-07-05-enable-azure-ad-based-SSO-for-snowflake.md/2021-07-05-12-25-20.png" alt="">)</li><li>Click <code>New Application</code> and search for Snowflake select it and create it</li><li>In there set up the links to your Snowflake tenant for single sign on by selecting Single sign-on on the left</li><li>Fill in the URLs for your snowflake instance. The only thing that you really need to pay attention to is that you're using the snowflake name on your already created snowflake instance.<img src="/images/2021-07-05-enable-azure-ad-based-SSO-for-snowflake.md/2021-07-05-12-28-33.png" alt="">)</li><li>Download the Base64 Certificate from the SAML Signing Certificate section</li><li>Assign a test user to the snowflake integration by clicking on users and groups and adding an existing user</li></ol><h2>Snowflake Side</h2><ol><li>Run this query in snowflake. It adds a saml identity provider and then set up single sign on</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">role</span> accountadmin;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">account</span> <span class="keyword">set</span> saml_identity_provider = <span class="string">'&#123;</span></span><br><span class="line"><span class="string">"certificate": "&lt;Paste the content of downloaded certificate from Azure portal&gt;",</span></span><br><span class="line"><span class="string">"ssoUrl":"&lt;Login URL value which you have copied from the Azure portal, something like https://login.microsoftonline.com/44xxxx25-xxxx-415b-bedc-xxxxxxxxxxxxxx/saml2&gt;",</span></span><br><span class="line"><span class="string">"type":"custom",</span></span><br><span class="line"><span class="string">"label":"AzureAD"</span></span><br><span class="line"><span class="string">&#125;'</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">account</span> <span class="keyword">set</span> sso_login_page = <span class="literal">TRUE</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Hook up the user you created earlier in AD</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> simon_timms <span class="keyword">PASSWORD</span> = <span class="string">''</span> LOGIN_NAME = <span class="string">'user@somedomain.com'</span> DISPLAY_NAME = <span class="string">'Simon Timms'</span>;</span><br></pre></td></tr></table></figure><p>You should now be able to log in with your AD account. Open up an incognito tab and go to your snowflake instance. In there click on the SSO option and enter your AD credentials.</p><h2>Automatic Provisioning</h2><p>Obviously it sucks to provision the users manually in snowflake so you can have AD sync changes over to it. To do this start with snowflake. You'll need to create a user who can provision users.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">role</span> aad_provisioner;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">user</span> <span class="keyword">on</span> <span class="keyword">account</span> <span class="keyword">to</span> <span class="keyword">role</span> aad_provisioner;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">role</span> <span class="keyword">on</span> <span class="keyword">account</span> <span class="keyword">to</span> <span class="keyword">role</span> aad_provisioner;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">role</span> aad_provisioner <span class="keyword">to</span> <span class="keyword">role</span> accountadmin;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">security</span> integration aad_provisioning</span><br><span class="line">    <span class="keyword">type</span> = scim</span><br><span class="line">    scim_client = <span class="string">'azure'</span></span><br><span class="line">    run_as_role = <span class="string">'AAD_PROVISIONER'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">system</span>$generate_scim_access_token(<span class="string">'AAD_PROVISIONING'</span>);</span><br></pre></td></tr></table></figure><p>This should give you a long key which you should copy.</p><p><img src="/images/2021-07-06-enable-azure-ad-based-SSO-for-snowflake.md/2021-07-06-15-59-43.png" alt="">)</p><p>Go back to the AD app and click on Provisioning. In there change over to automatic provisioning. Enter the key in the <code>Secret Token</code> field and in the <code>Tenant Url</code> field enter your usual URL but this time with <code>/scim/v2</code> on the end of it.</p><p>Test the connection and ensure that it can connect properly. With that done you'll need to turn provisioning status on</p><p><img src="/images/2021-07-06-enable-azure-ad-based-SSO-for-snowflake.md/2021-07-06-16-01-34.png" alt="">)</p><h2>Adding Users to the Sync</h2><p>If you want to add a new user to the synchronizing then go back to the snowflake app under Enterprise Applications in Azure AD. In there click on <code>Users and groups</code><img src="/images/2021-08-31-enable-azure-ad-based-SSO-for-snowflake.md/2021-08-31-13-17-47.png" alt="">)</p><p>Then on the add users and groups button. In there you can select your user and click <code>Assign</code>. That should be it. It may take a few minutes to sync. You can always check the status of the sync by going to the <code>Provisioning</code> item</p><h2>Gotchas!</h2><p>The biggest one here is that the snowflake key used in automatic provisioning only has a lifespan of 6 months. It is almost certainly going to break horribly at that time. You should mitigate this by having the sync job email you if it fails. This can be done in the settings page in Azure</p><p><img src="/images/2021-07-06-enable-azure-ad-based-SSO-for-snowflake.md/2021-07-06-16-06-05.png" alt="">)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So you want to enable single sign on for you AD users to Snowflake? There are a bunch of good reasons to do this: it makes managing users
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Azure Automation</title>
    <link href="https://westerndevs.com/_/azure-automation/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/azure-automation/</id>
    <published>2021-06-24T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Azure Automation is a service that allows running small scripts to do automation of tasks inside azure. For instance if you want to scale a database up and down depending on the time of day this is an ideal place to do it.</p><p>There are basically 3 concepts in it</p><ol><li>Runbook - a script that you write and publish from within Azure Automation. The supported languages include Python (2 and 3!) and powershell. There is also a graphical builder which basically just run powershell commandlets<img src="/images/2021-06-24-azure-automation.md/2021-06-24-07-05-52.png" alt="">)</li><li>Jobs - executions of the runbook. These can take parameters and pass them off to a runbook. The job logs what it is doing but the logging is a bit sketchy. You should consider reviewing the json output to see exactly what went wrong with your job instead of relying on the UI.</li><li>Schedule - You can kick off a job at any point in time using a schedule. Schedules allow passing parameters to the jobs.</li></ol><h2>Powershell Gotchas</h2><p>For some reason, likely the typical Microsoft support of legacy software, the Azure modules included in powershell by default are the old AzureRM ones and not the newer, more awesome Az modules. You can go to the module gallery to install more modules<img src="/images/2021-06-24-azure-automation.md/2021-06-24-07-11-22.png" alt="">)However, little problem with that is that the module installation process doesn't handle dependencies so if you want to install something like Az.Sql which relies on Az.Account then you need to go install Az.Account first. The installation takes way longer than you'd logically expect so I sure hope you don't need to install something like Az proper which has 40 dependencies.</p><h2>Example Script</h2><p>This script will scale a database to the desired level</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Param</span>(</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$ResourceGroupName</span>,</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$ServerName</span>,</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$DatabaseName</span>,</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$TargetEdition</span>,</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$TargetServiceObjective</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="variable">$connectionName</span> = <span class="string">"AzureRunAsConnection"</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># Get the connection "AzureRunAsConnection "</span></span><br><span class="line">    <span class="variable">$servicePrincipalConnection</span>=<span class="built_in">Get-AutomationConnection</span> <span class="literal">-Name</span> <span class="variable">$connectionName</span>         </span><br><span class="line"></span><br><span class="line">    <span class="string">"Logging in to Azure..."</span></span><br><span class="line">    <span class="built_in">Connect-AzAccount</span> `</span><br><span class="line">        <span class="literal">-ServicePrincipal</span> `</span><br><span class="line">        <span class="literal">-TenantId</span> <span class="variable">$servicePrincipalConnection</span>.TenantId `</span><br><span class="line">        <span class="literal">-ApplicationId</span> <span class="variable">$servicePrincipalConnection</span>.ApplicationId `</span><br><span class="line">        <span class="literal">-CertificateThumbprint</span> <span class="variable">$servicePrincipalConnection</span>.CertificateThumbprint </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$servicePrincipalConnection</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ErrorMessage</span> = <span class="string">"Connection <span class="variable">$connectionName</span> not found."</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="variable">$ErrorMessage</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">Write-Error</span> <span class="literal">-Message</span> <span class="variable">$_</span>.Exception</span><br><span class="line">        <span class="keyword">throw</span> <span class="variable">$_</span>.Exception</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo <span class="string">"Scaling the database"</span></span><br><span class="line"><span class="built_in">Set-AzSqlDatabase</span> <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> <span class="literal">-DatabaseName</span> <span class="variable">$DatabaseName</span> <span class="literal">-ServerName</span> <span class="variable">$ServerName</span> <span class="literal">-Edition</span> <span class="variable">$TargetEdition</span> <span class="literal">-RequestedServiceObjectiveName</span> <span class="variable">$TargetServiceObjective</span></span><br><span class="line">echo <span class="string">"Scaling complete"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Azure Automation is a service that allows running small scripts to do automation of tasks inside azure. For instance if you want to scale
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Getting started with Storybook and Vue</title>
    <link href="https://westerndevs.com/_/storybook/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/storybook/</id>
    <published>2021-06-17T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.346Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<ol><li><p>Starting with an empty folder you can run</p> <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">npx</span> <span class="built_in">sb</span> init</span><br></pre></td></tr></table></figure></li><li><p>During the addition you'll be prompted for the template type - select vue</p></li><li><p>If this is brand new then you'll need to install vue. The template assumes you have it installed already.</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vue vue-<span class="keyword">template</span>-compiler</span><br></pre></td></tr></table></figure></li><li><p>Run storybook with</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> storybook</span></span><br></pre></td></tr></table></figure></li></ol><p>This will get storybook running and you'll be presented with the browser interface for it<img src="/images/2021-04-27-storybook.md/2021-04-27-12-17-47.png" alt="">)</p><h2>Adding Vuetify</h2><ol><li><p>In the project install vuetify</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vuetify</span><br></pre></td></tr></table></figure></li><li><p>In the <code>.storybook</code> folder add a <code>preview-head.html</code> file. This will be included in the project template. Set the content to</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/@mdi/font@4.x/css/materialdesignicons.min.css"</span> <span class="attribute">rel</span>=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;link <span class="attribute">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css"</span> <span class="attribute">rel</span>=<span class="string">"stylesheet"</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>Create a new file called <code>vuetify_storybook.js</code> and add to it</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuetify <span class="keyword">from</span> <span class="string">'vuetify'</span>; <span class="comment">// loads all components</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'vuetify/dist/vuetify.min.css'</span>; <span class="comment">// all the css for components</span></span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">'vuetify/es5/locale/en'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuetify);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuetify(&#123;</span><br><span class="line">    lang: &#123;</span><br><span class="line">        locales: &#123; en &#125;,</span><br><span class="line">        current: <span class="string">'en'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>In the <code>.storybook</code> folder add to the <code>preview.js</code> and include</p> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addDecorator &#125; <span class="keyword">from</span> <span class="string">'@storybook/vue'</span>;</span><br><span class="line"><span class="keyword">import</span> vuetify <span class="keyword">from</span> <span class="string">'./vuetify_storybook'</span>;</span><br><span class="line"></span><br><span class="line">addDecorator(<span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">vuetify,</span><br><span class="line">template: `</span><br><span class="line"><span class="javascript">    &lt;v-app&gt;</span></span><br><span class="line"><span class="javascript">    &lt;v-main&gt;</span></span><br><span class="line"><span class="javascript">        &lt;v-container fluid &gt;</span></span><br><span class="line"><span class="javascript">        &lt;story/&gt;</span></span><br><span class="line"><span class="javascript">        &lt;<span class="regexp">/v-container&gt;</span></span></span><br><span class="line"><span class="javascript">    &lt;<span class="regexp">/v-main&gt;</span></span></span><br><span class="line"><span class="javascript">    &lt;<span class="regexp">/v-app&gt;</span></span></span><br><span class="line"><span class="javascript">    </span>`,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>This will add vuetify wrapping to the project. You can now just go ahead and us the components in your .vue files. Here is an example:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">dense</span> <span class="attr">label</span>=<span class="string">"User name"</span> <span class="attr">hint</span>=<span class="string">"You can use your email"</span>&gt;</span><span class="tag">&lt;/<span class="name">v-text-field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">dense</span> <span class="attr">label</span>=<span class="string">"Password"</span> <span class="attr">hint</span>=<span class="string">"You need to use upper case and lower case"</span>&gt;</span><span class="tag">&lt;/<span class="name">v-text-field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">module</span>.exports = &#123;</span></span><br><span class="line"><span class="actionscript">    data: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        userName: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">        password: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">        rememberMe: <span class="literal">false</span>,</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="actionscript">        isValid: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>Networking</h2><p>If you're using a service layer then you an shim that in to prevent making network calls. However that might not be what you want to do so you can instead shim in something to intercept all network calls. This can be done using the mock service worker addon https://storybook.js.org/addons/msw-storybook-addon</p><p>To get it working install it</p> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -D msw msw-storybook-addon</span><br></pre></td></tr></table></figure><p>Then to the preview.js file you can add a hook for it</p> <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initializeWorker, mswDecorator &#125; <span class="keyword">from</span> <span class="string">'msw-storybook-addon'</span>;</span><br><span class="line"></span><br><span class="line">initializeWorker();</span><br><span class="line">addDecorator(mswDecorator);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Starting with an empty folder you can run&lt;/p&gt;
 &lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Quick Noda Time Conversions</title>
    <link href="https://westerndevs.com/_/noda-time/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/noda-time/</id>
    <published>2021-06-16T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.346Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Noda time makes working with timezones, well not a snap but better than dental surgery.</p><h2>Convert a DateTime and TzDB Timezone to UTC</h2><p>A TzDB timezone is one that looks like <code>America/Edmonton</code> or, one might presume <code>Mars/OlympusMons</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DateTimeZone timezone = DateTimeZoneProviders.Tzdb.<span class="constructor">GetZoneOrNull(<span class="params">timezoneId</span>)</span>;</span><br><span class="line">ZoneLocalMappingResolver customResolver = Resolvers.<span class="constructor">CreateMappingResolver(Resolvers.ReturnLater, Resolvers.ReturnStartOfIntervalAfter)</span>;</span><br><span class="line">var localDateTime = LocalDateTime.<span class="constructor">FromDateTime(<span class="params">dateTime</span>)</span>;</span><br><span class="line">var zonedDateTime = timezone.<span class="constructor">ResolveLocal(<span class="params">localDateTime</span>, <span class="params">customResolver</span>)</span>;</span><br><span class="line">return zonedDateTime.<span class="constructor">ToDateTimeUtc()</span>;</span><br></pre></td></tr></table></figure><h2>Convert from a UTC to a zoned DateTime</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> local = <span class="keyword">new</span> LocalDateTime(dateTime.<span class="built_in">Year</span>, dateTime.<span class="built_in">Month</span>, dateTime.<span class="built_in">Day</span>, dateTime.<span class="built_in">Hour</span>, dateTime.<span class="built_in">Minute</span>, dateTime.<span class="built_in">Second</span>);</span><br><span class="line"><span class="keyword">var</span> tz = DateTimeZoneProviders.Tzdb[timeZoneID];</span><br><span class="line"><span class="keyword">return</span> local.InZoneLeniently(tz);</span><br></pre></td></tr></table></figure><p>But be careful with this one because it might produce weird results around time change periods. If you want to avoid ambiguity or at least throw an exception for it consider <code>InZoneStrictly</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Noda time makes working with timezones, well not a snap but better than dental surgery.&lt;/p&gt;
&lt;h2&gt;Convert a DateTime and TzDB Timezone to U
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Installing Fonts on Windows with Powershell</title>
    <link href="https://westerndevs.com/_/installing-fonts/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/installing-fonts/</id>
    <published>2021-06-11T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.346Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>You'd like to think that in 2021 installing a font would involve just copying it and some advanced AI system would notice it and install it on Windows. Again the future has failed us.</p><p>Let's say you have a folder of TTF fonts you need installing. Just copying them to the <code>c:\windows\fonts</code> directory won't work. You need to copy them with a magic COM command that is probably left over from when file names in Windows looked like <code>PROGRA~1</code>. I've seen some scripts which add the font to the windows registry but I didn't have much luck getting them to work and they feel fragile should Microsoft ever update font handling (ha!).</p><p>Here is a script that will copy over all the fonts in the current directory.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"Install fonts"</span></span><br><span class="line"><span class="variable">$fonts</span> = (<span class="built_in">New-Object</span> <span class="literal">-ComObject</span> Shell.Application).Namespace(<span class="number">0</span>x14)</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$file</span> <span class="keyword">in</span> gci *.ttf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$fileName</span> = <span class="variable">$file</span>.Name</span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span>(<span class="built_in">Test-Path</span> <span class="literal">-Path</span> <span class="string">"C:\Windows\fonts\<span class="variable">$fileName</span>"</span> )) &#123;</span><br><span class="line">        echo <span class="variable">$fileName</span></span><br><span class="line">        dir <span class="variable">$file</span> | %&#123; <span class="variable">$fonts</span>.CopyHere(<span class="variable">$_</span>.fullname) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cp *.ttf c:\windows\fonts\</span><br></pre></td></tr></table></figure><p>The fonts don't seem to get installed using the same file name as they arrive with so that last <code>cp</code> line puts the original files in the fonts directory so you can run this script multiple times and it will just install the new fonts. If you wanted to get cool you could check for a checksum and install fonts where the checksum doesn't match. Don't both trying to use <code>CopyHere</code> with the flag <code>0x14</code> thinking it will overwrite fonts. That doesn't work for the font directory.</p><p>If you want to check and see which fonts are visible to .NET on the system then you can try</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">void</span>] [<span class="type">System.Reflection.Assembly</span>]::LoadWithPartialName(<span class="string">"System.Drawing"</span>)</span><br><span class="line">(<span class="built_in">New-Object</span> System.Drawing.Text.InstalledFontCollection).Families</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You&#39;d like to think that in 2021 installing a font would involve just copying it and some advanced AI system would notice it and install 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Transport for Azure Service Bus</title>
    <link href="https://westerndevs.com/_/Azure-service-bus-transports/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/Azure-service-bus-transports/</id>
    <published>2021-06-07T04:00:00.000Z</published>
    <updated>2021-10-22T22:39:18.342Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>There are two transport mechanisms for service bus</p><ul><li>AQMP</li><li>AQMP over web sockets</li></ul><p>The default is to use plain AQMP but this uses port 5671. Often times this port may be blocked by firewalls. You can switch over to using the websocket based version which uses port 443 - much more commonly open already on firewalls.</p><h2>.NET Code</h2><p>You just need to update the <code>TransportType</code> in the service bus set up</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var<span class="built_in"> client </span>= new ServiceBusClient(Configuration[<span class="string">"ServiceBusConnection"</span>], new ServiceBusClientOptions</span><br><span class="line">&#123;</span><br><span class="line">    TransportType = ServiceBusTransportType.AmqpWebSockets</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2>Azure Functions</h2><p>The simplest way of getting websockets to work on functions is to update the connection string to mention it</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Endpoint</span>=sb://someendpoint.servicebus.windows.net/<span class="comment">;SharedAccessKeyName=SenderPolicy;SharedAccessKey=asecretkey;TransportType=AmqpWebSockets</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are two transport mechanisms for service bus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AQMP&lt;/li&gt;
&lt;li&gt;AQMP over web sockets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The default is to use p
    
    </summary>
    
    
  </entry>
  
</feed>
