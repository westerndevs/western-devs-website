<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/simon_timms" rel="self" type="application/atom+xml"/>
  <link href="https://westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2021-08-18T21:12:42.241Z</updated>
  <id>https://westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>https://westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">Which Key to use for Managed Identity in Keyvault</title>
    <link href="https://westerndevs.com/_/appliation-key-for-keyvault/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/appliation-key-for-keyvault/</id>
    <published>2021-08-13T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.241Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I have a terraform deployment which runs in azure pipeline. Azure pipelines is connected to Azure via a service connection. This service connection is registered as an application in the Azure AD of the Azure account. The problem I constantly run into is that I can't remember which id from the application should be granted keyvault access so the build pipeline can read and write to keyvault.</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"azurerm_key_vault_access_policy"</span> <span class="string">"terraformaccess"</span> &#123;</span><br><span class="line">  <span class="attr">key_vault_id</span> = azurerm_key_vault.keyvault.id</span><br><span class="line"></span><br><span class="line">  <span class="attr">tenant_id</span> = local.tenant_id</span><br><span class="line">  <span class="attr">object_id</span> = ???????????????????</span><br><span class="line"></span><br><span class="line">  <span class="attr">key_permissions</span> = [</span><br><span class="line">    <span class="string">"Get"</span>,</span><br><span class="line">    <span class="string">"Create"</span>,</span><br><span class="line">    <span class="string">"List"</span>,</span><br><span class="line">    <span class="string">"Update"</span>,</span><br><span class="line">    <span class="string">"Verify"</span>,</span><br><span class="line">    <span class="string">"Delete"</span>,</span><br><span class="line">    <span class="string">"WrapKey"</span>,</span><br><span class="line">    <span class="string">"UnwrapKey"</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="attr">secret_permissions</span> = [</span><br><span class="line">    <span class="string">"Get"</span>,</span><br><span class="line">    <span class="string">"List"</span>,</span><br><span class="line">    <span class="string">"Set"</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="attr">storage_permissions</span> = [</span><br><span class="line">    <span class="string">"Get"</span>,</span><br><span class="line">    <span class="string">"List"</span>,</span><br><span class="line">    <span class="string">"Set"</span>,</span><br><span class="line">    <span class="string">"Update"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Maybe the value is in the portal somewhere:</p><p><img src="/images/2021-08-12-appliation-key-for-keyvault.md/2021-08-12-21-21-51.png" alt="">)</p><p>Nope.</p><p>It seems to be findable by doing either</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Login<span class="literal">-AzureRmAccount</span> <span class="literal">-SubscriptionId</span> &lt;your subscription id&gt;;</span><br><span class="line"><span class="variable">$spn</span>=(<span class="built_in">Get-AzureRmADServicePrincipal</span> <span class="literal">-SPN</span> &lt;the application id&gt;);</span><br><span class="line">echo <span class="variable">$spn</span>.Id</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az ad sp list --spn &lt;the application id&gt;</span><br></pre></td></tr></table></figure><p>Then look for <code>ObjectId</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have a terraform deployment which runs in azure pipeline. Azure pipelines is connected to Azure via a service connection. This service 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Stop Terraform Managing State for a Resource</title>
    <link href="https://westerndevs.com/_/stop-managing-resource/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/stop-managing-resource/</id>
    <published>2021-07-30T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.249Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Say you want to keep a resource but you want to stop terraform from managing it. You can ask terraform to update its state to forget about it. In my case I want terraform to forget it managing my Azure Static Web App because Terraform doesn't support all the options I need and will clobber the app.</p><p>I can run this</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform state rm <span class="string">"azurerm_static_site.agentportal"</span></span><br></pre></td></tr></table></figure><p>If I decide to start managing the state again I can just run a terraform import to manage it again.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Say you want to keep a resource but you want to stop terraform from managing it. You can ask terraform to update its state to forget abou
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Storybook IFrame 404</title>
    <link href="https://westerndevs.com/_/storybook-iframe-404/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/storybook-iframe-404/</id>
    <published>2021-07-29T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.249Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you're running into a 404 on the IFrame on storybook the mostly likely cause is that your directory path to where storybook is contains some encoded characters. In this case we had a project called <code>Agent%20Portal</code> on disk. Renaming it to just <code>AgentPortal</code> fixed up storybook right away.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you&#39;re running into a 404 on the IFrame on storybook the mostly likely cause is that your directory path to where storybook is contain
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Building an SQL Azure Connection String using terraform</title>
    <link href="https://westerndevs.com/_/build-sql-connection-string/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/build-sql-connection-string/</id>
    <published>2021-07-26T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.241Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you provision a database using terraform you often find that you need to get that connection string into app settings or key vault or something like that. To do that you first need to build it because the outputs from the database resource don't include it.</p><p>From the database you want to export</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output "database_name" &#123;</span><br><span class="line">  value = azurerm_sql_database.database.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then when you actually build the string you want something like this:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">database_connection_string</span>    = <span class="string">"Server=tcp:<span class="variable">$&#123;module.database.name&#125;</span>.database.windows.net,1433;Initial Catalog=<span class="variable">$&#123;module.database.database_name&#125;</span>;Persist Security Info=False;User ID=<span class="variable">$&#123;var.database_user&#125;</span>;Password=<span class="variable">$&#123;var.database_password&#125;</span>;MultipleActiveResultSets=True;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"</span></span><br></pre></td></tr></table></figure><p>Then you can push this to KeyVault or an App Service directly.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you provision a database using terraform you often find that you need to get that connection string into app settings or key vault or 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Deploying App Settings to an Azure Static Web App</title>
    <link href="https://westerndevs.com/_/static-app-settings/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/static-app-settings/</id>
    <published>2021-07-26T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.249Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Static web apps are pretty cool but certain parts of them feel like they are still a little raw. It is a newish product so I can understand that. I just wish the things that didn't get attention were something other that devops things. That's mostly because I'm so big on builds and repeatable processes. Being able to set app setting is one of the things I think falls through the cracks.</p><p>The <a href="https://docs.microsoft.com/en-us/azure/static-web-apps/application-settings#:~:text=%20Using%20the%20Azure%20portal%20%201%20Navigate,7%20Click%20OK.%208%20Click%20Save.%20More%20" target="_blank" rel="noopener">docs</a> for statics web apps suggests two different ways of setting app settings. First through the portal which we can ignore right out the gate because it is manual. The second is through an <code>az</code> command that actually just exercises a REST endpoint. No Arm support, no terraform support, no bicep support, no azure powershell support... a long way to go.</p><p>The az command takes in a specially formatted json file. My databse and connection string variables are set up as outputs from my terraform. Once I have them imported into my Azure DevOps build pipeline I use powershell to build the template file like so:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$temp</span> = gc api/api/local.settings.template.json | <span class="built_in">ConvertFrom-Json</span></span><br><span class="line"><span class="variable">$temp</span>.properties.STORAGE_CONNECTION_STRING = <span class="string">"<span class="variable">$</span>(terraformOutput.storage_connection_string)"</span></span><br><span class="line"><span class="variable">$temp</span>.properties.DATABASE_CONNECTION_STRING = <span class="string">"<span class="variable">$</span>(terraformOutput.database_connection_string)"</span></span><br><span class="line"><span class="variable">$temp</span> | <span class="built_in">ConvertTo-json</span> &gt; api/api/local.settings.template.json</span><br></pre></td></tr></table></figure><p>Now this needs to be passed up to azure using the <code>AzureCLI</code> task</p><pre><code class="language-yaml">  - task: AzureCLI@2    inputs:    azureSubscription: 'Azure Sub'    scriptType: 'pscore'    scriptLocation: 'inlineScript'    inlineScript: |        gc api/api/local.settings.template.json        az rest --method put --headers &quot;Content-Type=application/json&quot; --uri &quot;/subscriptions/6da8d6e6-41f1-xxxx-xxxx-xxxxxxxx/resourceGroups/dev-portal/providers/Microsoft.Web/staticSites/dev-portal/config/functionappsettings?api-version=2019-12-01-preview&quot; --body @api/api/local.settings.template.json</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Static web apps are pretty cool but certain parts of them feel like they are still a little raw. It is a newish product so I can understa
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Vetur Warnings in Azure Static Web App</title>
    <link href="https://westerndevs.com/_/vetur-cant-file-files/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/vetur-cant-file-files/</id>
    <published>2021-07-24T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.249Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I have a static web app that has directories for the front end written in Vue and the back end written in Azure functions. When I open it in VS Code I get warnings that Vetur can't find the <code>package.json</code> or <code>tsconfig.json</code>. This is because the Vue project isn't at the project root. This can be fixed by adding, at the root, a <code>vetur.config.js</code> containing a pointer to the web project. With my web project being in <code>web</code> (creative I know) the file looks like</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vetur.config.js</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;import('vls').VeturConfig&#125;</span> </span>*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// **optional** default: `&#123;&#125;`</span></span><br><span class="line">    <span class="comment">// override vscode settings</span></span><br><span class="line">    <span class="comment">// Notice: It only affects the settings used by Vetur.</span></span><br><span class="line">    settings: &#123;</span><br><span class="line">      <span class="string">"vetur.useWorkspaceDependencies"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"vetur.experimental.templateInterpolationService"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// **optional** default: `[&#123; root: './' &#125;]`</span></span><br><span class="line">    <span class="comment">// support monorepos</span></span><br><span class="line">    projects: [</span><br><span class="line">      <span class="string">'./web'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have a static web app that has directories for the front end written in Vue and the back end written in Azure functions. When I open it
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Enable TeamCity Symbol Server</title>
    <link href="https://westerndevs.com/_/enable-symbol-server/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/enable-symbol-server/</id>
    <published>2021-07-08T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.245Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>First off a symbol server is a server which stores the symbols from a built binary so you don't have to ship out PDB files with your compiled code to be able to debug it. You can hook up visual studio to search a symbol server when you're debugging so that you can drop into code for something like a shared nuget package. Teamcity, as it turns out, has a plugin to support being a symbol server. Here is how you get started with it:</p><ol><li>Install the symbol server plugin by going to Administration &gt; plugins &gt; Browse plugins repository and search for <code>symbol</code></li><li>On your build agents install the windows debugging tools which are shipped as part of the Windows SDK. For windows 10 you can grab it here: https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/ During the install you'll be prompted for which components you want to install and you can just turn off everything but the debugging tools.</li><li>Remember to restart your build agents so they can register the debugging tools as being installed. You can check by going to the build agent in teamcity. Click on parameters<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-29-31.png" alt="">)In there, at the bottom, you should find an entry for the debugger<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-29-59.png" alt="">)</li><li>In the projects you want symbols for enable the symbol server feature<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-31-20.png" alt="">)</li><li>In the build artifacts you need to ensure that both the PDB and the associated EXE or DLL are selected as artifacts.<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-32-51.png" alt="">)</li></ol><p>That's pretty much it. In your build now you should see a few log messages to let you know that the symbol server indexing is working<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-45-53.png" alt="">)</p><p>Now you can hook up Visual Studio to use this by going into settings and searching for <code>symbols</code> then paste the URL of the teamcity server with <code>/app/symbols</code> at the end of it into the box<img src="/images/2021-07-08-enable-symbol-server.md/2021-07-08-16-49-54.png" alt="">)</p><p>Now when you're debugging in visual studio you'll have access to the symbols.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First off a symbol server is a server which stores the symbols from a built binary so you don&#39;t have to ship out PDB files with your comp
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Azure Automation</title>
    <link href="https://westerndevs.com/_/azure-automation/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/azure-automation/</id>
    <published>2021-06-24T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.241Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Azure Automation is a service that allows running small scripts to do automation of tasks inside azure. For instance if you want to scale a database up and down depending on the time of day this is an ideal place to do it.</p><p>There are basically 3 concepts in it</p><ol><li>Runbook - a script that you write and publish from within Azure Automation. The supported languages include Python (2 and 3!) and powershell. There is also a graphical builder which basically just run powershell commandlets<img src="/images/2021-06-24-azure-automation.md/2021-06-24-07-05-52.png" alt="">)</li><li>Jobs - executions of the runbook. These can take parameters and pass them off to a runbook. The job logs what it is doing but the logging is a bit sketchy. You should consider reviewing the json output to see exactly what went wrong with your job instead of relying on the UI.</li><li>Schedule - You can kick off a job at any point in time using a schedule. Schedules allow passing parameters to the jobs.</li></ol><h2>Powershell Gotchas</h2><p>For some reason, likely the typical Microsoft support of legacy software, the Azure modules included in powershell by default are the old AzureRM ones and not the newer, more awesome Az modules. You can go to the module gallery to install more modules<img src="/images/2021-06-24-azure-automation.md/2021-06-24-07-11-22.png" alt="">)However, little problem with that is that the module installation process doesn't handle dependencies so if you want to install something like Az.Sql which relies on Az.Account then you need to go install Az.Account first. The installation takes way longer than you'd logically expect so I sure hope you don't need to install something like Az proper which has 40 dependencies.</p><h2>Example Script</h2><p>This script will scale a database to the desired level</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Param</span>(</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$ResourceGroupName</span>,</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$ServerName</span>,</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$DatabaseName</span>,</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$TargetEdition</span>,</span><br><span class="line"> [<span class="built_in">string</span>]<span class="variable">$TargetServiceObjective</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="variable">$connectionName</span> = <span class="string">"AzureRunAsConnection"</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># Get the connection "AzureRunAsConnection "</span></span><br><span class="line">    <span class="variable">$servicePrincipalConnection</span>=<span class="built_in">Get-AutomationConnection</span> <span class="literal">-Name</span> <span class="variable">$connectionName</span>         </span><br><span class="line"></span><br><span class="line">    <span class="string">"Logging in to Azure..."</span></span><br><span class="line">    <span class="built_in">Connect-AzAccount</span> `</span><br><span class="line">        <span class="literal">-ServicePrincipal</span> `</span><br><span class="line">        <span class="literal">-TenantId</span> <span class="variable">$servicePrincipalConnection</span>.TenantId `</span><br><span class="line">        <span class="literal">-ApplicationId</span> <span class="variable">$servicePrincipalConnection</span>.ApplicationId `</span><br><span class="line">        <span class="literal">-CertificateThumbprint</span> <span class="variable">$servicePrincipalConnection</span>.CertificateThumbprint </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$servicePrincipalConnection</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ErrorMessage</span> = <span class="string">"Connection <span class="variable">$connectionName</span> not found."</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="variable">$ErrorMessage</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">Write-Error</span> <span class="literal">-Message</span> <span class="variable">$_</span>.Exception</span><br><span class="line">        <span class="keyword">throw</span> <span class="variable">$_</span>.Exception</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo <span class="string">"Scaling the database"</span></span><br><span class="line"><span class="built_in">Set-AzSqlDatabase</span> <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> <span class="literal">-DatabaseName</span> <span class="variable">$DatabaseName</span> <span class="literal">-ServerName</span> <span class="variable">$ServerName</span> <span class="literal">-Edition</span> <span class="variable">$TargetEdition</span> <span class="literal">-RequestedServiceObjectiveName</span> <span class="variable">$TargetServiceObjective</span></span><br><span class="line">echo <span class="string">"Scaling complete"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Azure Automation is a service that allows running small scripts to do automation of tasks inside azure. For instance if you want to scale
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Getting started with Storybook and Vue</title>
    <link href="https://westerndevs.com/_/storybook/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/storybook/</id>
    <published>2021-06-17T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.249Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<ol><li><p>Starting with an empty folder you can run</p> <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">npx</span> <span class="built_in">sb</span> init</span><br></pre></td></tr></table></figure></li><li><p>During the addition you'll be prompted for the template type - select vue</p></li><li><p>If this is brand new then you'll need to install vue. The template assumes you have it installed already.</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vue vue-<span class="keyword">template</span>-compiler</span><br></pre></td></tr></table></figure></li><li><p>Run storybook with</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> storybook</span></span><br></pre></td></tr></table></figure></li></ol><p>This will get storybook running and you'll be presented with the browser interface for it<img src="/images/2021-04-27-storybook.md/2021-04-27-12-17-47.png" alt="">)</p><h2>Adding Vuetify</h2><ol><li><p>In the project install vuetify</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vuetify</span><br></pre></td></tr></table></figure></li><li><p>In the <code>.storybook</code> folder add a <code>preview-head.html</code> file. This will be included in the project template. Set the content to</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/@mdi/font@4.x/css/materialdesignicons.min.css"</span> <span class="attribute">rel</span>=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;link <span class="attribute">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css"</span> <span class="attribute">rel</span>=<span class="string">"stylesheet"</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>Create a new file called <code>vuetify_storybook.js</code> and add to it</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuetify <span class="keyword">from</span> <span class="string">'vuetify'</span>; <span class="comment">// loads all components</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'vuetify/dist/vuetify.min.css'</span>; <span class="comment">// all the css for components</span></span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">'vuetify/es5/locale/en'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuetify);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuetify(&#123;</span><br><span class="line">    lang: &#123;</span><br><span class="line">        locales: &#123; en &#125;,</span><br><span class="line">        current: <span class="string">'en'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>In the <code>.storybook</code> folder add to the <code>preview.js</code> and include</p> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addDecorator &#125; <span class="keyword">from</span> <span class="string">'@storybook/vue'</span>;</span><br><span class="line"><span class="keyword">import</span> vuetify <span class="keyword">from</span> <span class="string">'./vuetify_storybook'</span>;</span><br><span class="line"></span><br><span class="line">addDecorator(<span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">vuetify,</span><br><span class="line">template: `</span><br><span class="line"><span class="javascript">    &lt;v-app&gt;</span></span><br><span class="line"><span class="javascript">    &lt;v-main&gt;</span></span><br><span class="line"><span class="javascript">        &lt;v-container fluid &gt;</span></span><br><span class="line"><span class="javascript">        &lt;story/&gt;</span></span><br><span class="line"><span class="javascript">        &lt;<span class="regexp">/v-container&gt;</span></span></span><br><span class="line"><span class="javascript">    &lt;<span class="regexp">/v-main&gt;</span></span></span><br><span class="line"><span class="javascript">    &lt;<span class="regexp">/v-app&gt;</span></span></span><br><span class="line"><span class="javascript">    </span>`,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>This will add vuetify wrapping to the project. You can now just go ahead and us the components in your .vue files. Here is an example:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">dense</span> <span class="attr">label</span>=<span class="string">"User name"</span> <span class="attr">hint</span>=<span class="string">"You can use your email"</span>&gt;</span><span class="tag">&lt;/<span class="name">v-text-field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">dense</span> <span class="attr">label</span>=<span class="string">"Password"</span> <span class="attr">hint</span>=<span class="string">"You need to use upper case and lower case"</span>&gt;</span><span class="tag">&lt;/<span class="name">v-text-field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">module</span>.exports = &#123;</span></span><br><span class="line"><span class="actionscript">    data: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        userName: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">        password: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">        rememberMe: <span class="literal">false</span>,</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="actionscript">        isValid: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>Networking</h2><p>If you're using a service layer then you an shim that in to prevent making network calls. However that might not be what you want to do so you can instead shim in something to intercept all network calls. This can be done using the mock service worker addon https://storybook.js.org/addons/msw-storybook-addon</p><p>To get it working install it</p> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -D msw msw-storybook-addon</span><br></pre></td></tr></table></figure><p>Then to the preview.js file you can add a hook for it</p> <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initializeWorker, mswDecorator &#125; <span class="keyword">from</span> <span class="string">'msw-storybook-addon'</span>;</span><br><span class="line"></span><br><span class="line">initializeWorker();</span><br><span class="line">addDecorator(mswDecorator);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Starting with an empty folder you can run&lt;/p&gt;
 &lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Quick Noda Time Conversions</title>
    <link href="https://westerndevs.com/_/noda-time/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/noda-time/</id>
    <published>2021-06-16T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.245Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Noda time makes working with timezones, well not a snap but better than dental surgery.</p><h2>Convert a DateTime and TzDB Timezone to UTC</h2><p>A TzDB timezone is one that looks like <code>America/Edmonton</code> or, one might presume <code>Mars/OlympusMons</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DateTimeZone timezone = DateTimeZoneProviders.Tzdb.<span class="constructor">GetZoneOrNull(<span class="params">timezoneId</span>)</span>;</span><br><span class="line">ZoneLocalMappingResolver customResolver = Resolvers.<span class="constructor">CreateMappingResolver(Resolvers.ReturnLater, Resolvers.ReturnStartOfIntervalAfter)</span>;</span><br><span class="line">var localDateTime = LocalDateTime.<span class="constructor">FromDateTime(<span class="params">dateTime</span>)</span>;</span><br><span class="line">var zonedDateTime = timezone.<span class="constructor">ResolveLocal(<span class="params">localDateTime</span>, <span class="params">customResolver</span>)</span>;</span><br><span class="line">return zonedDateTime.<span class="constructor">ToDateTimeUtc()</span>;</span><br></pre></td></tr></table></figure><h2>Convert from a UTC to a zoned DateTime</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> local = <span class="keyword">new</span> LocalDateTime(dateTime.<span class="built_in">Year</span>, dateTime.<span class="built_in">Month</span>, dateTime.<span class="built_in">Day</span>, dateTime.<span class="built_in">Hour</span>, dateTime.<span class="built_in">Minute</span>, dateTime.<span class="built_in">Second</span>);</span><br><span class="line"><span class="keyword">var</span> tz = DateTimeZoneProviders.Tzdb[timeZoneID];</span><br><span class="line"><span class="keyword">return</span> local.InZoneLeniently(tz);</span><br></pre></td></tr></table></figure><p>But be careful with this one because it might produce weird results around time change periods. If you want to avoid ambiguity or at least throw an exception for it consider <code>InZoneStrictly</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Noda time makes working with timezones, well not a snap but better than dental surgery.&lt;/p&gt;
&lt;h2&gt;Convert a DateTime and TzDB Timezone to U
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Installing Fonts on Windows with Powershell</title>
    <link href="https://westerndevs.com/_/installing-fonts/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/installing-fonts/</id>
    <published>2021-06-11T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.245Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>You'd like to think that in 2021 installing a font would involve just copying it and some advanced AI system would notice it and install it on Windows. Again the future has failed us.</p><p>Let's say you have a folder of TTF fonts you need installing. Just copying them to the <code>c:\windows\fonts</code> directory won't work. You need to copy them with a magic COM command that is probably left over from when file names in Windows looked like <code>PROGRA~1</code>. I've seen some scripts which add the font to the windows registry but I didn't have much luck getting them to work and they feel fragile should Microsoft ever update font handling (ha!).</p><p>Here is a script that will copy over all the fonts in the current directory.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"Install fonts"</span></span><br><span class="line"><span class="variable">$fonts</span> = (<span class="built_in">New-Object</span> <span class="literal">-ComObject</span> Shell.Application).Namespace(<span class="number">0</span>x14)</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$file</span> <span class="keyword">in</span> gci *.ttf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$fileName</span> = <span class="variable">$file</span>.Name</span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span>(<span class="built_in">Test-Path</span> <span class="literal">-Path</span> <span class="string">"C:\Windows\fonts\<span class="variable">$fileName</span>"</span> )) &#123;</span><br><span class="line">        echo <span class="variable">$fileName</span></span><br><span class="line">        dir <span class="variable">$file</span> | %&#123; <span class="variable">$fonts</span>.CopyHere(<span class="variable">$_</span>.fullname) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cp *.ttf c:\windows\fonts\</span><br></pre></td></tr></table></figure><p>The fonts don't seem to get installed using the same file name as they arrive with so that last <code>cp</code> line puts the original files in the fonts directory so you can run this script multiple times and it will just install the new fonts. If you wanted to get cool you could check for a checksum and install fonts where the checksum doesn't match. Don't both trying to use <code>CopyHere</code> with the flag <code>0x14</code> thinking it will overwrite fonts. That doesn't work for the font directory.</p><p>If you want to check and see which fonts are visible to .NET on the system then you can try</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">void</span>] [<span class="type">System.Reflection.Assembly</span>]::LoadWithPartialName(<span class="string">"System.Drawing"</span>)</span><br><span class="line">(<span class="built_in">New-Object</span> System.Drawing.Text.InstalledFontCollection).Families</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You&#39;d like to think that in 2021 installing a font would involve just copying it and some advanced AI system would notice it and install 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Transport for Azure Service Bus</title>
    <link href="https://westerndevs.com/_/Azure-service-bus-transports/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/Azure-service-bus-transports/</id>
    <published>2021-06-07T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.241Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>There are two transport mechanisms for service bus</p><ul><li>AQMP</li><li>AQMP over web sockets</li></ul><p>The default is to use plain AQMP but this uses port 5671. Often times this port may be blocked by firewalls. You can switch over to using the websocket based version which uses port 443 - much more commonly open already on firewalls.</p><h2>.NET Code</h2><p>You just need to update the <code>TransportType</code> in the service bus set up</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var<span class="built_in"> client </span>= new ServiceBusClient(Configuration[<span class="string">"ServiceBusConnection"</span>], new ServiceBusClientOptions</span><br><span class="line">&#123;</span><br><span class="line">    TransportType = ServiceBusTransportType.AmqpWebSockets</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2>Azure Functions</h2><p>The simplest way of getting websockets to work on functions is to update the connection string to mention it</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Endpoint</span>=sb://someendpoint.servicebus.windows.net/<span class="comment">;SharedAccessKeyName=SenderPolicy;SharedAccessKey=asecretkey;TransportType=AmqpWebSockets</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are two transport mechanisms for service bus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AQMP&lt;/li&gt;
&lt;li&gt;AQMP over web sockets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The default is to use p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Add user to role in sql server</title>
    <link href="https://westerndevs.com/_/add-user-to-role/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/add-user-to-role/</id>
    <published>2021-06-07T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.241Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This can be done with</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sp_addrolemember</span> <span class="variable">@rolename</span> = <span class="string">'role'</span>, <span class="variable">@membername</span> = <span class="string">'security_account'</span></span><br></pre></td></tr></table></figure><p>example</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sp_addrolemember</span> <span class="variable">@rolename</span> = <span class="string">'db_owner'</span>, <span class="variable">@membername</span> = <span class="string">'evil_hacker_account'</span></span><br></pre></td></tr></table></figure><p>another example</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sp_addrolemember</span> <span class="variable">@rolename</span> = <span class="string">'db_datareader'</span>, <span class="variable">@membername</span> = <span class="string">'datafactory'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This can be done with&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Sequences</title>
    <link href="https://westerndevs.com/_/sequence/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/sequence/</id>
    <published>2021-06-03T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.249Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Sequences are a handy feature in SQL server which provide an increasing, unique number. You wouldn't typically use them directly but might use them under the covers in an <code>identity</code>. However from time to time they are useful when you need numbers but your primary key is a <code>uniqueidentifier</code> or you need two different ways of numbering records. I've been using them to associate records in a table into groups.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">SEQUENCE</span> Seq_PermitNumber </span><br><span class="line">    <span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span> </span><br><span class="line">    <span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>You can then use them like this</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tblManualPayment </span><br><span class="line">   <span class="keyword">set</span> PermitNumber = <span class="keyword">next</span> <span class="keyword">value</span> <span class="keyword">for</span> Seq_PermitNumber </span><br><span class="line"> <span class="keyword">where</span> PermitNumber <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>This will give each record a unique permit number.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sequences are a handy feature in SQL server which provide an increasing, unique number. You wouldn&#39;t typically use them directly but migh
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Using Durable Entities</title>
    <link href="https://westerndevs.com/_/durable-entities/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/durable-entities/</id>
    <published>2021-05-20T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.245Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Durable entities are basically blobs of state that are stored somewhere (probably table storage). You can retrieve them and signal them with changes. They can be tied directly into standard Azure functions.</p><p>You build one as pretty much a POCO that looks like</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">JsonObject(MemberSerialization.OptIn)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DuplicatePreventor</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">JsonProperty(<span class="meta-string">"value"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> CurrentValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="keyword">int</span> amount</span>)</span> =&gt; <span class="keyword">this</span>.CurrentValue += amount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>(<span class="params"></span>)</span> =&gt; <span class="keyword">this</span>.CurrentValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Get</span>(<span class="params"></span>)</span> =&gt; <span class="keyword">this</span>.CurrentValue;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">FunctionName(nameof(DuplicatePreventor))</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Task <span class="title">Run</span>(<span class="params">[EntityTrigger] IDurableEntityContext ctx</span>)</span></span><br><span class="line"><span class="function"></span>        =&gt; ctx.DispatchAsync&lt;DuplicatePreventor&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example there is one piece of state: the CurrentValue. You can retrieve it using the Get() function. Add and Reset are other signals you can send to the state.</p><p>Using it in a function involves adding a client to the signature of the function like so</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">FunctionName(<span class="meta-string">"ShopifyPurchaseWebhook"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Run</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    [HttpTrigger(AuthorizationLevel.Function, <span class="string">"post"</span>, Route = <span class="literal">null</span></span>)] HttpRequest req,</span></span><br><span class="line"><span class="function">    [DurableClient] IDurableEntityClient client,</span></span><br><span class="line"><span class="function">    ILogger log)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line">```            </span><br><span class="line"></span><br><span class="line">Once you have the client you can retrieve an existing state <span class="keyword">by</span> specifying an entityId and then getting it <span class="keyword">from</span> the client</span><br><span class="line">```csharp</span><br><span class="line"><span class="keyword">var</span> entityId = <span class="keyword">new</span> EntityId(<span class="keyword">nameof</span>(DuplicatePreventer), webhook.order_number.ToString());</span><br><span class="line"><span class="keyword">var</span> duplicationPreventionEntity = <span class="keyword">await</span> client.ReadEntityStateAsync&lt;DuplicatePreventer&gt;(entityId);</span><br></pre></td></tr></table></figure><p>This gets you back a wrapper which includes properties like <code>EntityExists</code> and <code>EntityState</code>.</p><p>You can signal changes in the entity through an unfortunate interface that looks like</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await client.<span class="constructor">SignalEntityAsync(<span class="params">entityId</span>, <span class="string">"Add"</span>, 1)</span>;</span><br></pre></td></tr></table></figure><p>That's right, strings are back in style.</p><h2>Gotchas</h2><p>If you create the durable entity in your function and then request it's value you at once you won't get the correct value - you just get null. I'd bet they are using some sort of outbox model that only sends data updates at the end of the function execution.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Durable entities are basically blobs of state that are stored somewhere (probably table storage). You can retrieve them and signal them w
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Advanced Web Application Firewall Rules in Azure with Terraform</title>
    <link href="https://westerndevs.com/_/advanced-waf-rules-in-terraform/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/advanced-waf-rules-in-terraform/</id>
    <published>2021-05-19T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.241Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you're creating an Application Gateway in Terraform for Azure you're using this resource <code>azurerm_application_gateway</code>. This resource allows for some basic configuration of the Web Application Firewall through the <code>waf_configuration</code> block. However the configuration there is very limited and basically restricted to turning it off and on and choosing the base rule set. If you want a custom rule then you need to break off the rules into a separate <code>azurerm_web_application_firewall_policy</code>. This can then be referenced back in the <code>azurerm_application_gateway</code> through the <code>firewall_policy_id</code></p><p>You can use the advanced rules to set up things like Geographic restrictions. For instance this set of rules will block everything but requests from Canada and the US.</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Web application firewall settings</span></span><br><span class="line">resource <span class="string">"azurerm_web_application_firewall_policy"</span> <span class="string">"appfirewall"</span> &#123;</span><br><span class="line">  <span class="attr">name</span>                = local.basename</span><br><span class="line">  <span class="attr">resource_group_name</span> = var.resource_group_name</span><br><span class="line">  <span class="attr">location</span>            = var.resource_group_location</span><br><span class="line"></span><br><span class="line">  custom_rules &#123;</span><br><span class="line">    <span class="attr">name</span>      = <span class="string">"OnlyUSandCanada"</span></span><br><span class="line">    <span class="attr">priority</span>  = <span class="number">1</span></span><br><span class="line">    <span class="attr">rule_type</span> = <span class="string">"MatchRule"</span></span><br><span class="line"></span><br><span class="line">    match_conditions &#123;</span><br><span class="line">      match_variables &#123;</span><br><span class="line">        <span class="attr">variable_name</span> = <span class="string">"RemoteAddr"</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attr">operator</span>           = <span class="string">"GeoMatch"</span></span><br><span class="line">      <span class="attr">negation_condition</span> = <span class="literal">true</span></span><br><span class="line">      <span class="attr">match_values</span>       = [<span class="string">"CA"</span>, <span class="string">"US"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">action</span> = <span class="string">"Block"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  policy_settings &#123;</span><br><span class="line">    <span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">mode</span>    = <span class="string">"Detection"</span></span><br><span class="line">    <span class="comment"># Global parameters</span></span><br><span class="line">    <span class="attr">request_body_check</span>          = <span class="literal">true</span></span><br><span class="line">    <span class="attr">max_request_body_size_in_kb</span> = <span class="number">128</span></span><br><span class="line">    <span class="attr">file_upload_limit_in_mb</span>     = <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you&#39;re creating an Application Gateway in Terraform for Azure you&#39;re using this resource &lt;code&gt;azurerm_application_gateway&lt;/code&gt;. Thi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Importing an Encrypted Backup into Azure Managed SQL</title>
    <link href="https://westerndevs.com/_/importing-tde-encrypted-backup/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/importing-tde-encrypted-backup/</id>
    <published>2021-05-18T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.245Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Let's say you're moving an encrypted backup into Azure. The encryption was set up like this</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CERTIFICATE BackupKey   </span><br><span class="line">   ENCRYPTION <span class="keyword">BY</span> <span class="keyword">PASSWORD</span> = <span class="string">'a password that''s really strong here'</span>  </span><br><span class="line">   <span class="keyword">WITH</span> SUBJECT = <span class="string">'test1backup'</span>,   </span><br><span class="line">   EXPIRY_DATE = <span class="string">'20220101'</span>;  </span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>Now we need to export this certificate which can be done with</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BACKUP</span> CERTIFICATE BackupKey <span class="keyword">TO</span> <span class="keyword">FILE</span> = <span class="string">'c:\temp\backupkey.cer'</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">PRIVATE</span> <span class="keyword">KEY</span> (</span><br><span class="line"><span class="keyword">FILE</span> = <span class="string">'c:\temp\backupkey.pvk'</span>,</span><br><span class="line">DECRYPTION <span class="keyword">BY</span> <span class="keyword">PASSWORD</span> = <span class="string">'a password that''s really strong here'</span>,</span><br><span class="line">ENCRYPTION <span class="keyword">BY</span> <span class="keyword">PASSWORD</span> = <span class="string">'A strong password for the certificate'</span> )</span><br></pre></td></tr></table></figure><p>Now we have two file which contain the public and private keys. We need to combine these into something that Azure Key Vault can understand and this something is a .pfx file. There is a tool called <code>pvk2pfx</code> which can be used for this task and it is found in the Windows Enterprise Driver Kit https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk. It is also installed as part of visual studio. On my machine it was in <code>C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\pvk2pfx.exe</code></p><p>Run this command to combine them</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; <span class="string">"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\pvk2pfx.exe"</span> <span class="literal">-pvk</span> C:\temp\backupkey.pvk <span class="literal">-pi</span> <span class="string">'A strong password for the certificate'</span> <span class="literal">-spc</span> C:\temp\backupkey.cer <span class="literal">-pfx</span> c:\temp\backupkey.pfx</span><br></pre></td></tr></table></figure><p>Next up we need to import this key into azure keyvault. This can be done using the GUI or the command line tools. Everybody likes a pretty picture so let's use the Portal. Click into the key vault and then under certificates<img src="/images/2021-05-18-importing-tde-encrypted-backup.md/2021-05-18-14-00-09.png" alt="">)</p><p>Then click on <code>Generate/Import</code> and fill in the form there selecting the <code>.pfx</code> file created above.<img src="/images/2021-05-18-importing-tde-encrypted-backup.md/2021-05-18-12-55-32.png" alt="">)</p><p>The password will be the same one you used when exporting from SQL server. Once the certificate is imported it should be available to anybody or any application with access to certificates in key vault.</p><p>You can open up SQL Server Management Studio and in there add a new certificate selecting the certificate from the Key Vault connection</p><p><img src="/images/2021-05-18-importing-tde-encrypted-backup.md/2021-05-18-13-58-27.png" alt="">)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let&#39;s say you&#39;re moving an encrypted backup into Azure. The encryption was set up like this&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">JQ</title>
    <link href="https://westerndevs.com/_/jq/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/jq/</id>
    <published>2021-05-11T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.245Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is a really nice tool for manipulating JSON on the command line. The syntax is, however, esoteric like you would not believe. Here are some cheats to help out</p><p>If you have an array and want to take just the object at a specific index</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>which returns the 3rd element</p><p>If you want to extract a value from an array of objects then you can use</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="selector-attr">[]</span><span class="selector-class">.LicensePlate</span></span><br></pre></td></tr></table></figure><p>This works for multiple levels too so if you have nested objects you can</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="selector-attr">[]</span><span class="selector-class">.LicensePlate</span><span class="selector-class">.Province</span></span><br></pre></td></tr></table></figure><p>Given an array where you want to filter it then you can use this</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ .[] | select( .LicensePlate | contains(<span class="string">"PM184J"</span>)) ]</span><br></pre></td></tr></table></figure><p>To select a single field you could then do</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ .[] | <span class="type">select</span>( .LicensePlate | <span class="type">contains</span>(<span class="string">"PM184J"</span>)) ] |  <span class="type">map</span>( .LicensePlate)</span><br></pre></td></tr></table></figure><p>If you want multiple fields built back into an object do</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attribute">LicensePlate</span>: .[].LicensePlate, EndTime: .[].EndTime&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a really nice tool for manipulating JSON on the command line. The syntax is, however, esoteric like you would not believe. Here a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Creating a Shortcut in Powershell</title>
    <link href="https://westerndevs.com/_/creating-a-shortcut/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/creating-a-shortcut/</id>
    <published>2021-05-10T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.241Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>You can't really create a shortcut in powershell directly but you can using the windows script host from powershell. For instance here is how you would create a new desktop icon to log the current user off.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$WshShell</span> = <span class="built_in">New-Object</span> <span class="literal">-comObject</span> WScript.Shell</span><br><span class="line"><span class="variable">$Shortcut</span> = <span class="variable">$WshShell</span>.CreateShortcut(<span class="string">"<span class="variable">$home</span>\Desktop\LogOff.lnk"</span>)</span><br><span class="line"><span class="variable">$Shortcut</span>.TargetPath=<span class="string">"C:\Windows\System32\shutdown.exe"</span></span><br><span class="line"><span class="variable">$Shortcut</span>.Arguments=<span class="string">"/l"</span></span><br><span class="line"><span class="variable">$Shortcut</span>.IconLocation=<span class="string">"C:\windows\system32\Shell32.dll,44"</span></span><br><span class="line"><span class="variable">$Shortcut</span>.Save()</span><br></pre></td></tr></table></figure><p>The icon here is taken from the long list of icons in <code>Shell32.dll</code> in this case it is the little orange key icon. These icons are going to be refreshed soon so your mileage may vary on them. I found the right icon by just google image searching <code>shell32.dll icon</code> and found a picture of some of the index numbers. They were 1 indexed so I had to subtract 1</p><p><img src="/images/2021-05-10-creating-a-shortcut.md/2021-05-10-11-39-21.png" alt="">)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You can&#39;t really create a shortcut in powershell directly but you can using the windows script host from powershell. For instance here is
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Setting Timezone from Powershell</title>
    <link href="https://westerndevs.com/_/set-timezone/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/set-timezone/</id>
    <published>2021-05-10T04:00:00.000Z</published>
    <updated>2021-08-18T21:12:42.249Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is pretty easy.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-Timezone</span> <span class="literal">-Id</span> <span class="string">"US Eastern Standard Time"</span></span><br></pre></td></tr></table></figure><p>You need to know the id of the timezone and you can figure that out using</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Timezone</span> <span class="literal">-ListAvailable</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Id                         :</span> <span class="string">Dateline</span> <span class="string">Standard</span> <span class="string">Time</span></span><br><span class="line"><span class="attr">DisplayName                :</span> <span class="string">(UTC-12:00)</span> <span class="string">International</span> <span class="string">Date</span> <span class="string">Line</span> <span class="string">West</span></span><br><span class="line"><span class="attr">StandardName               :</span> <span class="string">Dateline</span> <span class="string">Standard</span> <span class="string">Time</span></span><br><span class="line"><span class="attr">DaylightName               :</span> <span class="string">Dateline</span> <span class="string">Daylight</span> <span class="string">Time</span></span><br><span class="line"><span class="attr">BaseUtcOffset              :</span> <span class="number">-12</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">SupportsDaylightSavingTime :</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Id                         :</span> <span class="string">UTC-11</span></span><br><span class="line"><span class="attr">DisplayName                :</span> <span class="string">(UTC-11:00)</span> <span class="string">Coordinated</span> <span class="string">Universal</span> <span class="string">Time-11</span></span><br><span class="line"><span class="attr">StandardName               :</span> <span class="string">UTC-11</span></span><br><span class="line"><span class="attr">DaylightName               :</span> <span class="string">UTC-11</span></span><br><span class="line"><span class="attr">BaseUtcOffset              :</span> <span class="number">-11</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">SupportsDaylightSavingTime :</span> <span class="literal">False</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>You can also see the current timezone by running</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Timezone</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Id                         :</span> <span class="string">Mountain</span> <span class="string">Standard</span> <span class="string">Time</span></span><br><span class="line"><span class="attr">DisplayName                :</span> <span class="string">(UTC-07:00)</span> <span class="string">Mountain</span> <span class="string">Time</span> <span class="string">(US</span> <span class="string">&amp;</span> <span class="string">Canada)</span></span><br><span class="line"><span class="attr">StandardName               :</span> <span class="string">Mountain</span> <span class="string">Standard</span> <span class="string">Time</span></span><br><span class="line"><span class="attr">DaylightName               :</span> <span class="string">Mountain</span> <span class="string">Daylight</span> <span class="string">Time</span></span><br><span class="line"><span class="attr">BaseUtcOffset              :</span> <span class="number">-07</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">SupportsDaylightSavingTime :</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is pretty easy.&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/t
    
    </summary>
    
    
  </entry>
  
</feed>
