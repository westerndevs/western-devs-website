<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/justin_self" rel="self" type="application/atom+xml"/>
  <link href="https://westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2024-09-01T01:12:30.900Z</updated>
  <id>https://westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>https://westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">Losing Data with Azure Blob Storage</title>
    <link href="https://westerndevs.com/bugs/another-time-disposing-is-dangerous/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/bugs/another-time-disposing-is-dangerous/</id>
    <published>2019-08-16T08:30:00.000Z</published>
    <updated>2024-09-01T01:12:30.900Z</updated>
	<author>
	
	  
	  <name>Justin Self</name>
	  <email>justinself@outlook.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>We had a bug that caused us to write 0 byte documents to Azure blob storage. It was there for a while. We tried hard to find it.</p><p>Eventually, we turned on blob snapshots which, instead of replacing a blob with a new blob on every write, makes a copy that you can promote at a later time.</p><p>This week, we had a production issue where a blob had 0 bytes. We hadn't seen it in so long, we secretly hoped the problem was magically fixed by someone else.</p><a id="more"></a><p>After promoting the previous copy, which unblocked the issue, I stared in frustration at the code, not understanding how we were writing to a stream with 0 bytes.</p><p>I probably spent an hour tracing through code and found no place where we were doing anything that would cause this issue. So I decided to take a walk... to the kitchen. There, I sat down with our CTO and described the situation. We started talking through scenarios of how this could happen. Maybe this was a bug in Azure blob or the SDK. Maybe it was our code. Maybe we were somehow purging the stream buffer.</p><p>After 10 minutes of ideas, we went back to my machine and started to take a closer look at the issue. First, we noticed the timestamps. We audit a lot of things in our system and we had an audit that occurred just before the time we wrote the 0 byte document. We knew what time the write occurred because of the timestamp on the document from the Azure Portal.</p><p>Working our way backwards, I filtered the logs looking for errors that may have occurred before the timestamp or just after it. Then I saw a null reference exception in our logs just a little bit before our successful audit. The top of the stacktrace showed the null reference was actually coming from our IOC container attempting to inject a dependency. That was bizarre. We hold on to the containers for the lifetime of the service and that could be days. Even still, that shouldn't have had anything to do with writing a 0 byte document.</p><p>However, in an attempt to squash any leads, we dug a little deeper into the surrounding code where the exception was thrown.</p><p>A few layers above where the IOC call was eventually made, we see that we are attempting to get an instance of a class that helps us manage encryption. It was that class that was receiving the null reference exception and we happened to be doing that just before we write our data to the blob document.</p><p>That shouldn't have mattered because we had code like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">await</span> blob.OpenWriteAsync())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//get factory here which gets stuff from IOC</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> stream.WriteAsync(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We call <code>OpenWriteAsync</code> which returns a <code>CloudBlobStream</code> which inherits from <code>Stream</code>. We do some encryption stuff and then we write the data to blob. The &quot;do some encryption stuff&quot; is what was failing. Since this was wrapping in a <code>using</code> block, that means the exception was actually thrown in the compiler generated <code>try</code> block and then the <code>finally</code> block calls <code>Dispose</code> on the <code>CloudBlobStream</code> because it ultimately implements <code>IDisposable</code>.</p><p>We dug a little deeper into what <code>Dispose</code> was doing on the <code>CloudBlobStream</code>: it ends up calling <code>Commit</code> which, as you can guess, commits the data in the stream to blob. But, at this point we hadn't written any data. So it was actually committing an empty stream which created a 0 byte blob document.</p><p>But why were we through that exception to begin with? Well, we DO dispose the container when the Cloud Service instance is shutting down. So, that means we have to start shutting down a worker role (which is done via autoscaling or deployments) and begin processing a new message from our queue infrastructure within a very tight window. Then we will attempt to create a new encryption helper instance at just the right time before the role is down and that will lead to the disposed container which causes the exception.</p><p>That, in of itself, shouldn't be a big deal. Our message goes back into the queue because it couldn't finish since the machine shut down. However, and without going too much into detail, we need to read data in the blob in order to know how we need to modify it. That means when we try to reprocess the message, it fails again because we don't have any of the data in the document that we should.</p><p>There are a couple of immediate takeaways from this that we are working through. First, we shouldn't have been doing anything inside of the <code>using</code> block other than what was purely necessary. We didn't need to do the encryption stuff in the using. If we hadn't we wouldn't have had an exception in a place where ultimately a commit would be called.</p><p>Second, we are considering putting the writes to the document in a separate message that isn't dependent on reading the document first. This would have let us replay the message and work the second time around.</p><p>To get around the issue right now (before we break things apart), we removed the <code>using</code> block all together and simply call <code>Dispose</code> ourselves when we are done. We've also removed anything between getting the stream and using the stream.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We had a bug that caused us to write 0 byte documents to Azure blob storage. It was there for a while. We tried hard to find it.&lt;/p&gt;
&lt;p&gt;Eventually, we turned on blob snapshots which, instead of replacing a blob with a new blob on every write, makes a copy that you can promote at a later time.&lt;/p&gt;
&lt;p&gt;This week, we had a production issue where a blob had 0 bytes. We hadn&#39;t seen it in so long, we secretly hoped the problem was magically fixed by someone else.&lt;/p&gt;
    
    </summary>
    
      <category term="bugs" scheme="https://westerndevs.com/categories/bugs/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">Avoid Death With C# Compiler Directives</title>
    <link href="https://westerndevs.com/happiness/avoid-death-with-directives/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/happiness/avoid-death-with-directives/</id>
    <published>2019-06-14T08:30:00.000Z</published>
    <updated>2024-09-01T01:12:30.900Z</updated>
	<author>
	
	  
	  <name>Justin Self</name>
	  <email>justinself@outlook.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Compiler directives in C#: they should be avoided. If they aren't, and you're using them to compile different code based on build modes (like DEBUG or RELEASE), then listen closely and do what I do... it'll change your life.</p><a id="more"></a><p>Simple scenario: You talk to another service that uses Azure AD. For development, you want to use a stub service that returns things and does things similar to the real one in Azure. Doesn't matter what it is.</p><p>Some people may use IoC to handle this. Sometimes, that requires config switches. However, what if you want to be 100% sure that code can never be accidentally turned on in production? You may consider using a compiler directive.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">DoUnsafeThingThatShouldNeverBeInProduction();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> RELEASE</span></span><br><span class="line">DoItTheSafeWay();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>Depending on the build mode, one of those methods will not be make it to the assembly. This prevents any accidents that could do the unsafe thing. Yes, there are other ways of doing this and typically those ways require process and convention. No, this is not fail safe is technically someone could accidentally change the build mode to DEBUG for a production release (sure, whatever).</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        HttpClient client;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//weeping and gnashing of teeth</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> RELEASE</span></span><br><span class="line">        client = ClientFactory.UseClientWithAzureAD();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> DEBUG</span></span><br><span class="line">        client = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There's are problems, though, that can arise from using these directives. First, if you have your environment set to DEBUG and this is the only spot you use the <code>DoItTheSafeWay</code> method, looking for any usages using your IDE will result in ZERO INSTANCES! NONE! You'll spend 45 minutes trying to figure out how this thing is done in production because, like any normal person, you're using the Find References in your tool.</p><p>But NO! You won't find it. Your IDE simply laughs at you while you struggle knowing it must be used somehow. The IDE knows what's going on. It knows what you want but it decides to continue to hide this from you. So, you end up doing a damn regex search among all the files. The IDE knows it has be caught red handed trying to sabotage you and surfaces the files for you while sheepishly blaming Resharper for performance problems. I call it BS2019 for a reason (not always, generally I like VS).</p><p>The other problem is your trusty IDE will tell you that certain using statments are not being used and you should delete them or it will remind you with grayed out text or a colored dash on the scroll bar. You delete them, commit, push, and then find out the build failed because, in release mode, they are being used...</p><p>So, use the following code (or something similar):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RunMode</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !DEBUG</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> _isRelease = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> DEBUG</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> _isRelease = <span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ReSharper disable once ConvertToAutoProperty</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> IsRelease =&gt; _isRelease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And then use it like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        HttpClient client;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Children laughter and happiness</span></span><br><span class="line">        <span class="keyword">if</span> (RunMode.IsRelease)</span><br><span class="line">        &#123; </span><br><span class="line">            client = ClientFactory.UseClientWithAzureAD();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Your experiences will vary, but reports of using this code show it has saved marriages, increased gas mileage and prevented the death of at least 2 dozen water fowl.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Compiler directives in C#: they should be avoided. If they aren&#39;t, and you&#39;re using them to compile different code based on build modes (like DEBUG or RELEASE), then listen closely and do what I do... it&#39;ll change your life.&lt;/p&gt;
    
    </summary>
    
      <category term="happiness" scheme="https://westerndevs.com/categories/happiness/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">Validating Client Is Sending Cert For Auth In Azure Functions</title>
    <link href="https://westerndevs.com/certificates-azurefunctions/Testing-Client-Cert-Auth/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/certificates-azurefunctions/Testing-Client-Cert-Auth/</id>
    <published>2018-12-13T21:35:38.000Z</published>
    <updated>2024-09-01T01:12:30.892Z</updated>
	<author>
	
	  
	  <name>Justin Self</name>
	  <email>justinself@outlook.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Do you need to validate a client certificate is being passed to a server correctly but don't want to muck with local TLS and webserver configs? I got you.</p><a id="more"></a><p>Using an Azure function, this can be done two ways.</p><p>1 - Check for the X-ARR-ClientCert request header and, if present, base64 decode the value and load it into a X509Certificate2. From there, you can check the thumprint to validate the client is correctly sending the certificate with the request.</p><p>2 - Get the request context and check to see if the ClientCertificate is null. If it's not then check the thumprint.</p><p>I chose the second way for one single reason - I did not know about the first way. So, if you choose the second way you'll need to make a setting change to allow the certificate to be passed in with the request (instead of as part of the request header).</p><p>Go to the SSL settings of the function app.</p><p><img src="https://imgur.com/ehuVZqx.png" alt="1"></p><p>Enable the <code>Incoming client certificates</code> flag.</p><p><img src="https://imgur.com/knx5FJd.png" alt="2"></p><p>Here's some code:</p><pre><code>    [FunctionName(&quot;Function1&quot;)]    public static async Task&lt;HttpResponseMessage&gt; Run([HttpTrigger(AuthorizationLevel.Function, &quot;get&quot;, &quot;post&quot;, Route = null)]HttpRequestMessage req, TraceWriter log)    {        var clientCert = req.GetRequestContext().ClientCertificate;        if (clientCert == null)        {            return req.CreateResponse(HttpStatusCode.BadRequest, &quot;There's no client certificate&quot;);        }        log.Info($&quot;Client Thumbprint: {req.GetRequestContext().ClientCertificate?.Thumbprint ?? &quot;No cert found.&quot;}&quot;);        return req.CreateResponse(HttpStatusCode.OK, $&quot;Thumbprint: {clientCert.Thumbprint}&quot;, new JsonMediaTypeFormatter());    }</code></pre><p>Boom. Done. All in all, this took about 8 minutes to do (including creating the function app) and it saved me from mucking around with my machine, generating a cert, configuring the web server etc., and now others on my team can use it.</p><p>Using the second way gives an added benefit of forcing all requests to include a client cert. So, if your app immediately gets rejected, you know the cert isn't even being loaded.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Do you need to validate a client certificate is being passed to a server correctly but don&#39;t want to muck with local TLS and webserver configs? I got you.&lt;/p&gt;
    
    </summary>
    
      <category term="certificates azurefunctions" scheme="https://westerndevs.com/categories/certificates-azurefunctions/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">How To Be a Pretentious Douche Canoe</title>
    <link href="https://westerndevs.com/mistakes/How_To_Be_A_Pretentious_Douche_Canoe/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/mistakes/How_To_Be_A_Pretentious_Douche_Canoe/</id>
    <published>2018-05-21T10:00:00.000Z</published>
    <updated>2024-09-01T01:12:30.892Z</updated>
	<author>
	
	  
	  <name>Justin Self</name>
	  <email>justinself@outlook.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I don't know everything.</p><p>But that's too much of an obvious statement to mean anything.</p><p>I don't know everything and I'm ok with that.</p><a id="more"></a><p>Over the past decade of software development, I've created opinions of my own rather than regurgitating the opinions of my mentors, blogs I've read or books I've skimmed. I don't mean to use &quot;regurgitating opinions&quot; in any negative connotation. When I first started in this career, I didn't know anything and I looked to my mentors for guidance and advice. I looked to them for my opinions. When they were disgusted by SOAP interfaces, so was I. When they said guids should never be used as primary keys, I believed them and never tried to use them. But eventually, someone would challenge my &quot;beliefs&quot; and I would either:</p><ol><li>Discredit them or assume they didn't know what they were talking about</li><li>Take to heart their point of view and try to reconcile it with what I knew</li></ol><p>The first part of my career was centered a lot around number 1, but I've worked really hard the past several years to move my ego out of the way in order to grow.</p><p>It took me a while to be honest with my self and realize that I took people's challenges very personally at times. Digging deep, I realized I felt it was almost an attack on my competency, as if they were denouncing my experience or skills. Couple this with the fact that I'm a two time college drop out and my ego suddenly became very brittle.</p><p>There was one time, in particular, when I was first leading a team. A junior dev would ask me random trivia questions about .NET or C# to see if I knew them. Some of them I didn't know and he would proudly tell me the answer. To me, that was challenging some pseudo authority I had granted myself. I felt as if he was asserting his dominance over my informal education or trying to show that I wasn't qualified to be where I was. This, in turn, made me dismissive of his input or propel me to be extremely critical of his ideas and approaches.</p><p>Damn, even as I type this out, I'm still ashamed of how I felt back then. It was pathetic and my heart hurts when I think about my son and daughter learning how fragile daddy's ego can be.</p><p>It took me a long time, and a lot of introspection, to realize that he merely wanted to impress me. Yeah, I felt like a big douche canoe afterwards. Instead of challenging me, he saw me as an authority and wanted to try to prove herself against a higher bar she set. A bar she set with me in mind.</p><p>I've got many stories of how my ego precluded me from adding value or cultivating deeper relationships with those around me. Thankfully, I know myself better now and I'm better equipped to handle it. Every now and then, however, I can feel myself slip into that deep abyss of self-doubt and sulk at the sunken pillar constructed of my fears and failures. This can cause me to lash out to those around me and manifest in ways that people can't really see.</p><p>What's interesting, though, is since I'm a very sensitive person, I'm often acutely aware how I come across to others. Once I realize I allowed a vein of fragility to infect my confidence and composure, I'll go back to the person afterwards and apologize. However, they are typically completely oblivious to the internal Goliath I was facing at the time and had no reason to believe waters beneath didn't match the calm, glass like surface.</p><p>I've gotten a lot better at this over the past 7 years; it's been a real focus of mine. When I feel myself hardening within a shell of pretentiousness and entitlement, it's a sign to me that I need to humble myself and remember that I'm not playing some zero-sum game where if someone else wins then I lose.  I haven't opened up to many people about this struggle. I'm writing this post as a cathartic means of freeing myself from those chains in hopes others can tell me their experiences and tell me if they struggle with their own ego at times as I do.</p><p>However, even if no one agrees and all I get is an inbox full of &quot;don't be a pretentious douche canoe&quot;, I'll still be content. This career I've chosen is starting to become far less about software and far more about value. Don't get me wrong, I feel very competent as a software developer. But I'll admit when I don't know something and I'll be the first person to ask you what the acronym means that you said in a side remark discussing your project's problem.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I don&#39;t know everything.&lt;/p&gt;
&lt;p&gt;But that&#39;s too much of an obvious statement to mean anything.&lt;/p&gt;
&lt;p&gt;I don&#39;t know everything and I&#39;m ok with that.&lt;/p&gt;
    
    </summary>
    
      <category term="mistakes" scheme="https://westerndevs.com/categories/mistakes/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">Estimations and Mistake Driven Development</title>
    <link href="https://westerndevs.com/mistakes/Estimations_And_Mistake_Driven_Development/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/mistakes/Estimations_And_Mistake_Driven_Development/</id>
    <published>2017-07-12T10:00:00.000Z</published>
    <updated>2024-09-01T01:12:30.892Z</updated>
	<author>
	
	  
	  <name>Justin Self</name>
	  <email>justinself@outlook.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Mistake Driven Development, or MDD (because we need another TLA in our lives), is my thought process on how I grow as a human both personally and professionally.</p><a id="more"></a><p>The basic idea is that I, as I'm sure others do, learn best after making mistakes. I can be told the right way to do something and I can follow the approach, but it never <em>really</em> sinks in until I see what happens when I don't do it. The reason I care about things like dependency management or domain models is because I've felt the pain of not using them. It's the pain that drives me to do better. It's the pain that gives me an opportunity to improve. Were it not for the pain, I'd never want to change. For me, I have to make mistakes before I can grow.</p><p>MDD doesn't stop with my technical skill sets. When I married my wife, we were both pretty young (21). I hadn't had a chance to really get myself together and now I had to be a husband. I made several mistakes (we both did but I'd never tell her that) and I felt pain. Sometimes I felt that pain several times because I can be slow learner. But eventually, I find that I want to stop feeling the pain enough to change my ways and that's always when I grow. We're still young and have a lot of years to continue to grow, but I can at least look back as we clear our first decade and see improvements.</p><h2>News Flash: I suck at estimates</h2><p>I've been guilty of trying to anticipate what my client wants to hear and craft a pleasing response that orbits the truth instead of landing on it. This most always manifests itself in over promising. This is an area of particular interest for me. I've felt the pain of over promising (often in the way of low balling estimates) time and time again. I've walked that emotional path so many times that my feet would take me there without any conscious effort on my part. In other words, I was so good at doing it that I sometimes didn't realize I was doing it until it's too late.</p><p>One mistake started out the same way. A client was pressuring me for an estimate. I gave one and she didn't like it. So we &quot;negotiated&quot; until I walked out of the room with a familiar sense of foreboding. As a human, I suck at estimates in general. Put me under the pressure of some forced negotiation (whether real or by my own imagination) and by the end of it I've probably blacked out halfway through and temporarily made my client happy at the expense of several future sleepless nights.</p><hr><p>Before I go any further, in no way am I attempting to blame a client for my lack of directness. A client's job is to maximize value for her company which includes motivating those who work for/with her to deliver quality content quickly. As an executive for the company, she is expected to drive success hard.</p><hr><p>I developed a theory for why I've done this. I think I subconsciously simulate the client interactions with a legitimate, variable estimation. For example, maybe the simulation starts with an estimation I feel comfortable with. If I think she'll blow up, I'll re-estimate the work with the goal of reducing the length of time required. The problem is that this distorts my vision to the point that I began to overestimate my capacity or ability. I also see this as a self fulfilling prophecy of sorts. If I'm too afraid of what the client will do when I say 6 weeks, I'm going to justify a way to myself to say something less.</p><p>This will lead to a new estimate of 5 weeks. She still won't be happy but I'm sure if we work <em>really</em> hard we can <em>possibly</em> get it done in 4 weeks. So I can just tell her 4-5 weeks. Cut to me delivering the estimate and the only thing the client hears is &quot;4 weeks&quot;. Now she doesn't know that I've already tried to cut through the &quot;what if things go perfect&quot; scenario and thinks she can make me work harder to get it done faster by imposing a deadline. Before I know it, I'm walking out of the meeting and the client has used her knife to carve a giant X on a delivery date three weeks from now... Mother Francis.</p><p>So what happens next? I get myself and the team pumped up all the while hoping my face doesn't betray my confident facade. The familiar anxious feeling sits in the bottom of my stomach as if I had extra servings of stone soup. For the next two weeks, I ignore the signs while confidently thinking that we are going to deliver a miracle (with a few swishes of pepto-bismol added for good measure). The last week rolls around and it looks like we are really going to do it. But then something happens, like it does every time. Something happens in the story that we didn't foresee, production blows up and pulls half of the team away, or the client introduces a &quot;simple&quot; change.</p><p>Two or three days before we reach the giant X on the calendar, I realize it's hopeless. I began to think that if I work the next 72 hours, ignoring distractions like sleep, food, or time with my beautiful wife and kids, we <em>might</em> have a 30% chance of making.</p><p>Reality quickly sets in and I began customizing my most dreaded email template. You know what it is: the &quot;we need to delay our release&quot; one.</p><h2>Enough</h2><p>I eventually got tired of this. I was ready to start making changes that would help prevent or control situations like this in the future. I had felt the pain enough now that I was ready to do something about it. This was a great opportunity to let my mistake drive my own development.</p><p>Note: my point isn't to make perfect estimate, I don't even think that's possible. My point is to work  to create more realistic estimations all the while being honest with myself and my client.</p><p>So here are some things I started doing:</p><h3>Embrace the suck</h3><p>When I was a kiddo, if I ever lied to my mother, I would be punished twice as hard (doing the bad thing I lied about + lying). If I have tough news for a client, I embrace the suck and set the expectations from the beginning. Over time, I learned techniques of delivering bad news in ways that weren't so terrible including presenting options for remediation and giving the client a chance to make a business choice regarding the matter.</p><h3>Stop giving estimates to the client the first time I'm presented with the scope of work</h3><p>This seems like a very obvious thing, but the problem is that I would forget about my previous mistakes and over estimate my own ability. Even if the scope is extremely well defined and I know the code base like I know my refrigerator, taking a moment of pause will allow me to clear my mind and provide time for historical reflection. Afterwards, I'll approach the client with an estimation completed free from pressure.</p><h3>Stop giving perfect world estimates</h3><p>If my physics classes taught me anything, it's that there is a perfect world that exists where there is no air resistance and all cows are spherical. Also, in this perfect world, nothing unplanned ever happens. My team suffers no illness, family emergencies, or destroyed laptops. We make no incorrect assumptions and introduce no bugs and every solution comes to us immediately without needing to ponder it for days. Maybe this world does exist... however, it's just not the world we live in.</p><p>The only constant is change. Life is unpredictable and I need to remember that when I'm thinking about how much time we'll need to complete something. While my client might be sympathetic to one of my teammates needing to take a week and half off because of a death in the family, she doesn't want to hear that as an excuse for why we are late. My estimates need to take into account the unknown. Some people call this padding, I'm calling it being realistic.</p><h3>Take my time</h3><p>Sometimes, I'll think that I know the problem and solution set so well that I don't need to dig deeper. Making estimates within a really short period of time is like trying to quickly eat a loaf of bread with a rock hidden inside. When you find that damn rock, it's going to hurt like hell.</p><h3>Involve other people</h3><p>I need to stop thinking I'm always the right person to make the call on how long something will take. I might be the lead on the team, but I'm not the best. It's not my job to know everything. It's my job to utilize my teammates' strengths to create a cohesive tandem of individuals. We should be estimating as a team, not just me. Again, this seems very obvious, but I'm admitting to making this mistake.</p><h3>Stop thinking everyone has my strengths and weaknesses</h3><p>Maybe I really can do something in 3 days. But does that mean everyone on my team will take the same amount of time? I can crank out some front end code pretty dang quickly. But you need me to write a complex SQL query? Hello Google (ok, really it's StackOverflow). Another person on my team might happen to be the person who has to do some CSS work and she might not be very good at it. 79.1% of all developers are intimidated by CSS... yes, I just made that up.</p><h3>Break it down then break it down more</h3><p>We suck at estimates, but we suck gloriously worse the larger the workload is. Breaking the work down into smaller items, taking the aggregate then applying overall ranges has been much more effective for me.</p><p>This isn't an exhaustive list by which I use to do better; it's just a start.</p><h3>But Agile... Scrum?! What about using velocity? Why estimates?</h3><p>I love Scrum and Kanban (each in different scenarios) but when I'm working on an estimate for a client who wants to know how much something is going to cost <strong><em>before</em></strong> they sign the statement of work, sometimes you've just gotta estimate.</p><p>Maybe some of this resonates with you... maybe not. In the end, this is just me pulling back the curtains and showing how I took some mistakes I made and turned them into growth opportunities.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mistake Driven Development, or MDD (because we need another TLA in our lives), is my thought process on how I grow as a human both personally and professionally.&lt;/p&gt;
    
    </summary>
    
      <category term="mistakes" scheme="https://westerndevs.com/categories/mistakes/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">Add some spice to your life with Resharper Templates</title>
    <link href="https://westerndevs.com/Azure/Add-some-spice-to-your-life-with-resharer-templates/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/Azure/Add-some-spice-to-your-life-with-resharer-templates/</id>
    <published>2016-10-04T21:30:00.000Z</published>
    <updated>2024-09-01T01:12:30.888Z</updated>
	<author>
	
	  
	  <name>Justin Self</name>
	  <email>justinself@outlook.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Do you use Resharper? Do you have 5 minutes? Awesome, let's change your life.</p><a id="more"></a><p>Open Visual Studio. Click on the <code>Resharper</code> menu item, navigate to Tools &gt; Template Explorer, then click on the new template button (see image);</p><p><img src="http://i.imgur.com/gkkaV52.png" alt="Imgur"></p><p>In the editor, paste this: <code>//TODO : $user$ $date$ $description$</code></p><p>On the right, you'll now see three parameters. For <code>user</code>, click &quot;choose macro&quot;, and the select &quot;Full user name of current user&quot;.</p><p>For the <code>date</code> parameter, click &quot;Choose macro&quot;, and then select &quot;Current data specified format&quot;. In the format box, type &quot;MM/dd/yyyy&quot;.</p><p>Uncheck the <code>editable</code> checkboxes for <code>user</code> and <code>date</code>.</p><p>Lastly, in the &quot;Shortcut&quot; box, type &quot;todo&quot; and name it &quot;todo helper&quot;.</p><p><img src="http://i.imgur.com/DGqDxdb.png" alt="Imgur"></p><p>Ok, save and make a new one for &quot;hack&quot; comments with &quot;//HACK : $user$ $date$ $description$&quot;</p><p>Now, you should be able to go into your C# class files and do this:</p><p><img src="http://i.imgur.com/P8OUP3A.gif" alt="Imgur"></p><p>Cool, huh?</p><p>Ok, now let's make a unit test help with this:</p><pre><code>[Test]public void $methodName$(){    //Arrange    $END$    //Act    //Assert}</code></pre><p>I use the shortcut <code>nut</code> for &quot;nUnit Test&quot;. If you use other testing frameworks, just modify it to suite your needs.</p><p>Save it and now add tests like this:</p><p><img src="http://i.imgur.com/jVo9WoU.gif" alt="Imgur"></p><p>Pretty sweet, right? Life changing? Maybe.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Do you use Resharper? Do you have 5 minutes? Awesome, let&#39;s change your life.&lt;/p&gt;
    
    </summary>
    
      <category term="Azure" scheme="https://westerndevs.com/categories/Azure/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">Extensibility In Message Based Systems With NServiceBus</title>
    <link href="https://westerndevs.com/nservicebus/extensibility-in-message-systems-with-nservicebus/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/nservicebus/extensibility-in-message-systems-with-nservicebus/</id>
    <published>2016-06-29T07:30:00.000Z</published>
    <updated>2024-09-01T01:12:30.904Z</updated>
	<author>
	
	  
	  <name>Justin Self</name>
	  <email>justinself@outlook.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>One of my favorite things about message based systems is the natural points of extensibility you can gain. Though, you don't get it for free if you aren't setting yourself up for it.</p><a id="more"></a><p>Let's say you work for a company that sells dog shoes online. Thinking about it, that's a dramatically under served market.</p><p>Currently, your company's website allows for users to pay with their credit card and then, hopefully within a few days, receive their shoes. So let's take a look at some sample code for the handler that processes the message for payment.</p><pre><code>public class ProcessPaymentHandler : IHandleMessage&lt;ProcessPayment&gt;{    public void Handle(ProcessPayment message)    {        paymentProviderClient.Charge(message.paymentData);        //save and log response    }}</code></pre><p>Ok, obviously a simple example but you get the idea.</p><p>Everything is working well and your client's canine pals are having their paws covered in stylish footware.</p><h2>The New Requirement</h2><p>Now your product owner comes to you with a new requirement: send a confirmation email once the payment has been processed. This is easy enough. Let's just have the ProcessPaymentHandler send a command to send the confirmation email.</p><pre><code>public class ProcessPaymentHandler : IHandleMessage&lt;ProcessPayment&gt;{    public void Handle(ProcessPayment message)    {        paymentProviderClient.Charge(message.paymentData);        //save and log response        var emailAddress = customerRepo.GetEmailByOrderId(message.OrderId);        bus.Send(new SendConfirmationEmail(emailAddress));    }}</code></pre><p>This is a common, albiet naive, approach to the problem. It will work, assuming we have a handler for the SendConfirmationEmail message to be received by, but there are some problems with it.</p><h2>Problems</h2><h3>Dependency</h3><p>The first problem is now the code that handles processing a payment has a dependency on the process that sends emails. This single line of code may not seem like a dependency problem, but maintaining code and clean architecture is a lot about managing dependencies. Introducing the command here forces the host of this handler to know about the location of the email handler.</p><p>There's also a deployment dependency. We now have to keep this handler in sync with the current version of the email handler.</p><p>If the message interface changes because the handler was expanded or for any other of a multitude of reasons, we now have to come back and change code that handles processing a payment because some other code related to an email has changed (admittedly, though, we could effectively manage different versions in messages). Which leads us to the next problem...</p><h3>Single Responsibility</h3><p>It's a violation of the Single Responsibility Principle (SRP) which basically means that a piece of code should have only one reason to change. The class is currently supporting two requirements (processing a payment and sending an email) therefore has two reasons to change.</p><h3>Open/Closed</h3><p>In order for us to add a new feature, we had to modify existing code. Sometimes that's inevitable, but sometimes it's a sign of a series of preceeding bad design choices. When that happens, it is a violation of the open/closed principle. This principle states that you should be able to extend functionality without having to modify the internals of existing code.</p><p>What we want is the ability to complete the feature for sending the email without having to modify the existing code.</p><h2>The Solution - Events</h2><p>If the ProcessPayment Handler published an event once it was done, then the Email Handler could subscribe to the event and take the appropriate action. This allows the payment processor to continue on its merry way being none the wiser that any process cares about it.</p><p>Here's the code for that:</p><pre><code>public class ProcessPaymentHandler : IHandleMessage&lt;ProcessPayment&gt;{    public void Handle(ProcessPayment message)    {        paymentProviderClient.Charge(message.paymentData);        //save and log response        bus.Publish(new PaymentProcessed(message.OrderId));    }}</code></pre><p>In this code, we removed the line getting the email address and the code to send a new SendConfirmationEmail command.</p><p>It's pretty clear why the first line was removed. Since we aren't sending the command, we don't need to find the email address.</p><p>The second line, however, has some subtleties that could be missed.</p><h3>Publish</h3><p>The command was &quot;sent&quot; while the event is &quot;published&quot;. Commands can be sent from N number of hosts but they are &quot;sent&quot; to a location because that location is always known. If a service has the contract and the correct queue, it can send any command it wants to. This means, however, that the service is now coupled to the processor of that command; being aware of its very existence is a coupling.</p><p>However, events are published from one and only one logical host but can be received by N number of hosts. Other services can subscribe to those events without the publishing service being aware of it. This inverts the coupling the other direction. The service that needs to do the action is now coupled to the service that publishes the event. The coupling here makes sense. In our case, the email service wants to know when it needs to send the confirmation email. So, we can allow it to couple to the PaymentProcesssor service.</p><p>If you are still not quite groking events vs commands, try this:</p><ul><li><p>Commands are like email. You know who is going to read it and you know where it is going. You send the email to one person with the expectation that they will read it and act on it.</p></li><li><p>Events are like this blog post. I have no idea if anyone will read it, who that person is or where they are located. I put it out in case anyone is interested in my data.</p></li></ul><p>I want to reiterate something really quickly: Anyone can send a command, but there must be only <strong>ONE</strong> service that handles it. Anyone can subscribe to an event but there must be only <strong>ONE</strong> service that publishes it.</p><h3>Naming</h3><p>The event is named as a past tense version of the command it was being published from. This is a convention I pretty much always use when naming commands and events. The commands are imperative. They represent actions your services can do and generally found in your ubiquitous language. The events are past tense. If your command name is &quot;DeleteAccount&quot; the event would be &quot;AccountDeleted&quot;.</p><p>Here's some sample code for handling the event:</p><pre><code>public class PaymentProcessedHandler : IHandleMessage&lt;PaymentProcessed&gt;{    public void Handle(ProcessPayment message)    {        bus.Send(new SendConfirmationEmail());    }}</code></pre><p>You may have noticed I'm sending a command from this event handler instead of just doing the work. There is a reason and I'll get to why I did that in another post.</p><h2>Extensibility</h2><p>Up to now, all we've really done is changed a command to an event and moved some logic to the event handler, which then delegates to another command handler. So where's the power in that?</p><p><em>Cue the Product Owner</em></p><p>Now we have some new requirements. Once a payment has been successfully processed, if this is a first time customer then the company wants to send out a special dog treat to the customer to give to their canine companion as a thank you for their business. So let's add that capability.</p><p>If we didn't have events, we would need to modify the existing code for processing a payment and have another command sent (which introduce more of the three problems from earlier). However, since we have events, all we need to do is let this catalogue service subscribe to the PaymentProcessed event and do its thing. This means we don't have to modify ANY code in the Payment Processor.</p><pre><code>public class PaymentProcessedHandler : IHandleMessage&lt;PaymentProcessed&gt;{    public void Handle(ProcessPayment message)    {        bus.Send(new SendPhysicalCatalouge());    }}</code></pre><p>We just extended the application without modifying any existing code. That's the power of using events. If the company decides they also want to add the customer to a list for someone to call and thank them personally, we could subscribe to the event again. If the company decided they no longer wanted to send dog treats, then we simply unsubscribe to the event.</p><p>All of this is done without redeploying the current, existing code (PaymentProcessor).</p><h2>Under The Hood</h2><p>When you add a subscription to a host, NServiceBus actually sends a message from the subscribing host to the publishing host. This informs the publishing host that the subscribing host wants a copy of the event when it is published. This gets stored in whatever persistence you previously chose: (Azure Storage, SQL, MSMQ, etc). This is true for all persistences except when you are using Azure ServiceBus or RabbitMQ because they both native pub/sub capabilities and hold onto the subscription data.</p><h2>TL;DR</h2><p>In order to allow for extensibility and prepare for future features, every command should have a corresponding event to go with it. With NServiceBus, if no one has subscribed to the event, then nothing will happen so there's no overhead of adding the events to the handler.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of my favorite things about message based systems is the natural points of extensibility you can gain. Though, you don&#39;t get it for free if you aren&#39;t setting yourself up for it.&lt;/p&gt;
    
    </summary>
    
      <category term="nservicebus" scheme="https://westerndevs.com/categories/nservicebus/"/>
    
    
  </entry>
  
</feed>
