<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/tyler_doerksen" rel="self" type="application/atom+xml"/>
  <link href="https://westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2022-04-07T14:21:18.807Z</updated>
  <id>https://westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>https://westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">Azure AD B2C Web Testing</title>
    <link href="https://westerndevs.com/_/Azure-AD-B2C-Web-Testing/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/Azure-AD-B2C-Web-Testing/</id>
    <published>2019-11-15T05:00:00.000Z</published>
    <updated>2022-04-07T14:21:18.807Z</updated>
	<author>
	
	  
	  <name>Tyler Doerksen</name>
	  <email>tylergd@outlook.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<h2>Login Azure AD B2C User with Postman</h2><p>Recently a customer asked how to load test a web application that uses Azure AD B2C (OpenIdConnect) for authentication. Even though there are lots of articles on calling Web APIs with OAuth tokens, I could not find much info on automating the <a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc" target="_blank" rel="noopener">OpenIdConnect authentication flow</a>.</p><p>I thought that if I could execute the correct requests in Postman I should be able to create an automated web/load test.</p><a id="more"></a><p><strong>Problem:</strong> Azure AD B2C login pages rely on Javascript. Postman (and most load testing frameworks like JMeter) do not run client-side Javascript.</p><p>In order to get around this, you need to &quot;fake&quot; the functionality of the Javascript code to create the subsequent requests.</p><p>Lets break down the auth flow into 5 steps, and outline how to craft the request in Postman. Specifically, I want to test a &quot;username and password&quot; type B2C user, not a &quot;social login (MS Live, Google, Facebook)&quot; type user.</p><blockquote><p>Note: This article is based on the <a href="https://github.com/Azure-Samples/active-directory-b2c-dotnetcore-webapp" target="_blank" rel="noopener">Azure AD B2C ASP.NET Core Web App Sample</a> on Github, as of Nov 2019. To setup the sample just clone the repo, execute <code>dotnet run</code>, and sign up a new user.</p></blockquote><h3>Step 1: Initial GET Request</h3><p>First, <strong>turn off auto-redirect</strong> and send an initial GET request to your site root or signin route.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http:<span class="regexp">//</span>localhost:<span class="number">5000</span><span class="regexp">/Session/</span>SignIn</span><br></pre></td></tr></table></figure><p>The response should have a <strong>Location</strong> header with the full URL and query string for the Authorize request.</p><p>Specifically, we are interested in the <strong>state</strong> and <strong>nonce</strong> values, which will be different each time.</p><h3>Step 2: AAD Authorize Request</h3><p>If you grab the <strong>Location</strong> redirect header from the previous step it should look like this</p><p><a href="https://tylerdevblog.blob.core.windows.net/content/2019-11-14-Azure-AD-B2C-Web-Testing/1.png" target="_blank" rel="noopener"><img src="https://tylerdevblog.blob.core.windows.net/content/2019-11-14-Azure-AD-B2C-Web-Testing/1.png" alt="Postman screenshot of authorize request"></a></p><p>While some information may be different based on your application, the following should be standard for OpenIdConnect</p><ul><li>response_type is &quot;code id_token&quot;</li><li>scope includes &quot;openid&quot;</li></ul><p>The <strong>response_mode</strong> is important to note, this will setup the flow to send the code back to your application using either a query string or form post mechanism.</p><p>When you execute this request you should get a <strong>200 OK</strong> response, even though the content will say that you need Javascript to continue.</p><p><img src="https://tylerdevblog.blob.core.windows.net/content/2019-11-14-Azure-AD-B2C-Web-Testing/2.png" alt="Postman screenshot of authorize result viewing the preview tab"></p><p>Don't panic. It did work as expected.</p><p>From here we need to extract some information from the body of the response, which I will outline in the next step.</p><h3>Step 3: Login Request</h3><p>To build the Login request and pass the username+password, we need some information from the body of the Authorize request.</p><p>Scroll down in Postman until you find <code>var SETTINGS = { ...</code> in a <strong>&lt;script&gt;</strong> tag.</p><p>Copy the <strong>csrf</strong> and <strong>transId</strong> values from the SETTINGS JSON object.</p><p><a href="https://tylerdevblog.blob.core.windows.net/content/2019-11-14-Azure-AD-B2C-Web-Testing/3.png" target="_blank" rel="noopener"><img src="https://tylerdevblog.blob.core.windows.net/content/2019-11-14-Azure-AD-B2C-Web-Testing/3.png" alt="Postman screenshot of SETTINGS variable highlighting csrf and transId values"></a></p><p>You can add them to the Postman environment or global variables, so in the future I will refer to these values with <strong>csrf</strong> and <strong>transId</strong></p><p>Create a new POST request with this url and header</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="symbol">https:</span>/<span class="regexp">/fabrikamb2c.b2clogin.com/fabrikamb</span>2c.onmicrosoft.com/B2C_1_SUSI/SelfAsserted?tx=<span class="template-variable">&#123;&#123;transId&#125;&#125;</span>&amp;p=B2C_1_SUSI</span><br><span class="line">X-CSRF-<span class="symbol">TOKEN:</span> <span class="template-variable">&#123;&#123;csrf&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Note that <code>B2C_1_SUSI</code> is the policy name defined in B2C for the &quot;sign-in sign up&quot; auth flow, this may be different for your application.</p><p>In the message body, set to <strong>x-www-form-urlencoded</strong> and enter the following info.</p><ul><li>request_type RESPONSE</li><li>logonIdentifier </li><li>password </li></ul><p><img src="https://tylerdevblog.blob.core.windows.net/content/2019-11-14-Azure-AD-B2C-Web-Testing/4.png" alt="Postman screenshot of form body, request_type, loginIdentifier, and password"></p><p>Note: The <strong>logonIdentifier</strong> key is configurable in the B2C policy. This may be a different key like &quot;signInName&quot; or &quot;emailAddress&quot; depending on your configuration. Fiddler is your friend here.</p><p>Once you execute this request you should receive a <strong>200 OK</strong> with the following response body:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"200"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This response also set cookies in Postman which means that other requests are authenticated.  Which is important for the next step.</p><h3>Step 4: Generate Auth code and ID Token</h3><p>This is fairly straight forward. Now that the session is authenticated we need to request the <strong>code</strong> and <strong>id_token</strong>.</p><p>Create a new request with the following URL</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>fabrikamb2c.b2clogin.com<span class="regexp">/fabrikamb2c.onmicrosoft.com/</span>B2C_1_SUSI<span class="regexp">/api/</span>CombinedSigninAndSignup<span class="regexp">/confirmed?csrf_token=&#123;&#123;csrf&#125;&#125;&amp;tx=&#123;&#123;tx&#125;&#125;&amp;p=B2C_1_SUSI</span></span><br></pre></td></tr></table></figure><p>Note: <strong>CombinedSigninAndSignup</strong> is the name of the configured flow in Azure AD B2C, if you are using a different flow you will need to change this url. Again, try it yourself, Fiddler is your friend here.</p><p>If in Step 2 you used <strong>form_post</strong> as the <strong>response_mode</strong> you should recieve a basic HTML site with a form and hidden fields <strong>state</strong>, <strong>code</strong>, <strong>id_token</strong>, and maybe a few others.</p><p><img src="https://tylerdevblog.blob.core.windows.net/content/2019-11-14-Azure-AD-B2C-Web-Testing/5.png" alt="Postman screenshot of code and id_token response"></p><p>Copy the <strong>state</strong>, <strong>code</strong>, and <strong>id_token</strong> values.</p><h3>Step 5: POST Request to site</h3><p>Finally, create a POST request to your site with the <strong>state</strong>, <strong>code</strong>, and <strong>id_token</strong> values in <strong>x-www-form-urlencoded</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="string">http:</span><span class="comment">//localhost:5000/signin-oidc</span></span><br></pre></td></tr></table></figure><p>At this point you should be able to load your site as an authenticated user.</p><p>If you are getting <strong>Correlation failed</strong> errors, the <strong>state</strong> value does not match an existing OpenIdConnect cookie, you may need to restart the process with an initial Login request to reset the proper cookies, and use the new state though the authentication process.</p><p>The good news is that once you have the B2C auth cookie, the /authorize request will return the <strong>state</strong>, <strong>code</strong>, and <strong>id_token</strong> values in form post HTML.</p><p>I hope this helps you run end-to-end web tests on your B2C site!</p><p><strong>Mileage may vary:</strong> As you can tell, B2C is a highly configurable solution, this article is based on the .NET Core B2C sample found <a href="https://github.com/Azure-Samples/active-directory-b2c-dotnetcore-webapp" target="_blank" rel="noopener">here</a>. Your app will likely have a different configuration. Use Fiddler to capture a login flow and use that as a guide.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;Login Azure AD B2C User with Postman&lt;/h2&gt;
&lt;p&gt;Recently a customer asked how to load test a web application that uses Azure AD B2C (OpenIdConnect) for authentication. Even though there are lots of articles on calling Web APIs with OAuth tokens, I could not find much info on automating the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OpenIdConnect authentication flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I thought that if I could execute the correct requests in Postman I should be able to create an automated web/load test.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Azure" scheme="https://westerndevs.com/tags/Azure/"/>
    
      <category term="AzureAD" scheme="https://westerndevs.com/tags/AzureAD/"/>
    
      <category term="Azure AD B2C" scheme="https://westerndevs.com/tags/Azure-AD-B2C/"/>
    
      <category term="Postman" scheme="https://westerndevs.com/tags/Postman/"/>
    
  </entry>
  
  <entry>
    <title type="html">Deploying Azure resources to multiple resource groups</title>
    <link href="https://westerndevs.com/Azure/Deploy-Azure-Multi-RG/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/Azure/Deploy-Azure-Multi-RG/</id>
    <published>2019-08-07T18:49:25.000Z</published>
    <updated>2022-04-07T14:21:18.807Z</updated>
	<author>
	
	  
	  <name>Tyler Doerksen</name>
	  <email>tylergd@outlook.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<h2>Advanced ARM Template Development</h2><p>Azure Resource Manager (ARM) templates provide an excellent, built-in resource configuration and deployment solution. You can find a wealth of templates for deploying anything from a <a href="https://github.com/Azure/azure-quickstart-templates/tree/master/wordpress-app-service-mysql-inapp" target="_blank" rel="noopener">Wordpress site on Azure App Service</a>, to a full <a href="https://github.com/Azure/azure-quickstart-templates/tree/master/101-hdinsight-secure-vnet" target="_blank" rel="noopener">HDInsight cluster on a private VNET</a>.</p><a id="more"></a><p>Often I work with customers that need to go beyond the basics of ARM Templates, deploying complex solutions across multiple Resource Groups, with different RBAC permissions.</p><p>So here I will share some tips-and-tricks you may find helpful when authoring complex templates.</p><h2>Deploying to multiple Azure Resource Groups</h2><p>First, a very common question, and the title of this post, deploying Azure resources across multiple Resource Groups. You can accomplish this in 3 ways:</p><ol><li>Deploy multiple times using a script or deployment engine (Azure DevOps Pipeline)</li><li>Deploy to a &quot;primary&quot; Resource Group <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-cross-resource-group-deployment" target="_blank" rel="noopener" title="Deploy Azure resources to more than one subscription or resource group">with nested templates deploying to other Resource Groups</a></li><li>Use a <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/deploy-to-subscription" target="_blank" rel="noopener" title="Create resource groups and resources at the subscription level">Subscription-level resource template</a> to define all Resource Groups and nested templates</li></ol><h3>Using a script (#1)</h3><p>This is by far the simplest solution, however it is also the most error-prone. You will have to code features that the Azure deployment system would otherwise handle for you, like dependencies, failures, and ordering. Most likely need a script, however it is best to keep it as simple as possible, adding all of the configuration into the ARM Template.</p><h3>Resource Group deploying other Resource Groups (#2)</h3><p>This is accomplished using the <code>&quot;resourceGroup&quot;</code> property which you can set on the <code>&quot;Microsoft.Resources/deployments&quot;</code> type, otherwise known as a nested template. Overall this is a minimal change if you are already using nested templates.</p><p>You can also deploy to multiple subscriptions using the <code>&quot;subscriptionId&quot;</code> property.</p><p>There are a couple of gotchas here, one is that the child Resource Groups need to exist before the nested deployment (just like how you need to define an existing RG when executing a template deployment). You can either script the creation of all of the RGs before running the deployment on the &quot;primary&quot; RG, or use the <code>&quot;Microsoft.Resources/resourceGroups&quot;</code> resource type, with the <code>dependsOn</code> property on the nested template.</p><p>Here is an example</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Microsoft.Resources/resourceGroups"</span>,</span><br><span class="line">    <span class="attr">"apiVersion"</span>: <span class="string">"2018-05-01"</span>,</span><br><span class="line">    <span class="attr">"location"</span>: <span class="string">"[parameters('location')]"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"[parameters('msiResourceGroup')]"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"msiDeployment"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Microsoft.Resources/deployments"</span>,</span><br><span class="line">    <span class="attr">"apiVersion"</span>: <span class="string">"2017-05-10"</span>,</span><br><span class="line">    <span class="attr">"resourceGroup"</span>: <span class="string">"[parameters('msiResourceGroup')]"</span>,</span><br><span class="line">    <span class="attr">"dependsOn"</span>: [</span><br><span class="line">        <span class="string">"[resourceId('Microsoft.Resources/resourceGroups/', parameters('msiResourceGroup'))]"</span></span><br><span class="line">    ],</span><br><span class="line">    "properties": &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Also, depending on how you nest templates, the <code>resourceGroup()</code> function will behave differently. If you have an embedded template <code>&quot;template&quot;: {}</code> the <code>resourceGroup()</code> function will refer to the parent RG. Alternatively, if you have a linked template <code>&quot;templateLink&quot;: { &quot;uri&quot;: &quot;...&quot;}</code> the <code>resourceGroup()</code> function will refer to the child RG. The same applies to the <code>subscription()</code> function.</p><h3>Subscription-level Templates (#3)</h3><p>This may be my preferred method of deploying complex, multi-RG solutions. Most of the concepts are the same as cross-RG deployments, however there is no &quot;primary&quot; RG. With this method you can deploy to a completely blank Subscription, which is why this is often used in combination with <a href="https://docs.microsoft.com/en-us/azure/governance/blueprints/overview" target="_blank" rel="noopener" title="Overview of the Azure Blueprints service">Azure Blueprints</a> as a &quot;Subscription Factory&quot; pattern.</p><p>To author Subscription Templates, you need to use a different template schema <code>https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#</code> and execute the deployment using the <code>New-AzDeployment</code> or <code>az deployment create</code> command.</p><p>Here is an Azure docs article for the details: <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/deploy-to-subscription" target="_blank" rel="noopener" title="Create resource groups and resources at the subscription level">Create resource groups and resources at the subscription level</a></p><p>The Subscription template will be fairly light, with most of the heavy lifting in the nested templates. There are a few functions that are not available in the Subscription Template, like <code>resourceGroup()</code> which means you can't use <code>resourceGroup().location</code> as a default deployment location.</p><p>You will need to add a <code>&quot;location&quot;</code> parameter to the template, and use the value when creating the Resource Groups.</p><p>Here is an example:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"$schema"</span>: <span class="string">"https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#"</span>,</span><br><span class="line">    <span class="attr">"contentVersion"</span>: <span class="string">"1.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"parameters"</span>: &#123; </span><br><span class="line">        <span class="attr">"hdiResourceGroup"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="attr">"defaultValue"</span>: <span class="string">"DL-HDI"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"msiResourceGroup"</span>: &#123;</span><br><span class="line">           <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">           <span class="attr">"defaultValue"</span>: <span class="string">"DL-MSI"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"location"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="attr">"defaultValue"</span>: <span class="string">"westus2"</span></span><br><span class="line">        &#125; ...</span><br><span class="line">    &#125;,</span><br><span class="line">    "variables": &#123;...&#125;,</span><br><span class="line">    "resources": &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"Microsoft.Resources/resourceGroups"</span>,</span><br><span class="line">            <span class="attr">"apiVersion"</span>: <span class="string">"2018-05-01"</span>,</span><br><span class="line">            <span class="attr">"location"</span>: <span class="string">"[parameters('location')]"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"[parameters('hdiResourceGroup')]"</span>,</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>Extra Tip: Using the <code>templateLink.uri</code> property</h2><p>I am not a big fan of using additional parameters for Nested Template URLs and SAS Tokens. You may have seen them in examples with underscores in front, like <code>&quot;_sasToken&quot;</code> or <code>&quot;_templateRoot&quot;</code></p><p>When you create a deployment using a template link URL (on <code>raw.githubusercontent.com</code> or Azure Blob Storage) you have access to a <code>templateLink</code> property on <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-functions-deployment#deployment" target="_blank" rel="noopener" title="Deployment functions for Azure Resource Manager templates">the Deployment model</a></p><p>If you are using public urls, you can just use the <code>uri()</code> function for nested templates.</p><p><code>&quot;msiTemplate&quot;: &quot;[uri(deployment().properties.templateLink.uri, 'dl-msi.json')]</code></p><p>If you want to <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-powershell-sas-token" target="_blank" rel="noopener" title="Deploy private Resource Manager template with SAS token and Azure PowerShell">secure the templates using Azure Blob Storage SAS Tokens</a>, you can use some String functions to pull the SAS token out of the TemplateLink property.</p><p>For example:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"variables": &#123;</span><br><span class="line">  "templateRoot":"[deployment().properties.templateLink.uri]",</span><br><span class="line">  "hasToken":"[not(equals(indexOf(variables('templateRoot'),'?'), -1))]",</span><br><span class="line">  "sasToken":"[if(variables('hasToken'),substring(variables('templateRoot'),indexOf(variables('templateRoot'),'?')),'')]",</span><br><span class="line">  "msiTemplate": "[concat(uri(deployment().properties.templateLink.uri, 'dl-msi.json'), variables('sasToken'))]",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that this example supports both public and access token URLs, which adds complexity with conditional statements. I tried to keep it as simple as possible.</p><p>This practice assumes that you are deploying the templates before running any deployments. This does not work with local files or inline JSON deployments.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;Advanced ARM Template Development&lt;/h2&gt;
&lt;p&gt;Azure Resource Manager (ARM) templates provide an excellent, built-in resource configuration and deployment solution. You can find a wealth of templates for deploying anything from a &lt;a href=&quot;https://github.com/Azure/azure-quickstart-templates/tree/master/wordpress-app-service-mysql-inapp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wordpress site on Azure App Service&lt;/a&gt;, to a full &lt;a href=&quot;https://github.com/Azure/azure-quickstart-templates/tree/master/101-hdinsight-secure-vnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDInsight cluster on a private VNET&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Azure" scheme="https://westerndevs.com/categories/Azure/"/>
    
    
      <category term="Azure" scheme="https://westerndevs.com/tags/Azure/"/>
    
      <category term="ARM" scheme="https://westerndevs.com/tags/ARM/"/>
    
      <category term="Configuration-as-Code" scheme="https://westerndevs.com/tags/Configuration-as-Code/"/>
    
  </entry>
  
</feed>
