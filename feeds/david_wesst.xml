<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/david_wesst" rel="self" type="application/atom+xml"/>
  <link href="https://westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2025-03-30T01:37:49.766Z</updated>
  <id>https://westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>https://westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">Defining the Problem before the Solution</title>
    <link href="https://westerndevs.com/musings/defining-problem-before-the-soltuion/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/musings/defining-problem-before-the-soltuion/</id>
    <published>2023-01-27T23:24:33.221Z</published>
    <updated>2025-03-30T01:37:49.766Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Developers love to code.</p><p>I know this, because I am a developer. My heart constantly wants to code up the solution to...well anything. What I have learned over the developing and architecting enterprise software solutions, and as the solo developer of <a href="https://github.com/davidwesst/website/" target="_blank" rel="noopener">my website project</a> is how this love of code can actually slow down and sometimes halt the development of a project or feature because we get too caught up in the tech, we don't take the time to reflect and solve the actual problem.</p><p>How do you fix this habit? Before you start coding up a solution, make sure you understand the problem you are trying to solve. Seems simple enough yet developers (like me) have the habit of jumping right into the code before they even really know what they are trying to solve.</p><p>Through my years of experience solving problems with technology, I have a couple of steps I go through to help inform my solution design for problems of a variety of problems. I apply these steps when I am trying to figure out how to integrate two enterprise systems and when I'm trying to figure out the best way to implement a new feature on my website.</p><p>The steps are the same, although the effort required will vary.</p><h1>Understanding the Problem</h1><p>And I don't mean coding problem.</p><p>I mean <em>business problem</em> or <em>real life problem</em> or whatever you want to call it, but it's not a code problem. Never have I ever been asked by a client to &quot;implement a binary tree&quot; or &quot;write a sorting algorithm for sorting an array&quot;. That's not to say those aren't problems, but they aren't <em>business problems</em>. These are technical problems, and they are fun to work on...sometimes. ðŸ˜…</p><p>Business problems are the reason clients engage with software developers. The client wants software to fix their problem, and they seem to think that software is the solution. Before you code <em>anything</em>, take a few moments to answer the following about the problem you're preparing to solve with code.</p><h2>1) Why is this a problem?</h2><p>I am not suggesting you second guess the client, but rather try and empathize with your client and really understand why their problem is what it is. This is where you can start to understand whether or not software development fits into the solution to the problem. I have come across this many times, where after revisiting the problem with the client, we found the best solution was a change in their business process rather than adding tools to it.</p><p>Let's assume, for the sake of this post, that you see where software can help play a role in solving the problem.</p><h2>2) What happens if we do nothing?</h2><p><img src="/images/2023-01-27-defining-problem-before-the-soltuion/nothing-sign.jpg" alt="An faded wooden sign that says the word &amp;quot;Nothing&amp;quot; in large blocky letters, set against a clear blue sky. Photo by Evan Buchholz on Unsplash.com"></p><p>Sounds silly, I know, but doing nothing is always an option and people do it all the time. But why would someone choose to do nothing? Because <em>the risk doesn't outweigh the reward</em>.</p><p>By answering this question with your client, you get to understand the risks associated with the problem. This will inform your solution design, as if the risks are high you may want to invest more time and effort into parts of the design than others. It will also give you context on the priority of your solution in the mind of your client.</p><h2>3) What KPIs or Success Metrics can your client define upfront?</h2><p>The last thing I try to do is try and pull any key performance indicators (KPIs) or metrics that will help define success for the solution. I find that most of the time, this is about turning qualitative terms and statements into quantitative ones.</p><p>For example, &quot;We need to process these forms faster&quot; should change to something like &quot;We should be able to process at least 100 forms an hour&quot;. See the difference?</p><p>You are adding clear, measurable, success criteria for your solution. The terms &quot;these forms&quot; and &quot;faster&quot; are too vague to build on. Maybe fast enough to you is 1 form a day, oy maybe 1 form a second. Your client is the expert in their business, so you should ask them so you can understand the goals and potential constraints your solution needs to address.</p><h1>Redefine the Problem</h1><p>I know-- your hands are itchy from not coding, but assuming you took the time to understand the problem, the next step is to confirm your new found knowledge. The easiest way to do that is by explaining it to someone else, like your client. If your client agrees you nailed it, you nailed it and now you're ready to start<em>designing</em> (not coding) your solution.</p><p>One thing that is not uncommon is that your definition of the problem may sound different than the problem your client originally described. This is <em>normal</em>, as <em>you</em> are the technology problem solving expert.</p><p>The fact that your definition of the problem differs from your client's isn't necessarily a bad thing either. Many times, I have found that through my problem definition process, the client gains a better understanding of root cause of their problem and their mind will shift from their presumed solution, to something else.</p><h1>Example: Adding Non-Blog Content to my Website</h1><p>Let me walk you though the process on something not so enterprise-level, but small scale, like a solo-developed website project.</p><p>I hit a problem planning the next release of my website where I realized that it was going to be very complicated and cumbersome to add non-blog content to my website, such as the presentation materials from Prairie Dev Con <a href="https://www.davidwesst.com/talks/concensus-in-the-chaos/" target="_blank" rel="noopener">here</a> and <a href="https://www.davidwesst.com/talks/cots-to-cloud/" target="_blank" rel="noopener">here</a>. At this point, here is what we know:</p><blockquote><ol><li>Client = Me</li><li>Problem = Adding non-blog content to the website is difficult.</li></ol></blockquote><p>Like a good developer, I immediately started down the path of designing a custom application that would automate all the things that make adding content difficult. It was very fun, but after a couple of hours, I caught myself and took a step back and applied my problem definition process.</p><p>Let's go through it, and we start by understanding the problem.</p><h2>1) Why is it a problem?</h2><p>It is a problem because I want to continue to add different types of content to the website. The whole purpose of the site is to create a central hub for all my work, almost like a portfolio, but more like a &quot;hub&quot; for all things I create a share. The website is built to handle blog posts or document style content, but when you add more complicated content that is made up of more than just an article or webpage, you need to add links to other data (like files) which is a manual process and is error prone.</p><p>In short, it is a problem because maintaining non-article data will be difficult.</p><h2>2) What happens if we do nothing to solve the problem?</h2><p>You can see in the <a href="https://www.davidwesst.com/talks" target="_blank" rel="noopener">talks page</a> I have already added some non-article data, which is all currently managed through a JSON file that the website generator pickups and creates pages for. I also needed to upload the files to a public storage host (Azure Blob Storage) and use copy and paste the links into the JSON, which I messed up a few times.</p><p>This was my first attempt at &quot;doing nothing&quot; for this problem, and it was difficult. The plan is to add the back catalogue of presentations I have done over the past 10 years (or more probably), which will make that JSON file exceptionally difficult to manage.</p><p>When you frame it in the context of risk: doing nothing will very likely result in an massive increase in the number of errors in the data.</p><h2>3) What KPIs can we use to measure solution success?</h2><p>If we look at the original problem statement &quot;Adding non-blog content to the website is difficult&quot;, we need to translate the term &quot;difficult&quot; into a quantitative one. This would give us a measure to determine how much easier it is to add new content.</p><p>Pulling from the answer to question 2, it's really managing the JSON file that makes things difficult. And so I asked myself (the client), what makes managing a JSON file so difficult? There are plenty of tools for that already. And this is where the <em>real problem</em> revealed itself.</p><p>The relationships between the data leads to errors. Maintaining these relationships manually is exceptionally difficult, and we only have two relationships so far: presentation to event, and presentation to the presentation materials.</p><h2>Redefining the Problem</h2><p>Now that we know the <em>real</em> problem, we can redefine problem:</p><blockquote><p>Problem = The process of manually managing the relationships between content types and data is exceptionally error prone and not scalable.</p></blockquote><p>This updated problem is one that will inform the solution design moving forward. If you want to get specific about the tech needed, we have a very powerful and mature tool that will help solve data relationships: a relational database. How it informs the solution, is a whole other blog post or posts, but at least now we <em>know</em> what we are trying to solve and can use our technical expertise to solve it.</p><h1>Conclusion / TL;DR;</h1><p>Before you start designing solutions or coding, take the time to clearly define the problem you are working to solve with your client (which can be you, if its your own project). To define the problem, answer these questions first:</p><ol><li>Why is it a problem?</li><li>What happens if we do nothing to solve the problem?</li><li>What KPIs can we use to measure solution success?</li></ol><p>Once you have that, redefine the problem by wording it in a way that highlights the root issue to solve, along with the way to measure success. Assuming the client agrees with your redefined problem, you are ready to start using the big, beautiful brain of yours and start solution-ing!</p><p>Thanks for playing.</p><p>~ DW</p><hr><h1>Image Credit</h1><ul><li>&quot;Nothing Sign&quot; Photo by <a href="https://unsplash.com/@vnbuchholz92?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Evan Buchholz</a> on <a href="https://unsplash.com/photos/z-Hu8pnt23s?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></li></ul>]]></content>
    
    <summary type="html">
    
      Before you create a solution, you need to understand the problem. It sounds obvious enough, yet I see developers (including myself) getting into the code and design phase before they really understand the problem they are trying to fix. These are the steps I take a properly understand a problem I am trying to solve, prior to coding or solution-ing anything.
    
    </summary>
    
      <category term="musings" scheme="https://westerndevs.com/categories/musings/"/>
    
    
      <category term="code" scheme="https://westerndevs.com/tags/code/"/>
    
      <category term="solution-architecture" scheme="https://westerndevs.com/tags/solution-architecture/"/>
    
      <category term="problem-definition" scheme="https://westerndevs.com/tags/problem-definition/"/>
    
      <category term="requirements-gathering" scheme="https://westerndevs.com/tags/requirements-gathering/"/>
    
      <category term="defining-value" scheme="https://westerndevs.com/tags/defining-value/"/>
    
  </entry>
  
  <entry>
    <title type="html">Docker Build Hangs When Adding Key with apt-key in WSL2</title>
    <link href="https://westerndevs.com/coding/problem-solution/docker-build-hangs-on-apt-key-in-wsl2/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/coding/problem-solution/docker-build-hangs-on-apt-key-in-wsl2/</id>
    <published>2023-01-12T02:43:58.005Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<h2>Problem</h2><p>When trying to add a key using <code>apt-key</code> on a Debian 11 docker image, the step seems to run infinitely.</p><p>The screenshot below highlights this problem when adding a key that is necessary to validate the mono-complete package.</p><p><img src="/images/2023-01-11-docker-build-hangs-on-apt-key-in-wsl2/console-screenshot.png" alt="A terminal window showing the steps of a docker build command along with their run times. The command that is currently being run is an apt-key command that is still running after 8078.8 seconds"></p><h3>Details</h3><p>I setup a <a href="https://containers.dev/" target="_blank" rel="noopener">DevContainer</a> to build Inky, a interactive fiction editor I like for game projects, without having to install all the build dependencies on my local machine. The Docker container build worked on my Linux machine, but would hang on my Windows 11 box, using Docker Desktop with WSL2. More specifically, it would run forever on the <code>apt-key</code> command, as specified by the <a href="https://www.mono-project.com/download/stable/#download-lin-debian" target="_blank" rel="noopener">mono install instructions</a>.</p><p>If you need an example, take a look at <a href="https://github.com/davidwesst/inky/tree/8a5809f0b5f0a480b37b759443479fa13b9cf18c" target="_blank" rel="noopener">my Inky repository fork at that specific point</a>.</p><h2>Solution</h2><p>The issue was that the command specifically references port 80 in the URL to the keyserver. In the end, I changed:</p><p><code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF</code></p><p>to</p><p><code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF</code></p><p>You can see the specifics in the <a href="https://github.com/davidwesst/inky/commit/52b9d1a2e577061ae1da735e05cf466712bb9279" target="_blank" rel="noopener">next commit in my example repository</a> in the following commit here.</p><h3>Reference</h3><p>I was put on the right track with a Stack Overflow post trying to solve a similar issue with <code>apt-key</code>. Scrolling through the answers, I found this one: <a href="https://unix.stackexchange.com/a/128704" target="_blank" rel="noopener">LINK</a></p><h3><code>apt-key</code> Deprecation Notice</h3><p>If you look at the <a href="https://manpages.debian.org/testing/apt/apt-key.8.en.html" target="_blank" rel="noopener">Debian documentation for <code>apt-key</code></a> or try running the command yourself, you might notice the deprecation warning. Underneath the hood, it runs the appropriate command in Debian 11, but will be gone after Debian 11 and Ubuntu 22.04.</p><p>Just something to note for those looking over this solution in the future.</p><h2>Conclusion / TL;DR;</h2><p>I needed to remove the port number from the keyserver URL used in my <code>apt-key</code> command.</p><p>Thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      The solution to the problem where an apt-key command seems to run forever in your docker build.
    
    </summary>
    
      <category term="coding" scheme="https://westerndevs.com/categories/coding/"/>
    
      <category term="problem-solution" scheme="https://westerndevs.com/categories/coding/problem-solution/"/>
    
    
      <category term="docker" scheme="https://westerndevs.com/tags/docker/"/>
    
      <category term="linux" scheme="https://westerndevs.com/tags/linux/"/>
    
      <category term="wsl2" scheme="https://westerndevs.com/tags/wsl2/"/>
    
      <category term="apt-key" scheme="https://westerndevs.com/tags/apt-key/"/>
    
      <category term="debian" scheme="https://westerndevs.com/tags/debian/"/>
    
      <category term="devcontainer" scheme="https://westerndevs.com/tags/devcontainer/"/>
    
  </entry>
  
  <entry>
    <title type="html">Highlight Reel for 2022</title>
    <link href="https://westerndevs.com/musings/highlight-reel-for-2022/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/musings/highlight-reel-for-2022/</id>
    <published>2023-01-05T21:47:02.098Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>While working on revamping my website and blog, I revisited a number of my old posts. Two of my favourites are the Highlight Reels for <a href="https://www.githubunwrapped.com/davidwesst" target="_blank" rel="noopener">2014</a> and <a href="https://github.com/cocobokostudios/videogamelibrary" target="_blank" rel="noopener">2015</a> as they document how I felt about myself and my accomplishments at that point in my life and career. Considering that this past year has been one of pretty extreme personal transformation, I thought it would be appropriate to document my self-reflection for 2022 in a similar style. The difference this time around will be that I focus on observed behaviours related to event and work, rather than the events themselves. More specifically, the behaviours that I like, love, and need to improve.</p><p>Don't worry-- it's not all feelings. It's data too. All my observed behaviours relate to my projects I worked on throughout the year on GitHub, which provides great insights into my contributions. I'll be using my GitHub contributions for 2022 to highlight the spots where I can identify the behaviour.</p><p>Why do this? Because I want to remind myself an others that if you feel like you are stuck, you are better off finding the source of the problem-- even if it makes you face some hard truths. By understanding the root problem, you can work at resolving it, even it it involves changing what you believe is your best approach to work.</p><h2>I <em>love to learn</em> about code</h2><p><img src="./gh2022-contributions_learning.png" alt="The GitHub contribution graph for user davidwesst, consisting of coloured squares ranging from grey for no contributions to bright green for many, for all the weeks in the year. There is a bright red, mouse-written work &amp;quot;learning&amp;quot; with an arrow pointing to a bright red circle around the squares for January and February 2022 where there appears to be a consistent amount of git activity."></p><p>At the end of 2021, I started looking at the job market and started to notice that the jobs I wanted (or thought I wanted) relied on skills that I have not been able to practice as part of my day job. Coding is no longer one of my responsibilities, only planning, designing, and providing oversight. This sparked the urge to refresh my skills and prove to myself that I <em>could</em> do for these jobs, and that all I had to do was put in the time.</p><p>And so began a series of LeetCode challenges, learning exercises, and review of various problems so that I could skill up and strengthen those coding muscles again. This is what you see in the contribution graph for the first 2-3 months of 2022.</p><p>Although this spark eventually faded as it does, I realized something about myself. I realized that it's not the code I love, but the learning about code and how to apply code in various ways. New languages, patterns and practices, solution architecture, whatever-- if it involves coding something, you can count I'll be interested.</p><h3>Lesson Learned: Burnout</h3><p>This is example highlight Q1 of 2022, yet there are plenty of other times where I spent time learning new tech. Experimenting with Go and Rust as part of my <a href="https://github.com/cocobokostudios/videogamelibrary" target="_blank" rel="noopener">VGL project</a> (more about that later). A brief experiment with Q# back in 2019 early 2020, and my continual urge to learn C/C++ along with the DevOps tools around it. These are all things that have sparked that <em>love of learning code</em> over the past few years, and each time it's the same pattern: spark of interest, dive deep into the learning, burn out because you don't know where to go with this knowledge.</p><p>Which brings me to the lesson learned: I need to direct my learning energy towards a goal. This way, when the excitement of learning something new fades I will still have a goal in my sights and continue to channel that energy towards something, rather then letting it fade out.</p><h2>I <em>love to build things</em> out of code</h2><p>At the end of the year, I looked at my <a href="https://www.githubunwrapped.com/davidwesst" target="_blank" rel="noopener">GitHub Unwrapped video</a> and was surprised by my top languages for 2022.</p><p><img src="/images/2023-01-05-highlight-reel-for-2022/gh2022-toplanguages.png" alt="A blue and white stocking is hung on an imaginary wall with snow coming down and a TypeScript logo sitting on top of it, denoting that TypeScript was my &amp;quot;top language&amp;quot; for the year, followed up by JavaScript in second, and HTML in third"></p><p>I was trying to figure out where I had written so much TypeScript, considering that for the past few months I have been living in JavaScript and HTML. Again, going back to my contribution graph I noticed another spike in activity in May.</p><p><img src="./gh2022-contributions_building.png" alt="The GitHub contribution graph made up of squares where a large number of the squares for May 2022 show contributions, along with many more from October to December. Both sections of the graph are circled in bright red, and between them is the word &amp;quot;building&amp;quot; with arrows pointing at them."></p><p>I remembered that I decided to repurpose my learning strategy, and rather than just doing LeetCode exercises and textbook studying to strengthen my atrophied coding muscles, I would study by building something. Something that <em>I</em> found useful, all while further strengthening my skills! This was the beginning of the <a href="https://github.com/cocobokostudios/videogamelibrary" target="_blank" rel="noopener">Video Game Library or &quot;VGL&quot; project</a> where I spent time building a TypeScript-React project and included some experiments with both Go and Rust to determine which language allowed me to leverage WASM (which was yet another rabbit hole I became excited about).</p><p>In the end I shelved the project because I was letting my learning drive the project. This meant anything I wanted to learn, I added scope to the project. In the end, it become too big and my original vision was lost, but the urge to build never fades, only the &quot;something&quot; that I am building.</p><p>Looking back beyond 2022-- the idea of building something has always driven me. Building a business, a video game, or a product. It doesn't matter, as long as <em>I am building it</em>.</p><p>Where it falls over is when the scope gets too large and overwhelming. This is not uncommon amongst creative types (just ask any game developer) but building something, ideally out of code, is something that drives me. If I can channel that excitement and passion on something I believe is worth it, I think I could produce and finish something I could be proud of.</p><p>I started to make this realization about myself and my drive to build things later in the year. This is why I came back to building my website that I had let fall into dormant. I wanted to channel that excitement, energy, and knowledge into something I found valuable. My website is something I have talked about improving for years and started redoing countless times. Looking back at the contribution graph, this represents a large part of the contributions for October, November, and December for 2022. This is further evidenced by the <a href="https://github.com/davidwesst/website/releases" target="_blank" rel="noopener">releases of the website</a> I published through the same time period.</p><h3>Same Drive, Different Approach</h3><p>Reflecting on my behaviour during the VGL project in May and the website work in the last quarter of the year-- the behaviour and drive was the same. I <em>loved building something</em>, yet the VGL project went onto the shelf, and the website finally managed to get some traction.</p><p>The difference was in my approach.</p><p>For the Video Game Library project, I let the excitement of learning and drive its development, which led to scope creep and dilution of the original project vision. With the website I took the time to plan and force myself to complete releases-- no matter how small.</p><p>This change in approach enabled in a longer focus on a single project. Ultimately, that kept my excitement for my website project going longer and I kept coming back to it over and over again to make small (or sometimes larger) improvements. In fact, I am continuing those improvements today as the website is far from complete-- but it's starting to represent the vision I started.</p><h2>I <em>like</em> (not love) to share</h2><p>I have tried sharing and producing content in various forms over the years, but with <a href="https://www.davidwesst.com/blog/prairie-dev-con-2022-takeaways/" target="_blank" rel="noopener">Prairie Dev Con returning in 2022</a>, I thought I would focus some energy into preparing and share content like I used to in my <a href="https://www.davidwesst.com/tags/mvp/" target="_blank" rel="noopener">Microsoft MVP days</a>. This meant lecture-style presentations and blogging.</p><p>After three live events in 2022, and almost a blog post a week since mid-October, I realized that I don't love sharing like I used to...rather I only <em>like it</em>. It's a subtle difference, but it is definitely different than it once was.</p><p>I like it because it is a <em>practical</em> way to document my work. I love learning and building things, and sharing those things is an easy way to document my progress for others-- but more importantly myself. With the blog posts, I documented things I learned for my website like the <a href="https://www.davidwesst.com/blog/open-graph-tools-and-resources-for-web-nerds/" target="_blank" rel="noopener">Open Graph protocol</a> or my <a href="https://www.davidwesst.com/blog/does-gdpr-apply-to-personal-websites/" target="_blank" rel="noopener">implementation of GDPR compliance</a>. For the presentations, I focused on what I knew and delivered two original sessions; one about <a href="https://www.davidwesst.com/talks/concensus-in-the-chaos/" target="_blank" rel="noopener">my day job and what it is means to be an IT Architect</a> and the other a <a href="http://localhost:8080/talks/cots-to-cloud/" target="_blank" rel="noopener">case study on how to do my day job</a>.</p><p>Though this experience this year, I found that I liked the process-- but didn't love it like I used to. To me, the presentations and blog posts were necessary for other outcomes. More specifically, the presentations were my ticket to touch base with other real-life speakers and tech professionals after a multi-year hiatus. The blog posts were my way of documenting, analyzing, and appreciating my own effort into my various side projects.</p><p>In the past, with the MVP program, I blogged and shared to receive validation from my peers and the MVP program itself. Those goals are not bad ones by any stretch, but since I don't have the MVP program pushing me, I need something else to help push me. That &quot;something&quot; is myself, and the outcomes I mentioned previously. Personally, I think that means I've grown quite a bit since I was an MVP and is an great example of how 2022 has been a year filled with huge change for myself and my attitude towards work.</p><p><img src="./gh2022-contributions_sharing.png" alt="The same GitHub contribution graph from the previous two pictures, except this time the mouse-drawn word &amp;quot;sharing&amp;quot; with an arrow leading from the word to a red circle which highlights the months of October, November and December of 2022 as there are a large number of green squares with varying degree of brightness denoted that there were a large number of contributions during these months."></p><h2>The <em>need</em> to improve</h2><p>I have mentioned the good things, the changed things, and now I will go over the things I need to improve (in my opinion).</p><h3>I <em>need</em> to accept my own skills and abilities</h3><p>Everybody is different and bring different value to the table. I have led a very privileged career and have had massive success in many different areas, yet for years I have rarely taken the time to appreciate those accomplishments.</p><p>Instead, I would get caught up in comparing myself to others and what I <em>couldn't</em> do, rather than what I <em>could</em> do. I would dwell on my lack of recent coding experience, rather than celebrate the time I've spent <a href="http://localhost:8080/talks/cots-to-cloud/" target="_blank" rel="noopener">migrating legacy systems into the cloud</a>. I would focus on the jobs I did not qualify for, rather than the ones that I did qualify for.</p><p>This cycle of focusing on what is missing is lose-lose situation. There will never be enough success. The grass will always be greener on the other side of fence, no matter how many times I jump over it.</p><p>I need to remind myself of this moving forward, and hopefully you can remember that for yourself as well.</p><h3>I <em>need</em> to do more, and talk less</h3><p>People refer to me as &quot;a talker&quot;, as in, I like to talk and I'm pretty good at it.</p><p>I leverage my talking skill in my day-to-day job, but when it comes what I am trying to build for myself I need to focus on doing the work rather than talking about it.</p><p>It might be clichÃ©, but &quot;talk is cheap&quot; and I need to talk less and do more. Plain and simple.</p><h2>Conclusion / TL;DR;</h2><p>In short, I identified cyclical behaviours and patterns in myself that relate to the work I put into my various side projects and personal (and professional) development. In 2022, I noticed the following about myself:</p><ol><li>I <em>love</em> to learn about code</li><li>I <em>love</em> to build things out of the things I learn (in code)</li><li>I <em>like</em> to share what I build and learn (for future me, and anyone else willing to listen)</li></ol><p>The first two are my way of channelling creativity, which is why I love them so much. Although I used to <em>love</em> sharing my knowledge, at this point in my career and life, I <em>like</em> it as it is a practical way for me to document things as I discover them and connect with others, rather than as a method to be validated and rewarded.</p><p>In terms of how I can improve:</p><ol start="4"><li>I <em>need</em> to accept my own skills and abilities</li><li>I <em>need</em> to do more and talk less (but talk about it once it is actually done)</li></ol><p>I <em>need</em> to accept and embrace my current skills and abilities, rather than focusing on what I think I am lacking. I also need to focus more on implementing my ideas rather that talking about them. Once I have something built, then I can talk more about it-- but until it's built, I need to focus my energy and excitement on the build rather than the talk.</p><p>Thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      When a new year arrives, it is a great opportunity to take a moment to reflect on where you started at the beginning of the year, and where you ended. When I look back on 2022, I noticed events reflected in my GitHub contribution graph that highlight some common cycles in my own behaviour. I want to take a moment to document this, and hopefully you can use this an example to examine your own progress and behaviour patterns that might be aiding (or impeding) your own personal and professional growth.
    
    </summary>
    
      <category term="musings" scheme="https://westerndevs.com/categories/musings/"/>
    
    
      <category term="javascript" scheme="https://westerndevs.com/tags/javascript/"/>
    
      <category term="typescript" scheme="https://westerndevs.com/tags/typescript/"/>
    
      <category term="github" scheme="https://westerndevs.com/tags/github/"/>
    
      <category term="prdc-2022" scheme="https://westerndevs.com/tags/prdc-2022/"/>
    
      <category term="mvp" scheme="https://westerndevs.com/tags/mvp/"/>
    
      <category term="code" scheme="https://westerndevs.com/tags/code/"/>
    
      <category term="burnout" scheme="https://westerndevs.com/tags/burnout/"/>
    
  </entry>
  
  <entry>
    <title type="html">Speaking at Tech Events Helps You Grow</title>
    <link href="https://westerndevs.com/_/speaking-at-tech-events-helps-you-grow/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/speaking-at-tech-events-helps-you-grow/</id>
    <published>2022-12-20T21:59:37.185Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I was lucky enough to be selected to speak at all three <a href="https://www.prairiedevcon.com" target="_blank" rel="noopener">Prairie Dev Con 2022</a> events this year, after a hiatus from speaking at live tech events. The experience of submitting and delivering a couple of session reminded me how important speaking at these sorts of events has been over the years and now they account for a large part of my career growth. On top of that, I have had many people who are entering tech ask me about my experience and wanted to share it for others who might be wondering what benefits actually are.</p><h1>You need to sell yourself and your session</h1><p>When the call for speakers opens up, you are required to submit a summary of your talk and yourself. I call this the pitch process, as your submission is your moment to convince the event organizers you are worth betting on.</p><p>It might sound stressful, but its not. It's a pretty low key process considering you are just filling out a form, and it's low stakes. If you don't make the cut then, you cam try again next time.</p><p>The point is that you need take the time to think about wht you're worth the effort, because you are definitely worth it! You know it, so now is your chance to practice.</p><h1>Connecting with Other Speakers</h1><p>Once you're accepted, you get a chance to connect with other speakers. These folks are like minded people who are willing to spend their time sharing their experiences and expertise. Sit with people you don't know and have conversations. Introduce yourself. Talk about what you do and listen to what they do. When you're done, find them on LinkedIn and remind them where you met them.</p><p>I have met some of the best people this way and have continued to stay connected beyond the conference (shout out to the <a href="https://www.westerndevs.com" target="_blank" rel="noopener">WesternDevs</a>).</p><h1>A Live Studio Audience</h1><p>As much as I appreciate livestreaming and virtualized meetings, speaking in the same room as other humans is very different and definitely develops a different set of skills and strengths. The interaction you get with your audience during and after you deliver your session is something I have not been able to replicate in the digitally transformed world we live in today, in 2022.</p><p>Just to be clear, something will go wrong...and that's okay.</p><p>No matter how much you prep, something will go wrong. A demo will fail, a slide will be out of order, a question will be asked that you don't have the answer to. The key  is in how you react and respond to the situation. These &quot;mistakes&quot; are what has made me a better presenter in my day job. It has also helped me learn to stay calm and collected when pressure is being applied.</p><p><img src="/images/2022-12-20-speaking-at-tech-events-helps-you-grow/prdc2022-audience.png" alt="&amp;quot;Five rows of tables with white table clothes with people attentively looking forward at the speaker, who is not in frame, with a PowerPoint slide on the back wall describing solution architecture at the University of Manitoba"></p><h1>Side Note: Considerations Before Committing</h1><p>As a side, I wanted to note that not all conferences are created equally.</p><p>Before you submit your session take note on what the conference does to support their speakers. A few questions to ask yourself before you commit your time and effort to a conference:</p><ul><li>Do they cover your travel and accommodation?</li><li>Does it include your admission into the conference?</li><li>Do you still own your content when your done the conference?</li></ul><p>There are no right or wrong answers to these questions, but you should consider what you're getting out of the deal when you submit sessions to a conference beyond professional development.</p><p>Just remember that the speakers are the talent that makes a conference possible. Your work is valuable, and the conference team should ensure you feel appreciated, ome way or another.</p><h1>TL;DR; / Conclusion</h1><p>Speaking at in-person events, like tech conferences and user groups, is a a great way to grow as a professional. Key benefits are:</p><ul><li>You learn promote yourself and your session through the session submission process (a.k.a. the pitch process)</li><li>Connecting with other speakers who are as passionate as you are about sharing their tech experience</li><li>Reacting to a live audience and the mistakes you make in front of them</li><li>Don't forget that your effort is valuable and before you submit a session, make sure the event makes you feel like you are getting a fair deal</li></ul><p>Thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      A large part of my career growth is tied directly to speaking at tech events like conferences and user groups. I have had many people ask me about my experience and wanted to share it for others who might be wondering what benefits actually are. 
    
    </summary>
    
    
      <category term="prairie-dev-con" scheme="https://westerndevs.com/tags/prairie-dev-con/"/>
    
      <category term="public-speaking" scheme="https://westerndevs.com/tags/public-speaking/"/>
    
      <category term="prdc" scheme="https://westerndevs.com/tags/prdc/"/>
    
      <category term="community" scheme="https://westerndevs.com/tags/community/"/>
    
      <category term="presentations" scheme="https://westerndevs.com/tags/presentations/"/>
    
      <category term="conference" scheme="https://westerndevs.com/tags/conference/"/>
    
  </entry>
  
  <entry>
    <title type="html">Docker Desktop for Linux is not the same as Docker Engine</title>
    <link href="https://westerndevs.com/_/docker-desktop-is-not-docker-engine/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/docker-desktop-is-not-docker-engine/</id>
    <published>2022-12-14T02:28:36.457Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I like Docker Desktop. It provides me an easy-to-use GUI (graphical user interface) to manage my docker images I use for various tasks for building software. I use it on Windows, and now I'll be using it on Linux as <a href="https://docs.docker.com/desktop/install/linux-install/" target="_blank" rel="noopener">it is available for some of the the more common distros</a>. Regardless of its greatness, it is not the same as <a href="https://docs.docker.com/engine/" target="_blank" rel="noopener">Docker Engine</a> running right on the metal (rather than a virtual machine, like Docker Desktop), and some of those differences caught me while testing my GitHub Workflows with <a href="https://github.com/nektos/act" target="_blank" rel="noopener">nektos/act</a>, which depends on Docker Engine to work.</p><p>To be fair, I should highlight that this is definitely a self-induced problem. The Docker Engine prerequisite is listed right on the  <a href="https://github.com/nektos/act#necessary-prerequisites-for-running-act" target="_blank" rel="noopener">README for the nektos/act</a>, and had I reviewed the documentation I probably would have saved myself the trouble. Still, in my web sleuthing for solutions to the problem I created for myself, I found others had hit similar issues, hence this post.</p><h2>The Context</h2><p>I discovered the problem when I attempted to test my GitHub Workflows locally using <a href="https://github.com/nektos/act" target="_blank" rel="noopener">nektos/act</a> which is a tool I have been using for the past few years in my software development. It does this by pulling down a docker image that simulates the GitHub runner and runs the workflow in that Docker container. I have done this a few times over, so went to one of my older projects where I set this up and pulled in the code to get it running.</p><p>Being that this was a fresh Linux install, I had not installed Docker yet. When I searched out the installation instructions for Docker on Linux, I was greeted with this announcement:</p><p><img src="/images/2022-12-13-docker-desktop-is-not-docker-engine/docker-desktop-for-linux-notice.jpeg" alt="Docker documentation page with a banner highlighting that Docker for Desktop now exists for Linux"></p><p>I have been using Docker for Desktop on Windows for a while now, and I am always happy to have software that exists across my Windows-Linux development environment ecosystem, and so I went about installing Docker for Desktop as my new Docker install.</p><p>After testing my new and shiny Docker (for Desktop) installation with the standard <code>docker run hello-world</code>, I was ready to get back to coding!</p><p>Or so I thought...</p><h2>The Problem (and Triaging it)</h2><p>This is where things went sideways and the problem appeared. I ran <code>act -j build</code> to my run my <code>build job</code> in a  workflow I know has worked previously and was greeted with the following error message:</p><blockquote><p>Cannot connect to Docker daemon. Is the docker daemon running?</p></blockquote><p>Not what I expected, considering I just tested out my fresh Docker install, but I tried pulling the image down myself with the <code>docker pull</code> command just to make sure things didn't break, and everything worked as expected.</p><p>With a bit of web sleuthing, I came across others who <a href="https://github.com/nektos/act/issues/1051" target="_blank" rel="noopener">reported the same issue</a> and noticed this link in particular:</p><blockquote><p>You could check if <code>/var/run</code> actually contains <code>docker.sock</code></p></blockquote><p>When checking this, I found that <code>docker.sock</code> was in fact NOT present. I immediate associated it with the Docker for Desktop installation, as that was the only new variable from my previous development environment.</p><h2>The Root Cause (Probably)</h2><p>This is part where I waste my time trying to figure out why did Docker for Desktop not install docker.sock. Rather that figuring out how to install the docker components that are missing.</p><p>Although I am no Docker expert, my understanding is that Docker for Desktop runs docker inside a VM rather than on the system itself, unlike Docker Engine. In fact, you can see a separate <a href="https://docs.docker.com/engine/context/working-with-contexts/" target="_blank" rel="noopener">Docker context</a> when you list out the contexts.</p><p><img src="./docker-context-output.jpeg" alt="Screenshot of a Linux terminal showing the Docker CLI output for docker context list command that lists the default docker context, which is the Docker Engine context, and the Docker for Desktop context for the user">.</p><p><strong>It should be noted</strong> that default context for Docker was listed, even though I had not installed Docker Engine yet. This lead me to believe something I installed was incorrectly configured, but really it was the fact that I had not installed the software I needed.</p><h2>The Solution / TL;DR;</h2><p>As technical as I made it sound, the real problem was that I was missing software. Specifically I was missing &quot;docker&quot; on my Linux machine, even though I installed Docker for Desktop. ðŸ˜Š</p><p>Well, if the problem is that I am missing software, then the solution must be to install the software. That software is <a href="https://docs.docker.com/engine/" target="_blank" rel="noopener">Docker Engine</a>, which sets up the Docker API right on the machine rather than though a VM like Docker for Desktop (as far as I understand it).</p><p>In conclusion, install the software dependencies the tools If you're running a Linux distro, as great as Docker for Desktop is-- you may still want to install Docker Engine. You can always switch contexts on where to run your own docker commands with the <code>docker context set</code> command, but it's worth double checking to make sure the tool you are using supports Docker for Desktop on Linux platforms.</p><p>Thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      With Docker for Desktop available for Linux (which I like), I managed to get myself confused regarding its role on my Linux-based development machine. This post clarifies a few things I discovered while triaging an issue I had trying to test my GitHub Workflows locally.
    
    </summary>
    
    
      <category term="docker" scheme="https://westerndevs.com/tags/docker/"/>
    
      <category term="linux" scheme="https://westerndevs.com/tags/linux/"/>
    
      <category term="github workflow" scheme="https://westerndevs.com/tags/github-workflow/"/>
    
      <category term="docker engine" scheme="https://westerndevs.com/tags/docker-engine/"/>
    
      <category term="docker desktop" scheme="https://westerndevs.com/tags/docker-desktop/"/>
    
  </entry>
  
  <entry>
    <title type="html">Prairie Dev Con 2022 Takeaways</title>
    <link href="https://westerndevs.com/_/prairie-dev-con-2022-takeaways/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/prairie-dev-con-2022-takeaways/</id>
    <published>2022-12-07T20:37:20.777Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Until I walked through the doors of the Prairie Dev Con in 2022, I did not realize how much I missed it. The talented speakers that come together always bring fresh ideas to my mind and give me pause to think about my own efforts and how I can learn from their experience. Although not a complete list, these ideas the ones that stood out the most from Prairie Dev Con 2022.</p><h2>API First Design (<a href="https://www.linkedin.com/in/joelhebert/" target="_blank" rel="noopener">JoÃ«l HÃ©bert</a>)</h2><p>Joel did a great session about API first design, which was a very dense session, but he delivered the content in a way that was very approachable and allowed me to think of the benefits of doing API first design with tools like <a href="https://swagger.io" target="_blank" rel="noopener">Swagger.io</a> and <a href="https://www.openapis.org" target="_blank" rel="noopener">OpenAPI</a>.</p><p>It was great seeing the value of these tools, and hearing about the patterns and practices experienced API developers like Joel use to implement consistent and secure APIs.</p><h2>Developer Velocity Index (<a href="https://www.linkedin.com/in/ajenns/" target="_blank" rel="noopener">AJ Enns</a>)</h2><p>I went into this session thinking I was going to be fascinated with the subject, but that the concept would apply only to development leads or possibly coders, rather than an architect like me..</p><p>I was wrong.</p><p>The <a href="https://azure.microsoft.com/en-us/solutions/developer-velocity/" target="_blank" rel="noopener">Developer Velocity Index (DVI)</a>, is a way for any team (even if it is a one-person team, like me on my side projects) can help frame up and scope the abstract problem of figuring out how do to deliver more value.</p><p>I plan on applying the DVI to my side project adventures, self-development, and my enterprise day-job efforts as soon as possible.</p><h2>End to End Testing (<a href="https://www.davepaquette.com" target="_blank" rel="noopener">Dave Paquette</a> and <a href="https://www.linkedin.com/in/lavanya-mohan/" target="_blank" rel="noopener">Lavanya Mohan</a>)</h2><p>Although Dave and Lavanya delivered two completely separate sessions related to testing, the content they delivered worked together in a very interesting way.</p><p>Dave demonstrated and discussed <a href="https://playwright.dev" target="_blank" rel="noopener">Playwright</a> and end-to-end testing framework that resolved or improved the problems we commonly see with end-to-end testing. Lavanya demonstrated how someone <em>should apply</em> proper code management and development techniques when creating test code using a framework, like Playwright.</p><p>For me, together they demonstrated why the test recorded features of end-to-end frameworks is not the &quot;best approach&quot; to creating tests, but rather it is only the first step.</p><p>I feel that these ideas will be seeping into both my day-job and side projects in the very near future.</p><h2>Cloud Security (<a href="https://www.linkedin.com/in/adam-krieger-7a087048/" target="_blank" rel="noopener">Adam Krieger</a>)</h2><p>Adam closed the Prairie Dev Con season with his session, and managed to leave me with a lot of ideas and helped me identify gaps that I have been living with as a developer and as a solution architect.</p><p>Ensuring that developers are security-aware is something I didn't realize I have been missing in my own skills, but also should be looking for in the implementation of my solution designs.</p><h2>A Deal is a Deal (<a href="https://www.rodpaddock.com" target="_blank" rel="noopener">Rod Paddock</a>)</h2><p>Rod delivered a keynote in both Regina and Winnipeg, and each time I walked away with a positive outlook on my own professional and personal growth, but also with the reminder: A Deal Is A Deal.</p><p>Sounds simple enough, but in the past I have frequently found myself regretting decisions or deals I had made with myself or others. But, a deal is a deal, and even if you don't like it or regret it, you need to take a moment to learn from it and ensure the next deal is one you won't regret.</p><h2>TL;DR; / Conclusion</h2><p>In short, there were a lot of good ideas at Prairie Dev Con 2022. These are the ones that stood out to me the most:</p><ul><li>Consider API First Design with tools like Swagger.io and OpenAPI (JoÃ«l HÃ©bert)</li><li>The Developer Velocity Index (DVI) is NOT just for developers, but for anyone looking to deliver value (AJ Enns)</li><li>End-to-End Testing is a thing that requires effort, but has major benefits with the right tools and patterns in practice (Dave Paquette and Lavanya Mohan)</li><li>Cloud Developers need not should be security-aware and not just depend others (Adam Krieger)</li><li>A deal is a deal, and if you don't like it, learn from it so the next one is better (Rod Paddock)</li></ul><p>Thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      The talented speakers that come together for Prairie Dev Con always bring fresh ideas to my mind and give me pause to think about my own efforts and how I can learn from their experience. Although not a complete list, these ideas the ones that stood out the most from Prairie Dev Con 2022.
    
    </summary>
    
    
      <category term="prairie-dev-con" scheme="https://westerndevs.com/tags/prairie-dev-con/"/>
    
      <category term="prdc-2022" scheme="https://westerndevs.com/tags/prdc-2022/"/>
    
      <category term="api-design" scheme="https://westerndevs.com/tags/api-design/"/>
    
      <category term="open-api" scheme="https://westerndevs.com/tags/open-api/"/>
    
      <category term="developer-velocity-index" scheme="https://westerndevs.com/tags/developer-velocity-index/"/>
    
      <category term="e2e-testing" scheme="https://westerndevs.com/tags/e2e-testing/"/>
    
      <category term="playwright" scheme="https://westerndevs.com/tags/playwright/"/>
    
      <category term="adiad" scheme="https://westerndevs.com/tags/adiad/"/>
    
  </entry>
  
  <entry>
    <title type="html">Open Graph Tools and Resources for Web Nerds (Like Me)</title>
    <link href="https://westerndevs.com/_/open-graph-tools-and-resources-for-web-nerds/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/open-graph-tools-and-resources-for-web-nerds/</id>
    <published>2022-12-01T09:18:34.509Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>The <a href="https://ogp.me" target="_blank" rel="noopener">Open Graph Protocol (OGP)</a> is an open standard that allows web pages to have deeper integration with a social graph, such as Facebook, Twitter, or LinkedIn. You know those cards that appear on Twitter or LinkedIn with tailored images for a link to a blog post? That is OGP in action.</p><p>With <a href="https://github.com/davidwesst/website/releases" target="_blank" rel="noopener">my recent adventures with reimplementing my website</a>, I wanted to leverage this on pages and posts, specifically with LinkedIn and it took a little more research to get it working right. So, for the web nerds like me looking to implement OGP on their projects, I wanted to share the resources I found useful to hopefully save them some time in finding the right resources.</p><h2><a href="https://ogp.me" target="_blank" rel="noopener"><code>ogp.me</code></a></h2><p>I am calling this the specification, or &quot;spec&quot;, and it probably the most important resource. The best part about this site is how approachable it is.</p><p>There are code snippets, explanations of all the object types and their properties, and its own list of tools (although they differ from the ones I am including on this list).</p><p>If you take one thing away from this post for your work with OGP, take this one.</p><h3>Reference</h3><ul><li><a href="https://ogp.me" target="_blank" rel="noopener">Open Graph protocol page</a></li></ul><h2>LinkedIn (and Facebook) Post Inspectors</h2><p>Both Facebook and LinkedIn provide a developer tool to analyze and verify your implemenation of OGP and has the added feature of busting whatever the social networks have cached for the pages you share.</p><p>These tools for triaging or assesing publically shared pages, but not so much when it comes to local development. That is where the next tool comes into play.</p><h3>Reference</h3><ul><li><a href="https://www.linkedin.com/post-inspector/" target="_blank" rel="noopener">LinkedIn Post Inspector</a></li><li><a href="https://developers.facebook.com/tools/debug/" target="_blank" rel="noopener">Facebook Sharing Debugger</a></li></ul><h2>Social Share Preview Web Extension</h2><p>Available for both <a href="https://chrome.google.com/webstore/detail/social-share-preview/ggnikicjfklimmffbkhknndafpdlabib" target="_blank" rel="noopener">Chromium Browsers</a> and <a href="https://addons.mozilla.org/en-US/firefox/addon/social-share-preview/" target="_blank" rel="noopener">Firefox</a>, this web extension allows you simulate what should appears for any page loaded up in your browser.</p><p>This tool saved me from having to continually publish the content to a public location for the post inspector, but note that it is just a <em>simulation</em> of what the tool thinks it should appear. It does not replace post inspector or proper testing on the site you are looking to share to.</p><p><img src="/images/2022-11-30-open-graph-tools-and-resources-for-web-nerds/social-share-preview-example.png" alt="A window displaying a preview of what a LinkedIn post of the 'How much is enough documentation?' blog post on davidwesst.com"></p><h3>Reference</h3><ul><li><a href="https://chrome.google.com/webstore/detail/social-share-preview/ggnikicjfklimmffbkhknndafpdlabib" target="_blank" rel="noopener">Chrome Extension</a></li><li><a href="https://addons.mozilla.org/en-US/firefox/addon/social-share-preview/" target="_blank" rel="noopener">Firefox Add-On</a></li></ul><h2>Browser Dev Tools (Obviously)</h2><p>If you are reading the post, then this one is an obvious one-- but sometimes we (like me) get so caught up on exploring new ways to solve my problem, we forget about the obvious ones.</p><p>OGP tags live in the <code>&lt;head&gt;</code> of your HTML page. If you are unsure why things are not working, make sure you run your browser dev tools of choice and check the <code>&lt;head&gt;</code> of the document and make sure the OGP tags you are expecting appear where they should be.</p><p>It seems simple, but depending on what tool, engine, or framework to output HTML, you may be surprised what shows up.</p><h3>Reference</h3><p>Open this post on a desktop browser and press the key combination <code>Ctrl + Shift + i</code> and you should see your browser dev tools pop open for the site.</p><h2>Conclusion / TL;DR;</h2><p>Read the <a href="https://ogp.me" target="_blank" rel="noopener">aproachable spec document</a>. That is the most important part takeaway from my OGP implemenation. It is very approachable and gives you a strong foundation to work from as you use other tools to triage and assess your implementation.</p><p>These are the tools I used to implement LinkedIn support, along with my browser dev tools.</p><ul><li><a href="https://www.linkedin.com/post-inspector/" target="_blank" rel="noopener">LinkedIn Post Inspector</a></li><li><a href="https://developers.facebook.com/tools/debug/" target="_blank" rel="noopener">Facebook Sharing Debugger</a></li><li><a href="https://chrome.google.com/webstore/detail/social-share-preview/ggnikicjfklimmffbkhknndafpdlabib" target="_blank" rel="noopener">Chrome Extension</a></li><li><a href="https://addons.mozilla.org/en-US/firefox/addon/social-share-preview/" target="_blank" rel="noopener">Firefox Add-On</a></li><li><code>Ctrl + Shift + i</code> on your desktop browser</li></ul><p>Thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      A compilation of tools and resources I used to implemented the Open Graph Protocol (OGP) for my website to make posts and pages more engaging on LinkedIn and other social networks.
    
    </summary>
    
    
      <category term="twitter" scheme="https://westerndevs.com/tags/twitter/"/>
    
      <category term="open graph" scheme="https://westerndevs.com/tags/open-graph/"/>
    
      <category term="web development" scheme="https://westerndevs.com/tags/web-development/"/>
    
      <category term="seo" scheme="https://westerndevs.com/tags/seo/"/>
    
      <category term="linkedin" scheme="https://westerndevs.com/tags/linkedin/"/>
    
      <category term="facebook" scheme="https://westerndevs.com/tags/facebook/"/>
    
  </entry>
  
  <entry>
    <title type="html">Does GDPR Apply to Personal Websites?</title>
    <link href="https://westerndevs.com/_/does-gdpr-apply-to-personal-websites/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/does-gdpr-apply-to-personal-websites/</id>
    <published>2022-11-19T01:10:07.083Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>A few weeks back, I <a href="https://github.com/davidwesst/website/releases/tag/v10.0.1" target="_blank" rel="noopener">released v10.0.1 of my website</a>. I use a static site generator to generate all the pages and publish it out into the internet for all the world to read. In that release, I added <a href="https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview" target="_blank" rel="noopener">Application Insights</a> to provide me with some performance data, but also to get a bit of usage data (for those willing to share it).</p><p>What I found odd was that all the links and articles I came across seemed to talk about things at a high-level (i.e. defining GDPR) or assumed I was working at a large scale (i.e. enterprise software), but nothing small projects like my personal website.</p><p>Still, I managed to draw some of my own conclusions on how to handle GDPR for my personal website and wanted to document them somewhere.</p><h2>DISCLAIMER: This is not legal advice</h2><p>I am not a lawyer, so this is just an opinion from a developer. As a rule of thumb, I avoid taking legal advice from random folks on the internet. If you take advice from this article, take that bit and keep it.</p><p>I hope others (like you) use this post to draw your own conclusions or how you want to proceed with your own plan for handling GDPR.</p><p>But if you want <em>real</em> advice. Get a lawyer and talk to them.</p><h2>Short Answer: Yes</h2><p>Yes, it does apply to your personal website <strong>if</strong> are tracking information about your users <strong>and</strong> you are developing your own website or application.</p><h3>Developing Your Own Website or Application</h3><p>I mean developing as it coding it, publishing that code, and hosting it somewhere like Microsoft Azure or GitHub Pages. If you are publishing your own code, GDPR may apply to you.</p><p>If you are using a third party tool or platform, like Facebook or LinkedIn to host your blog posts-- you appear to be in the clear. When you use a third-party platform, the <em>platform</em>, not you, is responsible for GDPR compliance.</p><p>Even if you think you are clear of GDPR responsibility, make sure that you trust your chosen platform to comply to GDPR and other regulatory bodies out there, as your site depends on it.</p><h3>Tracking Information</h3><p>The GDPR is all about protecting personal information and giving control back to people navigating the internet. GDPR is not the only set of laws in play, as <a href="https://leginfo.legislature.ca.gov/faces/billTextClient.xhtml?bill_id=201720180AB375" target="_blank" rel="noopener">California</a>, <a href="https://iapp.org/media/pdf/resource_center/Brazilian_General_Data_Protection_Law.pdf" target="_blank" rel="noopener">Brazil</a>, and <a href="https://www.priv.gc.ca/en/privacy-topics/privacy-laws-in-canada/the-personal-information-protection-and-electronic-documents-act-pipeda" target="_blank" rel="noopener">Canada</a> have their own versions of similar legislation, but many of these laws seem to have been inspired by GDPR and why I tend to focus on it.</p><p>At the personal website level, you need to consider whether or not you are collecting personal information from your users. This includes things like <a href="https://gdpr.eu/eu-gdpr-personal-data/" target="_blank" rel="noopener">IP addresses or cookie identifiers</a>.</p><p>If you are NOT collecting information like that, you are good to go! Just remember that services like Google Analytics or Disqus Comments use personally identifiable information to operate, so if you have decided to include one of those services on your site then you need to think about GDPR compliance.</p><h2>My Solution Highlights</h2><p>I concluded the GDPR-like laws apply to my personal website if I want to do any kind of usage tracking and understand how users are using my site.. This means it needs to be an opt-in policy that gives the user the option to do just that, <em>opt-in</em>.</p><p><img src="/images/2022-11-18-does-gdpr-apply-to-personal-websites/my-gdpr-dialogue.png" alt="A screenshot of the davidwesst.com blog page with a dialogue docked to the bottom with the statement: 'This site uses cookies to track usage in order to help improve the user experience. By clicking &amp;quot;Accept&amp;quot;, you consent to our use of cookies.' along with gray 'Accept' and 'Decline' buttons, and a blue link with the text 'Privacy Statement'"></p><p>The dialogue above is the only real visual evidence on the site now. As simple as that looks, a lot of thought went into it prior to implementation. Rather than doing a complete code review, I figured I would share the highlights.</p><h3>Understanding My Tools</h3><p>My default would just be to include something like Google Analytics, and be done with it, but with <a href="https://techstory.in/eu-declares-google-analytics-illegal-heres-why/" target="_blank" rel="noopener">GA being made illegal in the EU</a> and more countries creating their own GDPR-like legislation, I thought I would stay away from it and try something different.</p><p>I chose <a href="https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview" target="_blank" rel="noopener">Application Insights</a> and took the time to learn how <a href="https://learn.microsoft.com/en-us/azure/azure-monitor/app/data-retention-privacy" target="_blank" rel="noopener">it handles data privacy and retention</a> and how the <a href="https://learn.microsoft.com/en-us/azure/azure-monitor/app/javascript?tabs=snippet#cookie-handling" target="_blank" rel="noopener">JavaScript SDK uses cookies</a>.</p><p>Regardless of what you choose for your analytics or tracking tool, the important part is that you understand how the tools are GDPR compliant and how the tracking technology works.</p><h3>Opt-In for Cookies</h3><p>You've seen million of them already, but those cookie banners have purpose. The <a href="https://gdpr.eu/cookies/" target="_blank" rel="noopener">GDPR website outlines the requirements</a> around using cookies, and many tools use them. The important thing is that <em>you</em> know how your website works, along with all the dependencies <em>you choose</em> to include.</p><p>In my case, the cookie banner enables cookies in Application Insights, which in turn enable usage data collection, only if they click &quot;Accept&quot;.</p><h3>Transparency</h3><p>This last point is less technical, and more about design. I am designing with transparency in the front of my mind. I added a <a href="https://www.davidwesst.com/about" target="_blank" rel="noopener">privacy statement to my about page</a> to explain the &quot;why&quot; around using Application Insights, and will share more specifics and document them accordingly.</p><h2>Conclusion / TL;DR;</h2><p>GDPR and the various GDPR-like laws definitely apply to you and your personal website or app project if you are building the code yourself, assuming you want to track information about your users.</p><p>The short story on this is that you need to draw your own conclusions and take responsibility for what you include in your website. If you are developing something to share outward into the world, you need to take the time to understand how the various tools you are included (such as Google Analytics or Application Insights) as well as the requirements for compliance.</p><h3>GDPR Resources</h3><p>Two resources I found useful in explaining GDPR requirements are provided on the site <a href="https://gdpr.eu/" target="_blank" rel="noopener">GDPR.eu</a>. If you are looking for more information, I definitely suggest checking out these links:</p><ul><li><a href="https://gdpr.eu/cookies/" target="_blank" rel="noopener">Cookies, the GDPR, and the ePrivacy Directive</a></li><li><a href="https://gdpr.eu/compliance/" target="_blank" rel="noopener">Everything you need to know about GDPR compliance</a></li></ul><p>Thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      While rebuilding my personal website in 2022, I wanted to know how or if GDPR applied to my little side project. My internet sleuthing did not bring up any clear and cut answers, but I put together some thoughts that might help others answer it for themselves.
    
    </summary>
    
    
      <category term="website" scheme="https://westerndevs.com/tags/website/"/>
    
      <category term="gdpr" scheme="https://westerndevs.com/tags/gdpr/"/>
    
      <category term="ldgp" scheme="https://westerndevs.com/tags/ldgp/"/>
    
      <category term="ccpa" scheme="https://westerndevs.com/tags/ccpa/"/>
    
      <category term="privacy" scheme="https://westerndevs.com/tags/privacy/"/>
    
      <category term="cookies" scheme="https://westerndevs.com/tags/cookies/"/>
    
  </entry>
  
  <entry>
    <title type="html">How much is enough documentation?</title>
    <link href="https://westerndevs.com/_/how-much-is-enough-documentation/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/how-much-is-enough-documentation/</id>
    <published>2022-11-10T22:00:00.000Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Documentation takes a lot of different forms. Decision requests, diagrams, and just plain ol' word filled documents. Historically speaking, I have been guilty of being that developer that loathed documentation, waited until the last minute, and usually produced something that won't provide much help when it is actually needed.</p><p>Being a solution architect during the day, I wanted to apply some of my new found skills (and appreciation) for documentation while <a href="https://github.com/davidwesst/website/blob/main/CHANGELOG.md" target="_blank" rel="noopener">working on v10 of my website</a>. Ultimately, documentation is <em>necessary</em>, even on personal projects. If I think back to my own experience with my own projects, they can end up sitting on the shelve for a long time. When go back to revisit it, other than analyzing my own code (on prototype stuff) can be a serious time sink to even get things in a running state without any decent documentation.</p><h2>What do you <em>need</em>?</h2><p>And I do mean <em>needed</em> not <em>wanted</em>. Everyone <em>wants</em> documentation of all kinds, but what does an audience of one (i.e., your future self) <em>need</em> to get the project back off the shelve and into working order?</p><p>Like any good solution architect, I started to read, learn, and figure out what others consider &quot;enough documentation&quot; or &quot;good documentation&quot;. I also spent time defining the problem I needed the documentation to solve, and landed on the following docs being &quot;enough&quot;.</p><h3>The README</h3><p>It might seem obvious but, I have read enough of my own empty or default <code>README.md</code> files to know that this is easily the most important piece of documentation you write. Without it, the project will require code analysis to figure out what it <em>actually</em> is, and that is never good.</p><p>There are a lot of great examples <code>README.md</code> files on GitHub to look at, but I would suggest you start simple if you're just getting off the ground. My take was to include system requirements and the steps to setup, build, and start the project for the developer.</p><p>When searching for info on this, I really like <a href="https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/" target="_blank" rel="noopener">this article from Hillary Nyakundi</a> provided a great &quot;how-to&quot; on making a good <code>README.md</code>.</p><h3>Decisions (also known as ADs or Architecture Decisions)</h3><p>This is one I picked up from my day job being a Solution Architect in a large enterprise. Decisions you make along the way need to be documented, even if it is only for yourself.</p><p>The idea is to document decisions that will have a long term impact on your project. Decided to document decisions? That can be documented. Decided that you only want your project to run on Azure? That can be documented. Decided to design your solution around a specific pattern? That can be documented.</p><p>You can document as many or as few decisions as you want. In the case of my website project, <a href="https://github.com/davidwesst/website/tree/main/docs/decisions" target="_blank" rel="noopener">I documented a few core decisions early on</a> because I wanted to remember <em>why I built it this way</em>. Even though I am adding content regularly and tweaking features frequently enough, I could shelve the development at any point.</p><p>In terms of format, there are plenty of ways to document decisions and why it is important, but I am not going to spend time explaining that. Instead I would recommend reading <a href="https://adr.github.io" target="_blank" rel="noopener">how GitHub documents decisions</a>. That is where I started, and they have a great breakdown of the different format and tools that can support you, if you're inclined to get into the tooling.</p><p>For the website, I <a href="https://github.com/davidwesst/website/blob/main/docs/decisions/0001-decisions-with-madr.md" target="_blank" rel="noopener">decided to use MADR as my decision document template</a> and documented &quot;why&quot; I chose it as the first decision for the project and <a href="https://github.com/davidwesst/website/blob/main/docs/decisions/0001-decisions-with-madr.md" target="_blank" rel="noopener">documented it</a>.</p><h3>Diagrams</h3><p>The last bit of documentation I feel I <em>need</em> (although it is not as important as the previous two) are solution diagrams.</p><p>Just like decision documentation, this is something that can take a lot of different forms. Personally, I am not a huge fan of diving into UML or any of the traditional diagram styles. I like diagrams that present well to multiple audiences and explain <em>one thing</em> well.</p><p><img src="/images/2022-11-10-how-much-is-enough-documentation/website-solution-overview.png" alt="A solution diagram example from the website project"></p><p>The above diagram is one I created to explain how I setup all the pieces inside of Microsoft Azure to host my website. The diagram answers the question &quot;What is necessary to host your application?&quot; which goes beyond the code in my case.</p><p>There is no real format that I applied here, but I scoped it to focus on the Azure Infrastructure and service I needed to rebuild the solution in Azure from scratch. Almost like a high-level guide to explain all the different pieces that need to be setup and handled.</p><p>In regards to diagram formatting, although I did not use it in this example, the <a href="https://c4model.com" target="_blank" rel="noopener">C4 model</a> is something I have been messing around with to describe systems and projects in my day job. If you need a little direction, or are struggling to figure out &quot;how to diagram&quot; your project, it might be worth a look.</p><h3>Notable Mention: <code>CHANGELOG.md</code></h3><p>I wanted to highlight this, but also point out that it is definitely not required. A <code>CHANGELOG.md</code> allows you to document your progress.</p><p>I based <a href="https://github.com/davidwesst/website/blob/main/CHANGELOG.md" target="_blank" rel="noopener">my CHANGELOG file</a> off of the format described at <a href="https://keepachangelog.com/en/1.0.0/" target="_blank" rel="noopener">keepachangelog.com</a>. It forced me to take a bit of time (really, like 15 minutes or so) to reflect on my effort and appreciate the effort I have put into the project. Plus, it tells the story of how the project has evolved over time; which, just like the decisions, provides context on how things got to where they are.</p><h2>Conclusion / TL;DR;</h2><p>In short, the documentation I <em>need</em> (not <em>want</em>) consists of the following, with the following priority:</p><ol><li><code>README.md</code> (that at least says how to setup, build, and run the project)</li><li>Decisions (using <a href="https://adr.github.io" target="_blank" rel="noopener">MADR</a> or some other format of your choosing)</li><li>Solution Diagrams (that answer <em>one specific question</em>)</li><li><code>CHANGELOG.md</code> (not required, but provides more context and forces you to appreciate the effort you have put into your project)</li></ol><p>Thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      Documentation is important, but it takes a lot of time and if you are a solo developer, what documentation to you really need? Still, good docs can provide the context I forget after putting a project on the shelf, or explains how to fix something in older code I use, but haven&#39;t touched in a long time. So how much is &#39;enough&#39; documentation and what types of documentation do I need to invest in give my future self the the best value for the effort I put in?
    
    </summary>
    
    
      <category term="madr" scheme="https://westerndevs.com/tags/madr/"/>
    
      <category term="c4-model" scheme="https://westerndevs.com/tags/c4-model/"/>
    
      <category term="decision" scheme="https://westerndevs.com/tags/decision/"/>
    
      <category term="diagram" scheme="https://westerndevs.com/tags/diagram/"/>
    
      <category term="documentation" scheme="https://westerndevs.com/tags/documentation/"/>
    
      <category term="README.md" scheme="https://westerndevs.com/tags/README-md/"/>
    
      <category term="CONTRIBUTING.md" scheme="https://westerndevs.com/tags/CONTRIBUTING-md/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to fork (a repo) like a boss!</title>
    <link href="https://westerndevs.com/_/how-to-fork-like-a-boss/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/_/how-to-fork-like-a-boss/</id>
    <published>2022-11-02T21:00:00.000Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>My name is David Wesst and today I am going to teach you to fork like a boss! No special tools. No special creams. Just your clicking finger and a bit of confidence to use your coding skills.</p><p>Before I forked, I thought I forking wasn't for me. I thought, I am too old to fork, but man oh man was I wrong. But then came the day where a library I was using was missing a critical feature, and a quick search through the repository issues found <a href="https://github.com/solution-loisir/markdown-it-eleventy-img/issues/8" target="_blank" rel="noopener">that others were looking for that feature too</a>.</p><p><img src="/images/2022-11-02-how-to-fork-like-a-boss/gh-issue.jpg" alt="Screenshot of GitHub issue with title &amp;quot;Question about whether the relative path is base on current working dir or current md file?&amp;quot; with the first entry in the issue describing how their blog posts have images in the same directory as the post"></p><h2>Choosing to Fork</h2><p>This is the moment where I got to choose. I had a options for my next move:</p><ol><li>Add to the thread and hope for the best</li><li>Built my own solution from scratch</li><li>Take a look through the code and see if its forkable</li></ol><p>The first choice makes sense if you don't have the knowledge or skills.</p><p>The second choice feels easier, but that is only your fear of contributing getting the best of you. When you add to your codebase, you are adding more code to support in the long run and all comes with that.</p><p>The last choice might make you nervous of you haven't forked in a long time, but I assure you, if you can code, you can fork. So browse through the code and see if you can find the spot your forking can help.</p><h2>Defining Forkability</h2><p>This is very subjective, but when it comes to forkable projects for me, I look for the following things, in this order:</p><ol><li><code>CONTRIBUTING.md</code>, to give me a breakdown on how the community wants people to contribute</li><li>Tests, so I know I can mess around with the code without breaking existing functionality</li><li>Existing Issues and Pull Requests (PRs) to see what users, developers, and project owners are currently working on and their focus.</li></ol><p>In my recent contribution to <a href="https://github.com/solution-loisir/markdown-it-eleventy-img" target="_blank" rel="noopener">markdown-it-eleventy-img</a>, I went through the repo trying to figure out whether or not it was forkable. Although I didn't find a <code>CONTRIBUTING.md</code> (<a href="https://github.blog/2012-09-17-contributing-guidelines/" target="_blank" rel="noopener">but that could be a future PR</a>) but I found a set of tests, and even though I forgot in the moment, there was an existing issue from someone else about the same issue I was hoping to contribute!</p><p>And with that, I knew this project was forkable. So I pulled out my finger and clicked &quot;FORK&quot; like boss and coded up my solution, and <a href="https://github.com/solution-loisir/markdown-it-eleventy-img/pull/9" target="_blank" rel="noopener">submitted a PR</a>.</p><h2>Fork with Confidence and Respect</h2><p>If you look through the <a href="https://github.com/solution-loisir/markdown-it-eleventy-img/pull/9" target="_blank" rel="noopener">thread of the PR</a> you'll see that my solution went through a few iterations and changes after receiving feedback from the project owner.</p><p>This was a great conversation and it lead to a better solution implementation than my original submission, which made me exceptionally happy (and proud) of my contribution.</p><p>Even though it is volunteer labour, remember that both you AND the project owner/admins are choosing to spend their time reviewing and analyzing your work. Everyone is involved in the fork is investing time, and everyone should be treated with respect and as a professional.</p><p>Plusâ€”this is a great opportunity to level-up your development soft skills. Enjoy yourself, but be timely and respect the investment everyone is making.</p><h2>Conclusion / TL;DR;</h2><p>To fork like a boss, all you need is a project ready for contributions, some confidence, and respect for others on the project:</p><ol><li>A <code>CONTRIBUTING.md</code></li><li>Tests</li><li>Existing Issues and Pull Requests (PRs)</li></ol><p>Thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      Everyone thinks about forking. It is a natural thing, yet how do get the job done and fork? I used to ask myself the same thing, until I learned these pro-tips and forked like a boss.
    
    </summary>
    
    
      <category term="github" scheme="https://westerndevs.com/tags/github/"/>
    
      <category term="pull requests" scheme="https://westerndevs.com/tags/pull-requests/"/>
    
      <category term="contribution" scheme="https://westerndevs.com/tags/contribution/"/>
    
      <category term="open source" scheme="https://westerndevs.com/tags/open-source/"/>
    
  </entry>
  
  <entry>
    <title type="html">I Can Teach Your Dog Quantum Physics</title>
    <link href="https://westerndevs.com/finding-inspiration/i-can-teach-your-dog-quantum-physics/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/finding-inspiration/i-can-teach-your-dog-quantum-physics/</id>
    <published>2021-06-28T16:00:00.000Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><img src="/images/2021-06-28-i-can-teach-your-dog-quantum-physics/physics_dog_resized.jpg" alt="A hand holding the book How to teach physics to your dog by Chad Orzel"></p><p>Okay fine. Maybe I can't teach your dog quantum physics, but this book taught <em>me</em> something about quantum so that's something, right?</p><p>I finished <em>How to Teach Physics to your Dog</em> by Chad Orzel as I continue to dive deeper into my quest in understanding in quantum computing. This book was recommended by Mark Russonovich at the end of his Microsoft Ignite 2019 talked called <em>Quantum computing: Computing with a probabilistic universe with Mark Russinovich</em> at Microsoft Ignite 2019. You can watch at this link at the Microsoft Ignite site: <a href="https://myignite.microsoft.com/archives/IG19-BRK4011" target="_blank" rel="noopener">LINK</a>.</p><p>In short, it's pretty good.</p><p>It's solid way to understand some of the core of quantum mechanics that make quantum computing possible. It goes deeper just defining concepts like superposition, entanglement, and QED, but it also gets into a bit of the math and the history side of the concepts.</p><h1>The Highlights</h1><p>Now, I'm no book scientist and as such, I'm not going to worry about trying to put together a fancy book review that rates my experience. Instead, I thought it would be a good idea to highlight the parts of the book that made it a good read, and you can figure out the rest on your own.</p><h2>Dog Conversations</h2><p>Orzel jumps between explaining a concept traditionally to having a conversation with his dog (hense the title).</p><p>The style is kinda silly, which is something of a fresh take for explaining science, but it works surprisingly well.</p><p>Outside of helping to simplify some of the more complicated or mind bending points of quantum mechanics, or lightens the mood and makes it less of a &quot;physics book&quot; and more of a &quot;story about physics&quot;.</p><h2>A story that teaches you about physics</h2><p>I think the best part about the book is how it builds on each topic, chapter by chapter.</p><p>It reads like a story, where each chapter prepares you for the next until you finally hit the big wrap up on entanglement and QED, or quantum electrodynamics, along with a chapter on what to look for when people are trying to abuse quantum physics to push their own non-scientific agenda of making a quick buck.</p><h2>Mathy, but not too mathy</h2><p>Physics is math. That's just how it is, and this book does a great job of introducing us to the math, but not dwelling or depending on it. I appreciated that, especially near the end of the book where ideas like QED start to really bend your mind.</p><p>I appreciated how they didn't shy away from it and used the conversations with the dog to help bring it down to a &quot;not too mathy&quot; way. Keeps the reader in check and reminds them that this isn't just philosophy, but <em>real science</em>.</p><h1>TL;DR; / Conclusion</h1><p>This book set me up with a solid foundation on the physics that make quantum computing possible, which was the whole reason for reading it. It's &quot;learning through story and conversation&quot; approach that doesn't shy away from maths (but doesn't dwell on them) makes it an easier read than one might think.</p><p>Recommended for those interesting in understanding the <em>science</em> (not magic) of quantum physics that make quantum computing a real life thing.</p>]]></content>
    
    <summary type="html">
    
      It&#39;s true! I read a book about it and everything. Let me breakdown the highlights of this book that does a pretty good job of explaining the physics behind quantum computing.
    
    </summary>
    
      <category term="finding inspiration" scheme="https://westerndevs.com/categories/finding-inspiration/"/>
    
    
      <category term="quantum computing" scheme="https://westerndevs.com/tags/quantum-computing/"/>
    
      <category term="quantum physics" scheme="https://westerndevs.com/tags/quantum-physics/"/>
    
      <category term="finding inspiration" scheme="https://westerndevs.com/tags/finding-inspiration/"/>
    
      <category term="book" scheme="https://westerndevs.com/tags/book/"/>
    
      <category term="Mark Russinovich" scheme="https://westerndevs.com/tags/Mark-Russinovich/"/>
    
  </entry>
  
  <entry>
    <title type="html">What Value Does Making Content Bring to Me? (not a typo)</title>
    <link href="https://westerndevs.com/inner-monologue/what-value-does-making-content-bring-to-me/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/inner-monologue/what-value-does-making-content-bring-to-me/</id>
    <published>2021-06-17T16:00:00.000Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><img src="/images/2021-06-17-what-value-does-making-content-bring-to-me/rob-schreckhise-8zdEgWg5JAA-unsplash_altered.jpg" alt="A gorilla with in a pose that denotes they're thinking"></p><p>That's not to say the content should provide value to the reader, also known as you, but it's still a very important question to answer.</p><p>With the reboot of my blog and getting back into social media, this has become the first question I ask myself before writing a post, or planning a livestream, or scripting a video, or even saving a link. It's selfish, but if the post isn't valuable to me, then why would it be valuable to you?</p><p>In my previous professional life, the content I created with exclusively for the readers and for Microsoft. I made content, they awarded me an MVP award with some great perks, an awesome community, but it lead to an unforeseen need to be validated and rewarded for my content,  which I wrote about recently <a href="https://www.davidwesst.com/blog/my-secret-addiction-to-likes/" target="_blank" rel="noopener">LINK</a>. It was a good deal and made sense at the time. But that was then, and this is now. Now when I look at creating content, first person it needs to bring value to is me.</p><h2>So why bother blogging at all?</h2><p>I didn't.</p><p>At least I didn't for a few years and just left my blog and website to be a development science experiment. Reason being, I didn't know the value the blog could bring me.</p><p>I'll leave the numerous self-driven arguments and half baked reasons I tried to give myself out of it, but ultimately it didn't make a lot of sense to keep on blogging.</p><p>Until it did again.</p><h2>Sharing my Self-Retrospectives</h2><p>Even though I stopped blogging and stopped doing my annual self retrospectives (like this one from 2014: <a href="https://www.davidwesst.com/blog/highlight-reel-for-2014/" target="_blank" rel="noopener">LINK</a> and this one from 2015 <a href="https://www.davidwesst.com/blog/highlight-reel-for-2015/" target="_blank" rel="noopener">LINK</a>) the self-reflective process never stopped. Rather, my the self-retrospectives evolved into smaller chunks of thought that I would or share with trusted friends or family to get opinions on the deep thoughts from this inner monologue I maintained.</p><p>Then a pandemic started and I was unable to share, at least not with the frequency and ease that I used to.</p><h2>The Absence of Validation</h2><p><img src="/images/2021-06-17-what-value-does-making-content-bring-to-me/drahomir-posteby-mach-__Hw50q04FI-unsplash_updated.jpg" alt="Black and white image of the word 'yes' drawn in sand"></p><p>It's the inability to share the way I was used to got me thinking differently. I started to realize that sharing was my way to get approval and a pat on the head for an idea. I didn't need to take action with my website or my social media presence, because I already had a bunch of people tell me it was a good idea. Why bother doing it when I already got it validated?</p><p>And so I tested my theory and stopped sharing my ideas on social media. Not long after that, I stopped sharing my ideas with my trusted friends virtually (unless I had something to show, which I never did) not because I didn't want to, but because I needed to learn to do this for myself.</p><p><em>For me.</em></p><p>This means I am the first validator of the idea, and ultimately gives me that first bit of validation to approve my time investment into it. Of course the catch is, if I want futher validation, I suppose I should validate my own feelings first to make sure I'm right.</p><h2>If its valuable to me, then it'll be valuable to someone else (TL;DR;)</h2><p>Time is my most important asset. For that reason, the first question I ask the question: &quot;What value does <idea> it bring to me?&quot; as I need to decide if the idea is worth investing my time on it. If I don't see the value in it, the idea might not be bad, but it's just not for me. My time is better spent on an idea, post, or science experiment that I think will bring me value first.</p><p>Because if it brings me value, then there it will probably bring value to someone else out there on the internet.</p><p>Thanks for playing.</p><p>~ DW</p><hr><h5>Photo Credit</h5><p>Photo by <a href="https://unsplash.com/@robschreckhise?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Rob Schreckhise</a> on <a href="https://unsplash.com/s/photos/thinking?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p><p>Photo by <a href="https://unsplash.com/@postebymach?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">DrahomÃ­r Posteby-Mach</a> on <a href="https://unsplash.com/s/photos/approved?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p>]]></content>
    
    <summary type="html">
    
      I realize it&#39;s a selfish question, but if the post isn&#39;t valuable to me then why would it be valuable to you?
    
    </summary>
    
      <category term="inner monologue" scheme="https://westerndevs.com/categories/inner-monologue/"/>
    
    
      <category term="blog" scheme="https://westerndevs.com/tags/blog/"/>
    
      <category term="defining value" scheme="https://westerndevs.com/tags/defining-value/"/>
    
      <category term="content creation" scheme="https://westerndevs.com/tags/content-creation/"/>
    
      <category term="self-retrospective" scheme="https://westerndevs.com/tags/self-retrospective/"/>
    
      <category term="validation" scheme="https://westerndevs.com/tags/validation/"/>
    
  </entry>
  
  <entry>
    <title type="html">My Secret Addiction to Likes</title>
    <link href="https://westerndevs.com/inner-monologue/my-secret-addiction-to-likes/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/inner-monologue/my-secret-addiction-to-likes/</id>
    <published>2021-06-03T16:00:00.000Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I decided to take a month off of contributing to social media. More specifically Twitter and YouTube, but Facebook and Instagram as well. That single month has turned into just over three months now, and I learned a few things about myself and how I think my return to <em>some</em> social media will be a good thing.</p><h1>Where it started...</h1><p>I'm a millennial. Which means, I've been doing social media since before it was called &quot;social media&quot;. I got onto Twitter very early on, I needed a university email address to create my Facebook account, and YouTube...well, it wasn't owned by Google.</p><p>The point being is that social media has been a part of my entire adult life. I actually can't rememberof a time in my professional life that someone wasn't telling me that my social media presence or &quot;brand&quot; had the ability to propel my career forward, if I played my tweets just right.</p><p>It is probably that every job I had in tech was surrounded by marketing people, but I developed this bizarre obsession over &quot;my brand&quot; or &quot;persona&quot; that I portrayed to the online world. For years I have gone through exercises about how to build followers, read the analytics, all on a mission to appear professional.</p><p>It wasn't a fruitless venture. I'm pretty sure my blog and Twitter account secured my many MVP awards. What I wasn't expecting was the dependency this obsession created, which was this weird addiction to &quot;likes&quot;.</p><h1>&quot;Likes&quot; = Validation</h1><p>You see, the MVP program was how I validated doing all the extra work on keeping up with technology. I love tech, I really really do, but had someone not pointed me in the direction of building a brand around JavaScript and/or Front-End Web Dev, I probably never would have gone down that road. As I built up that persona, th more likes and engagement I got, and the more likely the MVP Program would notice me. Eventually they did notice me and <em>TA-DA</em>, I became a Microsoft MVP.</p><p>The MVP Award was where I think this all started. It was a reward for being so...professional or knowledgable or hard-working in my B-time or whatever. I loved it and somehow rationalized that people get directly rewarded for their side efforts. I suppose that is sort of true, depending on how to define the term &quot;reward&quot;, but in general I don't think it's as big of a perk as the MVP Award and all the benefits that come with it.</p><p>As the years went by, I started to expect that sort of reward for my effort and equated with validation and started to <em>need</em> it in order feel like I was succeeding as a technology professional.</p><p>Then, I decided to let go of the MVP Award and chase my dreams.</p><h1>Validation Withdrawl</h1><p>This is the part in the story where I started chase my game development hopes and dreams. It started out well, but not long after doing some game development streams on Mixer (yeah, remember Mixer?) and some blog posts, I started to feel uneasy about my ability and my &quot;success&quot; as a technology professional.</p><p>Building an expertise takes time and effort. It takes even more time and effort when you day job doesn't care or need that expertise, and you have a new family to take care of. I kept getting caught up on how long it would take for me to &quot;become a professional&quot; or whatever. I kept checking my different social media analytics and started focusing a lot of time and energy on making game development content rather than actual games.</p><p>I resarched marketing techniques, read social media management guides, and started learning how to promote my &quot;dream game&quot; before I had even really done anything other than a couple of game jams. I checked the &quot;likes&quot; multiple times a day and tried to figure out how to maximize the reach of my content, continuing to get in the way of building an actual commercial video game, but searching (somewhat desperately) for that acknowledgement through likes, thumbs up, post engagement, and views.</p><p>It kept coming and going, but it would always block my progress on whatever project I was working on. My game jams were about the content I produced, not the game itself. After a jam, I would share and talk about &quot;the next steps&quot; and all the planning I was doing instead of <em>actually doing</em> something with the project. No matter how much time I spent, there wasn't enough to both &quot;share to the community&quot; and build a game.</p><p>It was an old habit that needed to go away, and so earlier this year I just stopped sharing on social media.</p><p>That break was supposed last about month. That was about three months ago.</p><h1>Realization and Return</h1><p>In my three month break, I looked inward and thought about what I've done with social media over...well, most of my professional life. I've decided that it's time to start figuring out how or if I should return to the social networks, but I'm taking it slow and flipping the script on my social media shares.</p><p>Rather than measuring my successwith likes and views, I'm looking at the social platforms as ways for me to grow personally and professionally. I'm asking myself two questions:</p><ol><li>What does my contribution do for the reader/viewer/you?</li><li>What does my contribution do for me?</li></ol><p>Does v7 of my website coincide with this? It sure does.</p><p>I'll elaborate further another day, but just writing this post helps me reflect on my own story. It feels honest and healthy to write all this down and I'm creating content for both  <em>me</em> and the readers. I share not only because I crave validation, but also think that my sharing my experience might help others learn something.</p><p>This is site and blog is the start. It has a purpose for both my personal and professional growth and so it is alive again.</p><h2>Aren't you just going to obsess over the analytics again?</h2><p>I don't think so. I have analytics enabled on the site, but I have purpose for this: to learn. More specifically, I want to learn about what analytics can teach me about my audience. It's not just about views and the likes, a but what the readers (and players) are telling me through their engagement.</p><p>Plus-- whether I like it or not, analytics plays a critical role in decision making these days. I see it in my day job, and I see it in game development. Either way, it's probably having some literacy around the different kinds of analytics out there can't hurt me.</p><p>The trick is not wrapping success around the metrics.</p><h1>Next Steps</h1><p>I think it's going to be YouTube and other video content like livestreams. I really enjoy making my little movies, and with the pandemic in full swing, it's hampered my ability to practice my presentation skills at conferences with an audience. Between platforms like YouTube, LinkedIn, Twitch , and even Discord, there are some good opportunities to sharpen my video presentation skills.</p><p>If I'm being honest, I can't see Twitter or Facebook making a comeback in my day-to-day life. Possibly a place to echo posts or share activity, but I'm just not feeling the &quot;hot takes&quot; nature that comes with Twitter and Facebook. As for Instagram...I'm still undecided. I don't have a lot of pictures to share behind the scenes, but again-- never say never.</p><p>Regardless of where I share content, the website will be hub and the question will the same: What does sharing do to help me grow personally and/or professionally?</p><p>Thanks for playing. ~ DW</p><hr><p><em>Photo Credit</em></p><p>Photo by <a href="https://unsplash.com/@neonbrand?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">NeONBRAND</a> on <a href="https://unsplash.com/s/photos/likes?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p>]]></content>
    
    <summary type="html">
    
      I decided to take a month off of contributing to social media. More specifically Twitter and YouTube, but Facebook and Instagram as well. That single month has turned into just over three months now, and I learned a few things about myself and how I think my return to some social media will be a good thing.
    
    </summary>
    
      <category term="inner monologue" scheme="https://westerndevs.com/categories/inner-monologue/"/>
    
    
      <category term="social media" scheme="https://westerndevs.com/tags/social-media/"/>
    
      <category term="twitter" scheme="https://westerndevs.com/tags/twitter/"/>
    
      <category term="youtube" scheme="https://westerndevs.com/tags/youtube/"/>
    
      <category term="analytics" scheme="https://westerndevs.com/tags/analytics/"/>
    
      <category term="acceptance" scheme="https://westerndevs.com/tags/acceptance/"/>
    
  </entry>
  
  <entry>
    <title type="html">Lucky Number v7</title>
    <link href="https://westerndevs.com/technology/inner-monologue/lucky-number-v7/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/technology/inner-monologue/lucky-number-v7/</id>
    <published>2021-05-24T16:00:00.000Z</published>
    <updated>2025-03-30T01:37:49.765Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I fixed up my blog-website-thingy again. I'm calling this v7, although I'm pretty sure there are a few incarnations of the site that were lost early on in my years, but v7 seems about right for the content I'm sharing here. In any case-- I thought I'd share the &quot;why&quot; around the new website revamp and how I think a project like this is just what I need.</p><h1>Why did you stop blogging, anyway?</h1><p>I've been thinking a lot about that lately, and the reason I stopped was that I didn't have a reason to do it anymore.</p><p>I started blogging because I was told that it was one of the things I <em>should be doing</em> and had to <em>keep doing</em> to get (and stay) in the Microsoft MVP program as a Front End Web Development MVP (formerly known as the Internet Explorer MVP program). Once I decided to leave the Front End Web Dev stuff behind to make way for my passion for video games and stuff, why should I bother blogging?</p><p>And so that was that. I stopped blogging and made way for all the video game development effort I could muster! Sure, there was the occassional link to a YouTube video or a little tech problem that I've solved on the side, but for the most part, it was dead.</p><p>0 commercial games later, and a few false restarts I'm back on the blog and the website...again.</p><h1>So why bother starting it up again?</h1><p>Well, I stopped because I gave up my reason to do so. I am starting because I found a reason: I want to share and learn.</p><p>Let's break that down a little:</p><h2>&quot;I want to&quot;</h2><p>That is probably the most important part of the whole reason. I want to make content. I'm feeling the need to do it. Maybe its habit or nostalgia for the days where creating content was part of keeping my professional status, either way it's something I like to do and the blog is a lightweight and easy way to do that.</p><h2>&quot;share&quot;</h2><p>Thinking back to when I blogged regularly as part of my MVP contribution, I didn't realize how much of a platform I had to share stories, advice, how-tos and whatever else. It really was quite the reach, and quite a privilege. My experience and work has changed a lot, but there is a still a lot to share for others.</p><p>The big difference this time around is that I'm not worried about whether or not it fits &quot;my career goals&quot; or my &quot;professional focus&quot;.  It's really about me putting my thoughts together in a cohesive way that might help someone reflect and make a decision. In getting v7 of the website ready <em>I was that &quot;someone&quot;</em> and looking over all my old posts confirmed that this is a good idea.</p><p>But, even if you (or me) don't find my posts helpful in the long or short term, that's okay. It feels good to get a post out there. There's a gratifying feeling that comes with putting a post together that helps me, and that makes it worth it too.</p><h2>&quot;learn&quot;</h2><p>As clichÃ© as it sounds, I'm a life long learner. Content creation and management is something that keeps coming up in my side projects, and yet I've never taken the time to properly learn and understand how to do it. It's not about the marketing side, but rather what it means to contribute, learn, and engage with your audience as a solo content creator.</p><p>Plus, there are these weird &quot;little problems&quot; I've always had in my years of creating content with with MVP program. I'm hoping that with fresh eyes and new experiences with me, I can tackle these problems with a different perspective that I have in the past.</p><p>Ultimately, there is a lot to unpack here-- but assuming I keep this going, I'll continue to share what I learn, which will lead to more sharing and then more learning and...you see how this is good thing? :)</p><h2>The Point</h2><p>Scott Hanselman shared this idea <a href="https://www.hanselman.com/blog/do-they-deserve-the-gift-of-your-keystrokes" target="_blank" rel="noopener">(reference)</a> of valuing your effort in helping through your keystrokes (I'm greatly paraphrasing the idea). I spend time helping others one-on-one, but it's usually the same stories, ideas, thought patterns, and so on that people find helpful. This website and blog is my chance to share new things and old with a fresh perspective, one that is owned and driven by my values and ideas and not those of my employer or community.</p><p>Maybe its selfish to think this is a good idea, but that's fine because it's my website, my blog, and my idea that I think is good.</p><p>And if I think it's good, then that's a start.</p><p>Thanks for playing. ~ DW</p>]]></content>
    
    <summary type="html">
    
      I fixed up my blog-website-thingy again. I&#39;m calling this v7, although I&#39;m pretty sure there are a few incarnations of the site that were lost early on in my years, but v7 seems about right for the content I&#39;m sharing here. In any case-- I thought I&#39;d share the &quot;why&quot; around the new website revamp and how I think a project like this is just what I need.
    
    </summary>
    
      <category term="technology" scheme="https://westerndevs.com/categories/technology/"/>
    
      <category term="inner monologue" scheme="https://westerndevs.com/categories/technology/inner-monologue/"/>
    
    
      <category term="blog" scheme="https://westerndevs.com/tags/blog/"/>
    
      <category term="website" scheme="https://westerndevs.com/tags/website/"/>
    
      <category term="graphql" scheme="https://westerndevs.com/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title type="html">From Travis CI to GitHub Actions (and GitHub Pages)</title>
    <link href="https://westerndevs.com/devops/from-travis-ci-to-github-actions/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/devops/from-travis-ci-to-github-actions/</id>
    <published>2020-11-10T23:36:00.000Z</published>
    <updated>2025-03-30T01:37:49.764Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>We recently migrated the continuous integration and deployment workflow for the Western Devs website from Travis CI to GitHub Actions. These are the steps I followed to get it done.</p><a id="more"></a><p>Travis CI <a href="https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing" target="_blank" rel="noopener">announced a new pricing model</a> that <em>could</em> have impact on open source projects that are using Travis for continuous integration and/or deployment. For static websites, like the <a href="https://westerndevs.com">Western Devs website</a> or <a href="https://www.davidwesst.com" target="_blank" rel="noopener">personal website</a>, this could result in getting some unforeseen costs. With that in mind, we decided to take the plunge an migrate away from Travis and over to <a href="https://docs.github.com/en/free-pro-team@latest/actions" target="_blank" rel="noopener">GitHub Actions</a> as they provide CI and CD workflows free for open source projects.</p><h2>TL;DR; -- Just show me the code</h2><p>Fine. <a href="https://github.com/westerndevs/western-devs-website/blob/master/.github/workflows/ci-cd.yml" target="_blank" rel="noopener">Here is is</a>. It is open source after all.</p><p>But just to be clear, this isn't a tutorial on how to code this up, rather its a walkthrough on what it took to get our <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> based static site from Travis to GitHub Actions.</p><h2>Start with Mapping Out Your Workflow</h2><p>And I mean <em>workflow</em> and not just the build.</p><p>For the Western Devs, our workflow goes like this:</p><ol><li>Commit a change to the code (i.e. a new blog post)</li><li>Build the website</li><li>If master branch build is successful, deploy the build to production</li><li>Notify the Western Devs of the build result in Slack</li></ol><p>GitHub workflow provides everything we need to do this, and I'll walk you through the code, which you can see for yourself in <a href="https://github.com/westerndevs/western-devs-website/blob/master/.github/workflows/ci-cd.yml" target="_blank" rel="noopener">here in our GitHub repo</a>.</p><h3>1. Commit a change to the code (i.e. a new blog post)</h3><p>This is our trigger to start the workflow. That is represented by the <code>on</code> section of the YAML. In our case, we want to trigger the workflow every time there is a pull request created for the master branch, a push to the master branch (i.e. a merge), or a push to any other feature (ft) or hotfix (hf) branches.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">CI/CD</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ft/*</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hf/*</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>Now we have a workflow that will trigger when we want to. Next, we need to actually build the website.</p><h3>2. Build the website</h3><p>Our build is exceptionally simple-- just generate the site, and if the generation is successful, the build was successful. To do this, we create a <code>build</code> job that handles the work.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># checkout the source code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span> <span class="comment"># setup the environment</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">12</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># setup dependencies</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span> <span class="comment"># run the build command</span></span><br></pre></td></tr></table></figure><p>The first two steps are using GitHub Actions provided by GitHub themselves. This pulls our source code and the sets up the Node environment that we need to build the website. Once that is done, we  <code>run</code> steps to run shell commands to install our project specific dependendies and run the build script itself.</p><p>The scripts have been defined in our <a href="https://github.com/westerndevs/western-devs-website/blob/master/package.json" target="_blank" rel="noopener">project <code>package.json</code> file</a> and are used by the developers to build the site locally as well.</p><h3>3. If master branch build is successful, deploy the build to production</h3><p>If we are talking about the master branch, we want to do a deployment if it is successful. For this step, we added a conditional expression using the <code>github</code> context that is provided to all actions. You can learn more about context and expressions for GitHub Actions in the <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#about-contexts-and-expressions" target="_blank" rel="noopener">GitHub Docs here</a>.</p><p>You might also see that were using an encrypted secret using the <code>secret.GITHUB_TOKEN</code> expression. All repositories have this feature in the settings section of the repo, and you can learn more about <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets" target="_blank" rel="noopener">creating encrypted secrets for a repository here</a> in the GitHub docs.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">'refs/heads/master'</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">cname:</span> <span class="string">westerndevs.com</span></span><br><span class="line">    <span class="attr">commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4>BONUS: Free hosting with GitHub Pages</h4><p>In our case, our deployment target is <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> which provides free hosting and SSL certificates for open source static sites sites like ours.</p><p>We decided to take this opportunity to consilate everything under the GitHub umbrella because it saved us a couple of bucks, and now everything we need to manage the site is in one spot rather than spread across multiple cloud services.</p><h3>4. Notify the Western Devs of the build result in Slack</h3><p>Originally, we had forgotten this step and started to feel it right away. So an issue was created and I put a solution in place in about 15 minutes, thanks to someone else doing all the heavy lifting and publishing their work to the <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">GitHub Actions Marketplace</a>.</p><p>Slack supports incoming webhooks, even for for free workspaces. I set that up by following the <a href="https://api.slack.com/messaging/webhooks" target="_blank" rel="noopener">Slack documentation</a>, created another secret in our repository and voila, we were back in business wih the notifications.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Notify</span> <span class="string">Slack</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">8398a7/action-slack@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">$&#123;&#123;</span> <span class="string">job.status</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">fields:</span> <span class="string">repo,message,commit,author,action,eventName,ref,workflow,job,took</span> <span class="comment"># selectable (default: repo,message)</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">SLACK_WEBHOOK_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SLACK_WEBHOOK_URL</span> <span class="string">&#125;&#125;</span> <span class="comment"># required</span></span><br></pre></td></tr></table></figure><h2>Conclusion</h2><p>The combination of GitHub Actions and GitHub Pages provides every developer with the opportunity to get a taste of DevOps while actually producing something they can show off to their peers and community. Travis CI is, and will continue to be, a great CI/CD solution for developers...but if you're looking for a one-stop-shop for source control, workflow, and hosting. You can't really go wrong with GitHub.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We recently migrated the continuous integration and deployment workflow for the Western Devs website from Travis CI to GitHub Actions. These are the steps I followed to get it done.&lt;/p&gt;
    
    </summary>
    
      <category term="devops" scheme="https://westerndevs.com/categories/devops/"/>
    
    
      <category term="github actions" scheme="https://westerndevs.com/tags/github-actions/"/>
    
      <category term="github workflow" scheme="https://westerndevs.com/tags/github-workflow/"/>
    
      <category term="travis ci" scheme="https://westerndevs.com/tags/travis-ci/"/>
    
      <category term="continuous integration" scheme="https://westerndevs.com/tags/continuous-integration/"/>
    
      <category term="continuous deployment" scheme="https://westerndevs.com/tags/continuous-deployment/"/>
    
  </entry>
  
  <entry>
    <title type="html">New Artwork and a Complete Rewrite...ish | Out the Door Devlog</title>
    <link href="https://westerndevs.com/devlog/out-the-door/out-the-door-post-jam-update/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/devlog/out-the-door/out-the-door-post-jam-update/</id>
    <published>2020-11-09T14:00:00.000Z</published>
    <updated>2025-03-30T01:37:49.764Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>My effort continues on Out the Door with some new artwork, a rewrite (of sorts) to fix the build process, which has led to something of a self-driven code review.</p><a id="more"></a><iframe width="560" height="315" src="https://www.youtube.com/embed/LLXO-6Pretk" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2>Wanna Play?</h2><p>Sure you do! Head over to my <a href="https://davidwesst.itch.io/out-the-door" target="_blank" rel="noopener">davidwesst.itch.io/out-the-door</a> to give it a whirl in your browser (no install needed) or Windows! It's totally free, and feedback is always appreciated.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My effort continues on Out the Door with some new artwork, a rewrite (of sorts) to fix the build process, which has led to something of a self-driven code review.&lt;/p&gt;
    
    </summary>
    
      <category term="devlog" scheme="https://westerndevs.com/categories/devlog/"/>
    
      <category term="out the door" scheme="https://westerndevs.com/categories/devlog/out-the-door/"/>
    
    
      <category term="game development" scheme="https://westerndevs.com/tags/game-development/"/>
    
      <category term="gamejam" scheme="https://westerndevs.com/tags/gamejam/"/>
    
      <category term="ludum dare" scheme="https://westerndevs.com/tags/ludum-dare/"/>
    
      <category term="ludum dare 47" scheme="https://westerndevs.com/tags/ludum-dare-47/"/>
    
      <category term="game design" scheme="https://westerndevs.com/tags/game-design/"/>
    
      <category term="out the door" scheme="https://westerndevs.com/tags/out-the-door/"/>
    
  </entry>
  
  <entry>
    <title type="html">A Solo Gamejam Experience | A Ludum Dare 47 Story</title>
    <link href="https://westerndevs.com/devlog/a-solo-gamejam-experience-ld47/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/devlog/a-solo-gamejam-experience-ld47/</id>
    <published>2020-10-23T13:00:00.000Z</published>
    <updated>2025-03-30T01:37:49.764Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I submitted a game to <a href="https://ldjam.com/events/ludum-dare/47/out-the-door" target="_blank" rel="noopener">Ludum Dare 47</a> I call <a href="https://davidwesst.itch.io/out-the-door" target="_blank" rel="noopener">Out the Door (Play Now in your Browser)</a> as a solo, amateur game developer with a non-gamedev day job, family responsibilities, and household to maintain.</p><!-- more --><iframe width="560" height="315" src="https://www.youtube.com/embed/AFnGMS24qvg" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      Wonder what it takes to be a solo amateur game developer in a global gamejam? DW summarizes his Ludum Dare 47 experience in this video.
    
    </summary>
    
      <category term="devlog" scheme="https://westerndevs.com/categories/devlog/"/>
    
    
      <category term="gamedev" scheme="https://westerndevs.com/tags/gamedev/"/>
    
      <category term="game development" scheme="https://westerndevs.com/tags/game-development/"/>
    
      <category term="devlog" scheme="https://westerndevs.com/tags/devlog/"/>
    
      <category term="gamejam" scheme="https://westerndevs.com/tags/gamejam/"/>
    
      <category term="ludum dare" scheme="https://westerndevs.com/tags/ludum-dare/"/>
    
      <category term="github gameoff" scheme="https://westerndevs.com/tags/github-gameoff/"/>
    
  </entry>
  
  <entry>
    <title type="html">Game Portfolio Self Evaluation (in prep for Ludum Dare 47)</title>
    <link href="https://westerndevs.com/devlog/game-portfolio-review-2020/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/devlog/game-portfolio-review-2020/</id>
    <published>2020-09-18T13:00:00.000Z</published>
    <updated>2025-03-30T01:37:49.764Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Ludum Dare 47, a weekend long global gamejam, is coming up in a few weeks. In order to prep for the event, I decided to take the time for review and reflect on my game portfolio to see what I learning objective and goals I can set for myself.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/V_zCHtZIsYw" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2>My Portfolio</h2><p>What was that? You wanted to know where to find and play my games?! Well then, if you're inclined to try some of my games (and hopefully leave some feedback), here they are:</p><ul><li><a href="https://davidwesst.itch.io/vagabondgame" target="_blank" rel="noopener">Vagabond Game</a> -&gt; A top-down Unity based prototype where I learned the technical ropes of putting together a small, game experience, with narrative, graphics, and animation.</li><li><a href="https://davidwesst.itch.io/leaps-and-bounds" target="_blank" rel="noopener">Car Scientist</a> -&gt; My first gamejam submission and evolution of the Vagabond Game prototype, except this time built in Godot.</li><li><a href="https://davidwesst.itch.io/little-shop-of-wall-street" target="_blank" rel="noopener">Little Shop of Wall Street</a> -&gt; My Ludum Dare 46 submission, co-authored by <a href="https://westerndevs.com/bios/darcy_lussier/">D'Arcy Lussier</a> where you trade stocks online in order to feed an interesting plant, before it feeds on YOU!</li></ul>]]></content>
    
    <summary type="html">
    
      Ludum Dare 47, a weekend long global gamejam, is coming up in a few weeks. In order to prep for the event, I decided to take the time for review and reflect on my game portfolio to see what I learning objective and goals I can set for myself.
    
    </summary>
    
      <category term="devlog" scheme="https://westerndevs.com/categories/devlog/"/>
    
    
      <category term="gamedev" scheme="https://westerndevs.com/tags/gamedev/"/>
    
      <category term="game development" scheme="https://westerndevs.com/tags/game-development/"/>
    
      <category term="devlog" scheme="https://westerndevs.com/tags/devlog/"/>
    
      <category term="gamejam" scheme="https://westerndevs.com/tags/gamejam/"/>
    
      <category term="ludum dare" scheme="https://westerndevs.com/tags/ludum-dare/"/>
    
      <category term="github gameoff" scheme="https://westerndevs.com/tags/github-gameoff/"/>
    
  </entry>
  
  <entry>
    <title type="html">Release Notes for Little Shop of Wall Street 0.1.0-beta</title>
    <link href="https://westerndevs.com/devlog/little-shop-of-wall-street-01-release-notes/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/devlog/little-shop-of-wall-street-01-release-notes/</id>
    <published>2020-07-02T15:13:00.000Z</published>
    <updated>2025-03-30T01:37:49.764Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Finally! The 0.1 beta has arrived for Little Shop of Wall Street!</p><p>In this video, DW walks through the new features rolled out both in-game and behind the scenes for his LD46 game jam title.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/baMlNqGgiV4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>You can play the game here on <a href="https://davidwesst.itch.io/little-shop-of-wall-street" target="_blank" rel="noopener">Itch.io</a>.</p><h2>Side Notes</h2><p>This release is an important one for me.</p><p>First, off it's the first &quot;beta&quot; release which I've categorized as a moderately stable release, and includes a &quot;complete gameplay loop&quot; on purpose. There are still plenty of bugs (as the video even showed) but it works and playable.</p><p>Second, this release is the original vision of what I pictured the gamejam submission to be when D'Arcy and I came up with the idea back in April. Many months later, I have that release which says a lot about my prototyping and experimenting process (i.e. I'm too slow).</p><p>Lastly, I have multiple versions of the game out there including Linux/X11 and Windows versions. There's still a lot more to learn and do with the while devops setup for my projects, but this is a great step forward and can be reused with all my Godot-based projects moving forward.</p><p>Until the next one-- thanks for playing.</p><p>~ DW</p>]]></content>
    
    <summary type="html">
    
      Little Shop of Wall Street has a 0.1-beta release!
    
    </summary>
    
      <category term="devlog" scheme="https://westerndevs.com/categories/devlog/"/>
    
    
      <category term="gamedev" scheme="https://westerndevs.com/tags/gamedev/"/>
    
      <category term="game development" scheme="https://westerndevs.com/tags/game-development/"/>
    
      <category term="devlog" scheme="https://westerndevs.com/tags/devlog/"/>
    
      <category term="little shop of wall street" scheme="https://westerndevs.com/tags/little-shop-of-wall-street/"/>
    
      <category term="godot" scheme="https://westerndevs.com/tags/godot/"/>
    
  </entry>
  
  <entry>
    <title type="html">How Github Makes Game Making Easier for Noncoders</title>
    <link href="https://westerndevs.com/Game-Design/How-GitHub-Makes-Game-Making-Easier-For-NonCoders/" rel="alternate" type="text/html"/>
    <id>https://westerndevs.com/Game-Design/How-GitHub-Makes-Game-Making-Easier-For-NonCoders/</id>
    <published>2020-02-19T20:48:36.000Z</published>
    <updated>2025-03-30T01:37:49.762Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>https://westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>DW goes through five things he's been using in Github while designing his latest prototype that require zero coding skills.</p><a id="more"></a><p>GitHub is a social development platform that will make your game development journey easier even if you're not a coder! We'll cover how GitHub can help keep your file history, through to how it can help organize your work, and even where to find cool projects to learn (and possibly contribute to).</p><iframe width="560" height="315" src="https://www.youtube.com/embed/rq0JDWnVt8I" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2>References and Links</h2><h3>Github Desktop (Desktop Client)</h3><p>https://help.github.com/en/desktop</p><h3>Links to interesting game development &amp; design projects</h3><p>Tiled | https://github.com/bjorn/tiledInky | https://github.com/inkle/inkyOpenTDD | https://github.com/OpenTTD/OpenTTDMicropolisJS | https://github.com/graememcc/micropolisJS</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DW goes through five things he&#39;s been using in Github while designing his latest prototype that require zero coding skills.&lt;/p&gt;
    
    </summary>
    
      <category term="Game Design" scheme="https://westerndevs.com/categories/Game-Design/"/>
    
    
      <category term="GitHub" scheme="https://westerndevs.com/tags/GitHub/"/>
    
      <category term="Game Development" scheme="https://westerndevs.com/tags/Game-Development/"/>
    
      <category term="Game Design" scheme="https://westerndevs.com/tags/Game-Design/"/>
    
      <category term="Video" scheme="https://westerndevs.com/tags/Video/"/>
    
  </entry>
  
</feed>
